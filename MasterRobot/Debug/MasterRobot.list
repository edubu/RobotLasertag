
MasterRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e0  080054e0  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e8  080054e8  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080054f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200000c0  080055b0  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080055b0  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc7b  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002146  00000000  00000000  0002fd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00031eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d20  00000000  00000000  00033830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001030d  00000000  00000000  00049550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b947  00000000  00000000  0005985d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e51a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa0  00000000  00000000  000e51f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005470 	.word	0x08005470

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08005470 	.word	0x08005470

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <fire>:
/* USER CODE BEGIN 0 */
// IR STUFF
static uint8_t hitBit = 0;
static uint8_t cooldown = 0;

void fire() {
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
	//start TIM5 Channel 2 (pulse high)
	HAL_TIM_Base_Start_IT(&htim5);
 800057e:	480f      	ldr	r0, [pc, #60]	; (80005bc <fire+0x44>)
 8000580:	f002 fa7a 	bl	8002a78 <HAL_TIM_Base_Start_IT>

	//start TIM2 Channel 1 (38kHz emitter)
	TIM_OC_InitTypeDef sConfigOC;
	htim2.Init.Period = 25;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <fire+0x48>)
 8000586:	2219      	movs	r2, #25
 8000588:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(&htim2);
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <fire+0x48>)
 800058c:	f002 fb25 	bl	8002bda <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000590:	2360      	movs	r3, #96	; 0x60
 8000592:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 13;
 8000594:	230d      	movs	r3, #13
 8000596:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <fire+0x48>)
 80005a8:	f002 fde8 	bl	800317c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <fire+0x48>)
 80005b0:	f002 fb6c 	bl	8002c8c <HAL_TIM_PWM_Start>


}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000fc 	.word	0x200000fc
 80005c0:	20000218 	.word	0x20000218

080005c4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	if (htim == &htim5) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d103      	bne.n	80005dc <HAL_TIM_PeriodElapsedCallback+0x18>
		//turn off 38kHz emitter
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80005d4:	2100      	movs	r1, #0
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005d8:	f002 fc08 	bl	8002dec <HAL_TIM_PWM_Stop>
	}

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000fc 	.word	0x200000fc
 80005e8:	20000218 	.word	0x20000218

080005ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	//ir reciever hit
	if (pin == GPIO_PIN_4 && !cooldown) {
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	2b10      	cmp	r3, #16
 80005fa:	d106      	bne.n	800060a <HAL_GPIO_EXTI_Callback+0x1e>
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_GPIO_EXTI_Callback+0x2c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <HAL_GPIO_EXTI_Callback+0x1e>
		// Send "hit" bit to glove
		hitBit = 1;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_GPIO_EXTI_Callback+0x30>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
	}
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000dd 	.word	0x200000dd
 800061c:	200000dc 	.word	0x200000dc

08000620 <HAL_UART_RxCpltCallback>:
MOTOR motor3 = {&htim3, TIM_CHANNEL_3, GPIOB, GPIOB, GPIO_PIN_6, GPIO_PIN_7};
MOTOR motor4 = {&htim3, TIM_CHANNEL_4, GPIOB, GPIOB, GPIO_PIN_8, GPIO_PIN_9};

uint8_t Rx_data[13];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_UART_Receive_IT(&huart1, Rx_data, 7);
 8000628:	2207      	movs	r2, #7
 800062a:	4966      	ldr	r1, [pc, #408]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 800062c:	4866      	ldr	r0, [pc, #408]	; (80007c8 <HAL_UART_RxCpltCallback+0x1a8>)
 800062e:	f003 fbd6 	bl	8003dde <HAL_UART_Receive_IT>
 8000632:	4603      	mov	r3, r0
 8000634:	77fb      	strb	r3, [r7, #31]

	// Send to terminal for debugging



	int8_t m1 = Rx_data[1] - 10;
 8000636:	4b63      	ldr	r3, [pc, #396]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	3b0a      	subs	r3, #10
 800063c:	b2db      	uxtb	r3, r3
 800063e:	77bb      	strb	r3, [r7, #30]
	int8_t m2 = Rx_data[2] - 10;
 8000640:	4b60      	ldr	r3, [pc, #384]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	3b0a      	subs	r3, #10
 8000646:	b2db      	uxtb	r3, r3
 8000648:	777b      	strb	r3, [r7, #29]
	int8_t m3 = Rx_data[3] - 10;
 800064a:	4b5e      	ldr	r3, [pc, #376]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 800064c:	78db      	ldrb	r3, [r3, #3]
 800064e:	3b0a      	subs	r3, #10
 8000650:	b2db      	uxtb	r3, r3
 8000652:	773b      	strb	r3, [r7, #28]
	int8_t m4 = Rx_data[4] - 10;
 8000654:	4b5b      	ldr	r3, [pc, #364]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	3b0a      	subs	r3, #10
 800065a:	b2db      	uxtb	r3, r3
 800065c:	76fb      	strb	r3, [r7, #27]
	cooldown = Rx_data[5];
 800065e:	4b59      	ldr	r3, [pc, #356]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000660:	795a      	ldrb	r2, [r3, #5]
 8000662:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <HAL_UART_RxCpltCallback+0x1ac>)
 8000664:	701a      	strb	r2, [r3, #0]
	uint8_t position = Rx_data[6];
 8000666:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000668:	799b      	ldrb	r3, [r3, #6]
 800066a:	76bb      	strb	r3, [r7, #26]

	char buf[7];
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\t", m1), HAL_MAX_DELAY);
 800066c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4956      	ldr	r1, [pc, #344]	; (80007d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000676:	4618      	mov	r0, r3
 8000678:	f004 facc 	bl	8004c14 <siprintf>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	f107 0110 	add.w	r1, r7, #16
 8000684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000688:	4852      	ldr	r0, [pc, #328]	; (80007d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800068a:	f003 fb16 	bl	8003cba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\t", m2), HAL_MAX_DELAY);
 800068e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	494e      	ldr	r1, [pc, #312]	; (80007d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fabb 	bl	8004c14 <siprintf>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f107 0110 	add.w	r1, r7, #16
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006aa:	484a      	ldr	r0, [pc, #296]	; (80007d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80006ac:	f003 fb05 	bl	8003cba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\t", m3), HAL_MAX_DELAY);
 80006b0:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4945      	ldr	r1, [pc, #276]	; (80007d0 <HAL_UART_RxCpltCallback+0x1b0>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 faaa 	bl	8004c14 <siprintf>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f107 0110 	add.w	r1, r7, #16
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006cc:	4841      	ldr	r0, [pc, #260]	; (80007d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80006ce:	f003 faf4 	bl	8003cba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\t", m4), HAL_MAX_DELAY);
 80006d2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	493d      	ldr	r1, [pc, #244]	; (80007d0 <HAL_UART_RxCpltCallback+0x1b0>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 fa99 	bl	8004c14 <siprintf>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	f107 0110 	add.w	r1, r7, #16
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ee:	4839      	ldr	r0, [pc, #228]	; (80007d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80006f0:	f003 fae3 	bl	8003cba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\t", Rx_data[0]), HAL_MAX_DELAY);
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4934      	ldr	r1, [pc, #208]	; (80007d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fa87 	bl	8004c14 <siprintf>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	f107 0110 	add.w	r1, r7, #16
 800070e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000712:	4830      	ldr	r0, [pc, #192]	; (80007d4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000714:	f003 fad1 	bl	8003cba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\t", cooldown), HAL_MAX_DELAY);
 8000718:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <HAL_UART_RxCpltCallback+0x1ac>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	492b      	ldr	r1, [pc, #172]	; (80007d0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000724:	4618      	mov	r0, r3
 8000726:	f004 fa75 	bl	8004c14 <siprintf>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f107 0110 	add.w	r1, r7, #16
 8000732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000736:	4827      	ldr	r0, [pc, #156]	; (80007d4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000738:	f003 fabf 	bl	8003cba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\r\n", position), HAL_MAX_DELAY);
 800073c:	7eba      	ldrb	r2, [r7, #26]
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4925      	ldr	r1, [pc, #148]	; (80007d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fa65 	bl	8004c14 <siprintf>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	f107 0110 	add.w	r1, r7, #16
 8000752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000756:	481f      	ldr	r0, [pc, #124]	; (80007d4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000758:	f003 faaf 	bl	8003cba <HAL_UART_Transmit>

	motor_move(&motor1, m1);
 800075c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000760:	4619      	mov	r1, r3
 8000762:	481e      	ldr	r0, [pc, #120]	; (80007dc <HAL_UART_RxCpltCallback+0x1bc>)
 8000764:	f000 fc4b 	bl	8000ffe <motor_move>
	motor_move(&motor2, m2);
 8000768:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800076c:	4619      	mov	r1, r3
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <HAL_UART_RxCpltCallback+0x1c0>)
 8000770:	f000 fc45 	bl	8000ffe <motor_move>
	motor_move(&motor3, m3);
 8000774:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000778:	4619      	mov	r1, r3
 800077a:	481a      	ldr	r0, [pc, #104]	; (80007e4 <HAL_UART_RxCpltCallback+0x1c4>)
 800077c:	f000 fc3f 	bl	8000ffe <motor_move>
	motor_move(&motor4, m4);
 8000780:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000784:	4619      	mov	r1, r3
 8000786:	4818      	ldr	r0, [pc, #96]	; (80007e8 <HAL_UART_RxCpltCallback+0x1c8>)
 8000788:	f000 fc39 	bl	8000ffe <motor_move>
	move_stepper(position);
 800078c:	7ebb      	ldrb	r3, [r7, #26]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fdf6 	bl	8001380 <move_stepper>

	uint8_t buf2[1];
	buf2[0] = hitBit;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_UART_RxCpltCallback+0x1cc>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	733b      	strb	r3, [r7, #12]
	//transmit hit bit
	ret = HAL_UART_Transmit(&huart1, (uint8_t*)buf2, 1, HAL_MAX_DELAY);
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a2:	2201      	movs	r2, #1
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <HAL_UART_RxCpltCallback+0x1a8>)
 80007a6:	f003 fa88 	bl	8003cba <HAL_UART_Transmit>
 80007aa:	4603      	mov	r3, r0
 80007ac:	77fb      	strb	r3, [r7, #31]

	// FIRE
	if(Rx_data[0]){
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_UART_RxCpltCallback+0x1a4>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_UART_RxCpltCallback+0x19a>
		//pew pew
		fire();
 80007b6:	f7ff fedf 	bl	8000578 <fire>
	}
}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000ec 	.word	0x200000ec
 80007c8:	2000018c 	.word	0x2000018c
 80007cc:	200000dd 	.word	0x200000dd
 80007d0:	08005488 	.word	0x08005488
 80007d4:	20000260 	.word	0x20000260
 80007d8:	0800548c 	.word	0x0800548c
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000014 	.word	0x20000014
 80007e4:	20000028 	.word	0x20000028
 80007e8:	2000003c 	.word	0x2000003c
 80007ec:	200000dc 	.word	0x200000dc

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f001 f856 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f832 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f000 faf0 	bl	8000de0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000800:	f000 fac4 	bl	8000d8c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000804:	f000 f918 	bl	8000a38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000808:	f000 f98a 	bl	8000b20 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800080c:	f000 fa94 	bl	8000d38 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8000810:	f000 fa1e 	bl	8000c50 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000814:	f000 f890 	bl	8000938 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  motor_init(&motor1);
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <main+0x54>)
 800081a:	f000 fb88 	bl	8000f2e <motor_init>
  motor_init(&motor2);
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <main+0x58>)
 8000820:	f000 fb85 	bl	8000f2e <motor_init>
  motor_init(&motor3);
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <main+0x5c>)
 8000826:	f000 fb82 	bl	8000f2e <motor_init>
  motor_init(&motor4);
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <main+0x60>)
 800082c:	f000 fb7f 	bl	8000f2e <motor_init>

  stepper_init(&htim1);
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <main+0x64>)
 8000832:	f000 fc6f 	bl	8001114 <stepper_init>

  HAL_UART_Receive_IT(&huart1, Rx_data, 7);
 8000836:	2207      	movs	r2, #7
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <main+0x68>)
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <main+0x6c>)
 800083c:	f003 facf 	bl	8003dde <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000840:	e7fe      	b.n	8000840 <main+0x50>
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000
 8000848:	20000014 	.word	0x20000014
 800084c:	20000028 	.word	0x20000028
 8000850:	2000003c 	.word	0x2000003c
 8000854:	200001d0 	.word	0x200001d0
 8000858:	200000ec 	.word	0x200000ec
 800085c:	2000018c 	.word	0x2000018c

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	; 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	; 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f004 f9c8 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SystemClock_Config+0xd0>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a28      	ldr	r2, [pc, #160]	; (8000930 <SystemClock_Config+0xd0>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <SystemClock_Config+0xd0>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <SystemClock_Config+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <SystemClock_Config+0xd4>)
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <SystemClock_Config+0xd4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d4:	2310      	movs	r3, #16
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008de:	2304      	movs	r3, #4
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e2:	2307      	movs	r3, #7
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fba6 	bl	800203c <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008f6:	f000 fb15 	bl	8000f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fe08 	bl	800252c <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000922:	f000 faff 	bl	8000f24 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	; 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b092      	sub	sp, #72	; 0x48
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 f94e 	bl	8004c04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <MX_TIM1_Init+0xf8>)
 800096a:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <MX_TIM1_Init+0xfc>)
 800096c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <MX_TIM1_Init+0xf8>)
 8000970:	2253      	movs	r2, #83	; 0x53
 8000972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <MX_TIM1_Init+0xf8>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <MX_TIM1_Init+0xf8>)
 800097c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <MX_TIM1_Init+0xf8>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_TIM1_Init+0xf8>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_TIM1_Init+0xf8>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000994:	4826      	ldr	r0, [pc, #152]	; (8000a30 <MX_TIM1_Init+0xf8>)
 8000996:	f002 f8d1 	bl	8002b3c <HAL_TIM_OC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009a0:	f000 fac0 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b0:	4619      	mov	r1, r3
 80009b2:	481f      	ldr	r0, [pc, #124]	; (8000a30 <MX_TIM1_Init+0xf8>)
 80009b4:	f003 f860 	bl	8003a78 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009be:	f000 fab1 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <MX_TIM1_Init+0xf8>)
 80009e8:	f002 fb6c 	bl	80030c4 <HAL_TIM_OC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80009f2:	f000 fa97 	bl	8000f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_TIM1_Init+0xf8>)
 8000a1a:	f003 f89b 	bl	8003b54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a24:	f000 fa7e 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3748      	adds	r7, #72	; 0x48
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001d0 	.word	0x200001d0
 8000a34:	40010000 	.word	0x40010000

08000a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]
 8000a66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000a72:	2253      	movs	r2, #83	; 0x53
 8000a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000a7e:	2219      	movs	r2, #25
 8000a80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8e:	4823      	ldr	r0, [pc, #140]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000a90:	f001 ff48 	bl	8002924 <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a9a:	f000 fa43 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481c      	ldr	r0, [pc, #112]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000aac:	f002 fc28 	bl	8003300 <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000ab6:	f000 fa35 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000abc:	f002 f88d 	bl	8002bda <HAL_TIM_PWM_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000ac6:	f000 fa2d 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000ada:	f002 ffcd 	bl	8003a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ae4:	f000 fa1e 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae8:	2360      	movs	r3, #96	; 0x60
 8000aea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 13;
 8000aec:	230d      	movs	r3, #13
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000b00:	f002 fb3c 	bl	800317c <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b0a:	f000 fa0b 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <MX_TIM2_Init+0xe4>)
 8000b10:	f000 fd06 	bl	8001520 <HAL_TIM_MspPostInit>

}
 8000b14:	bf00      	nop
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000218 	.word	0x20000218

08000b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b50:	4b3d      	ldr	r3, [pc, #244]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b52:	4a3e      	ldr	r2, [pc, #248]	; (8000c4c <MX_TIM3_Init+0x12c>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b58:	2209      	movs	r2, #9
 8000b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b64:	f244 129f 	movw	r2, #16799	; 0x419f
 8000b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b76:	4834      	ldr	r0, [pc, #208]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b78:	f001 fed4 	bl	8002924 <HAL_TIM_Base_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b82:	f000 f9cf 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b90:	4619      	mov	r1, r3
 8000b92:	482d      	ldr	r0, [pc, #180]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000b94:	f002 fbb4 	bl	8003300 <HAL_TIM_ConfigClockSource>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b9e:	f000 f9c1 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ba2:	4829      	ldr	r0, [pc, #164]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000ba4:	f002 f819 	bl	8002bda <HAL_TIM_PWM_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bae:	f000 f9b9 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4821      	ldr	r0, [pc, #132]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000bc2:	f002 ff59 	bl	8003a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bcc:	f000 f9aa 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd0:	2360      	movs	r3, #96	; 0x60
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000be8:	f002 fac8 	bl	800317c <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bf2:	f000 f997 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000bfe:	f002 fabd 	bl	800317c <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c08:	f000 f98c 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2208      	movs	r2, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000c14:	f002 fab2 	bl	800317c <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000c1e:	f000 f981 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	220c      	movs	r2, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000c2a:	f002 faa7 	bl	800317c <HAL_TIM_PWM_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000c34:	f000 f976 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_TIM3_Init+0x128>)
 8000c3a:	f000 fc71 	bl	8001520 <HAL_TIM_MspPostInit>

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000144 	.word	0x20000144
 8000c4c:	40000400 	.word	0x40000400

08000c50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000c82:	4a2c      	ldr	r2, [pc, #176]	; (8000d34 <MX_TIM5_Init+0xe4>)
 8000c84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000c88:	2253      	movs	r2, #83	; 0x53
 8000c8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 59999;
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000c94:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000c98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ca6:	4822      	ldr	r0, [pc, #136]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000ca8:	f001 fe3c 	bl	8002924 <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000cb2:	f000 f937 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000cc4:	f002 fb1c 	bl	8003300 <HAL_TIM_ConfigClockSource>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000cce:	f000 f929 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000cd2:	4817      	ldr	r0, [pc, #92]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000cd4:	f001 ff32 	bl	8002b3c <HAL_TIM_OC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000cde:	f000 f921 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000cf2:	f002 fec1 	bl	8003a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000cfc:	f000 f912 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2204      	movs	r2, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM5_Init+0xe0>)
 8000d18:	f002 f9d4 	bl	80030c4 <HAL_TIM_OC_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000d22:	f000 f8ff 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3738      	adds	r7, #56	; 0x38
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000fc 	.word	0x200000fc
 8000d34:	40000c00 	.word	0x40000c00

08000d38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_USART1_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d70:	f002 ff56 	bl	8003c20 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f8d3 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000018c 	.word	0x2000018c
 8000d88:	40011000 	.word	0x40011000

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART2_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f002 ff2c 	bl	8003c20 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 f8a9 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000260 	.word	0x20000260
 8000ddc:	40004400 	.word	0x40004400

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a3e      	ldr	r2, [pc, #248]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a37      	ldr	r2, [pc, #220]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <MX_GPIO_Init+0x134>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	482b      	ldr	r0, [pc, #172]	; (8000f18 <MX_GPIO_Init+0x138>)
 8000e6c:	f001 f8b4 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000e76:	4829      	ldr	r0, [pc, #164]	; (8000f1c <MX_GPIO_Init+0x13c>)
 8000e78:	f001 f8ae 	bl	8001fd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4823      	ldr	r0, [pc, #140]	; (8000f20 <MX_GPIO_Init+0x140>)
 8000e94:	f000 ff1c 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481a      	ldr	r0, [pc, #104]	; (8000f18 <MX_GPIO_Init+0x138>)
 8000eae:	f000 ff0f 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_GPIO_Init+0x138>)
 8000eca:	f000 ff01 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ece:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8000ed2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_GPIO_Init+0x13c>)
 8000ee8:	f000 fef2 	bl	8001cd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f000 fe24 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f000 fe3d 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2028      	movs	r0, #40	; 0x28
 8000f02:	f000 fe1c 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f06:	2028      	movs	r0, #40	; 0x28
 8000f08:	f000 fe35 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>

08000f2e <motor_init>:
 *  Created on: Nov 15, 2021
 *      Author: hersh
 */
#include "motor.h"

void motor_init(MOTOR* motor) {
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	set_tim_ccr(motor->htim, motor->tim_channel, 0);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	f000 f8b5 	bl	80010b0 <set_tim_ccr>
	HAL_TIM_PWM_Start(motor->htim, motor->tim_channel);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4610      	mov	r0, r2
 8000f52:	f001 fe9b 	bl	8002c8c <HAL_TIM_PWM_Start>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <motor_forward>:

void motor_forward(MOTOR* motor, uint8_t speed) {
 8000f5e:	b5b0      	push	{r4, r5, r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->a1_port, motor->a1_pin, 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6898      	ldr	r0, [r3, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	8a1b      	ldrh	r3, [r3, #16]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	f001 f82f 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->a2_port, motor->a2_pin, 0);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68d8      	ldr	r0, [r3, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	8a5b      	ldrh	r3, [r3, #18]
 8000f82:	2200      	movs	r2, #0
 8000f84:	4619      	mov	r1, r3
 8000f86:	f001 f827 	bl	8001fd8 <HAL_GPIO_WritePin>

	set_tim_ccr(motor->htim, motor->tim_channel, speed_to_pulse(speed));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681c      	ldr	r4, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685d      	ldr	r5, [r3, #4]
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f863 	bl	8001060 <speed_to_pulse>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f000 f885 	bl	80010b0 <set_tim_ccr>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bdb0      	pop	{r4, r5, r7, pc}

08000fae <motor_backward>:

void motor_backward(MOTOR* motor, uint8_t speed) {
 8000fae:	b5b0      	push	{r4, r5, r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->a1_port, motor->a1_pin, 0);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6898      	ldr	r0, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	8a1b      	ldrh	r3, [r3, #16]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f001 f807 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->a2_port, motor->a2_pin, 1);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68d8      	ldr	r0, [r3, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	8a5b      	ldrh	r3, [r3, #18]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f000 ffff 	bl	8001fd8 <HAL_GPIO_WritePin>

	set_tim_ccr(motor->htim, motor->tim_channel, speed_to_pulse(speed));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681c      	ldr	r4, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685d      	ldr	r5, [r3, #4]
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f83b 	bl	8001060 <speed_to_pulse>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f000 f85d 	bl	80010b0 <set_tim_ccr>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}

08000ffe <motor_move>:

void motor_move(MOTOR* motor, int8_t speed) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	70fb      	strb	r3, [r7, #3]
	if (speed < 0) {
 800100a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	da05      	bge.n	800101e <motor_move+0x20>
		speed *= 1;
		motor_backward(motor, (uint8_t) speed);
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	4619      	mov	r1, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffc9 	bl	8000fae <motor_backward>
	} else if (speed > 0) {
		motor_forward(motor, (uint8_t) speed);
	} else {
		motor_stop(motor);
	}
}
 800101c:	e00c      	b.n	8001038 <motor_move+0x3a>
	} else if (speed > 0) {
 800101e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dd05      	ble.n	8001032 <motor_move+0x34>
		motor_forward(motor, (uint8_t) speed);
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff97 	bl	8000f5e <motor_forward>
}
 8001030:	e002      	b.n	8001038 <motor_move+0x3a>
		motor_stop(motor);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f804 	bl	8001040 <motor_stop>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <motor_stop>:

void motor_stop(MOTOR* motor) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	set_tim_ccr(motor->htim, motor->tim_channel, 0);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	f000 f82c 	bl	80010b0 <set_tim_ccr>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <speed_to_pulse>:

void motor_shutdown(MOTOR* motor) {
	HAL_TIM_PWM_Stop(motor->htim, motor->tim_channel);
}

uint32_t speed_to_pulse(uint8_t speed) {
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	if (speed < 1) {
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <speed_to_pulse+0x14>
		return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e016      	b.n	80010a2 <speed_to_pulse+0x42>
	}

	//ranges from 20% - 50% duty cycle
	//when 1 <= speed <= 10
	uint32_t pulse = 392 * speed + 2800;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8001082:	60fb      	str	r3, [r7, #12]
	pulse = (pulse < 3192) ? 3192 : pulse;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f640 4278 	movw	r2, #3192	; 0xc78
 800108a:	4293      	cmp	r3, r2
 800108c:	bf38      	it	cc
 800108e:	4613      	movcc	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
	pulse = (pulse > 6720) ? 6720 : pulse;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f5b3 5fd2 	cmp.w	r3, #6720	; 0x1a40
 8001098:	bf28      	it	cs
 800109a:	f44f 53d2 	movcs.w	r3, #6720	; 0x1a40
 800109e:	60fb      	str	r3, [r7, #12]

	return pulse;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <set_tim_ccr>:

void set_tim_ccr(TIM_HandleTypeDef* tim_handle, uint32_t channel, uint32_t pulse) {
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	channel >>= 2;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d81f      	bhi.n	8001108 <set_tim_ccr+0x58>
 80010c8:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <set_tim_ccr+0x20>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	080010eb 	.word	0x080010eb
 80010d8:	080010f5 	.word	0x080010f5
 80010dc:	080010ff 	.word	0x080010ff

	switch(channel) {
		case 0:
			tim_handle->Instance->CCR1 = pulse;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80010e8:	e00e      	b.n	8001108 <set_tim_ccr+0x58>
		case 1:
			tim_handle->Instance->CCR2 = pulse;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80010f2:	e009      	b.n	8001108 <set_tim_ccr+0x58>
		case 2:
			tim_handle->Instance->CCR3 = pulse;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010fc:	e004      	b.n	8001108 <set_tim_ccr+0x58>
		case 3:
			tim_handle->Instance->CCR4 = pulse;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001106:	bf00      	nop
	}
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <stepper_init>:
 *  Created on: Dec 3, 2021
 *  Author: hanchi / hmflynn
 */
#include "stepper.h"

void stepper_init(TIM_HandleTypeDef *htim_in) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	htim = htim_in;
 800111c:	4a05      	ldr	r2, [pc, #20]	; (8001134 <stepper_init+0x20>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <stepper_init+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fc4c 	bl	80029c4 <HAL_TIM_Base_Start>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002a4 	.word	0x200002a4

08001138 <delay>:

void delay (uint16_t us)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <delay+0x34>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 800114c:	bf00      	nop
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <delay+0x34>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	b29b      	uxth	r3, r3
 8001158:	88fa      	ldrh	r2, [r7, #6]
 800115a:	429a      	cmp	r2, r3
 800115c:	d8f7      	bhi.n	800114e <delay+0x16>
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	200002a4 	.word	0x200002a4

08001170 <stepper_set_rpm>:

void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8001178:	f643 1238 	movw	r2, #14648	; 0x3938
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ffd7 	bl	8001138 <delay>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <stepper_half_drive>:

void stepper_half_drive (int step)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	f200 80cc 	bhi.w	800133c <stepper_half_drive+0x1a8>
 80011a4:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <stepper_half_drive+0x18>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011cd 	.word	0x080011cd
 80011b0:	080011fb 	.word	0x080011fb
 80011b4:	08001229 	.word	0x08001229
 80011b8:	08001257 	.word	0x08001257
 80011bc:	08001285 	.word	0x08001285
 80011c0:	080012b3 	.word	0x080012b3
 80011c4:	080012e1 	.word	0x080012e1
 80011c8:	0800130f 	.word	0x0800130f
	switch (step){
		case 0:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 80011cc:	2201      	movs	r2, #1
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	485c      	ldr	r0, [pc, #368]	; (8001344 <stepper_half_drive+0x1b0>)
 80011d2:	f000 ff01 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 80011d6:	2200      	movs	r2, #0
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	485a      	ldr	r0, [pc, #360]	; (8001344 <stepper_half_drive+0x1b0>)
 80011dc:	f000 fefc 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e6:	4857      	ldr	r0, [pc, #348]	; (8001344 <stepper_half_drive+0x1b0>)
 80011e8:	f000 fef6 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f2:	4854      	ldr	r0, [pc, #336]	; (8001344 <stepper_half_drive+0x1b0>)
 80011f4:	f000 fef0 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 80011f8:	e0a0      	b.n	800133c <stepper_half_drive+0x1a8>

		case 1:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 80011fa:	2201      	movs	r2, #1
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	4851      	ldr	r0, [pc, #324]	; (8001344 <stepper_half_drive+0x1b0>)
 8001200:	f000 feea 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 8001204:	2201      	movs	r2, #1
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	484e      	ldr	r0, [pc, #312]	; (8001344 <stepper_half_drive+0x1b0>)
 800120a:	f000 fee5 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	484b      	ldr	r0, [pc, #300]	; (8001344 <stepper_half_drive+0x1b0>)
 8001216:	f000 fedf 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	4848      	ldr	r0, [pc, #288]	; (8001344 <stepper_half_drive+0x1b0>)
 8001222:	f000 fed9 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 8001226:	e089      	b.n	800133c <stepper_half_drive+0x1a8>

		case 2:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8001228:	2200      	movs	r2, #0
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	4845      	ldr	r0, [pc, #276]	; (8001344 <stepper_half_drive+0x1b0>)
 800122e:	f000 fed3 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 8001232:	2201      	movs	r2, #1
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	4843      	ldr	r0, [pc, #268]	; (8001344 <stepper_half_drive+0x1b0>)
 8001238:	f000 fece 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001242:	4840      	ldr	r0, [pc, #256]	; (8001344 <stepper_half_drive+0x1b0>)
 8001244:	f000 fec8 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124e:	483d      	ldr	r0, [pc, #244]	; (8001344 <stepper_half_drive+0x1b0>)
 8001250:	f000 fec2 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 8001254:	e072      	b.n	800133c <stepper_half_drive+0x1a8>

		case 3:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8001256:	2200      	movs	r2, #0
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	483a      	ldr	r0, [pc, #232]	; (8001344 <stepper_half_drive+0x1b0>)
 800125c:	f000 febc 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 8001260:	2201      	movs	r2, #1
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4837      	ldr	r0, [pc, #220]	; (8001344 <stepper_half_drive+0x1b0>)
 8001266:	f000 feb7 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001270:	4834      	ldr	r0, [pc, #208]	; (8001344 <stepper_half_drive+0x1b0>)
 8001272:	f000 feb1 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127c:	4831      	ldr	r0, [pc, #196]	; (8001344 <stepper_half_drive+0x1b0>)
 800127e:	f000 feab 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 8001282:	e05b      	b.n	800133c <stepper_half_drive+0x1a8>

		case 4:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8001284:	2200      	movs	r2, #0
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	482e      	ldr	r0, [pc, #184]	; (8001344 <stepper_half_drive+0x1b0>)
 800128a:	f000 fea5 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 800128e:	2200      	movs	r2, #0
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	482c      	ldr	r0, [pc, #176]	; (8001344 <stepper_half_drive+0x1b0>)
 8001294:	f000 fea0 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129e:	4829      	ldr	r0, [pc, #164]	; (8001344 <stepper_half_drive+0x1b0>)
 80012a0:	f000 fe9a 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012aa:	4826      	ldr	r0, [pc, #152]	; (8001344 <stepper_half_drive+0x1b0>)
 80012ac:	f000 fe94 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 80012b0:	e044      	b.n	800133c <stepper_half_drive+0x1a8>

		case 5:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 80012b2:	2200      	movs	r2, #0
 80012b4:	2140      	movs	r1, #64	; 0x40
 80012b6:	4823      	ldr	r0, [pc, #140]	; (8001344 <stepper_half_drive+0x1b0>)
 80012b8:	f000 fe8e 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 80012bc:	2200      	movs	r2, #0
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	4820      	ldr	r0, [pc, #128]	; (8001344 <stepper_half_drive+0x1b0>)
 80012c2:	f000 fe89 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <stepper_half_drive+0x1b0>)
 80012ce:	f000 fe83 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // IN4
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	481a      	ldr	r0, [pc, #104]	; (8001344 <stepper_half_drive+0x1b0>)
 80012da:	f000 fe7d 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 80012de:	e02d      	b.n	800133c <stepper_half_drive+0x1a8>

		case 6:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 80012e0:	2200      	movs	r2, #0
 80012e2:	2140      	movs	r1, #64	; 0x40
 80012e4:	4817      	ldr	r0, [pc, #92]	; (8001344 <stepper_half_drive+0x1b0>)
 80012e6:	f000 fe77 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 80012ea:	2200      	movs	r2, #0
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	4815      	ldr	r0, [pc, #84]	; (8001344 <stepper_half_drive+0x1b0>)
 80012f0:	f000 fe72 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <stepper_half_drive+0x1b0>)
 80012fc:	f000 fe6c 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // IN4
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001306:	480f      	ldr	r0, [pc, #60]	; (8001344 <stepper_half_drive+0x1b0>)
 8001308:	f000 fe66 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 800130c:	e016      	b.n	800133c <stepper_half_drive+0x1a8>

		case 7:
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 800130e:	2201      	movs	r2, #1
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <stepper_half_drive+0x1b0>)
 8001314:	f000 fe60 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 8001318:	2200      	movs	r2, #0
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <stepper_half_drive+0x1b0>)
 800131e:	f000 fe5b 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <stepper_half_drive+0x1b0>)
 800132a:	f000 fe55 	bl	8001fd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // IN4
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <stepper_half_drive+0x1b0>)
 8001336:	f000 fe4f 	bl	8001fd8 <HAL_GPIO_WritePin>
			  break;
 800133a:	bf00      	nop

		}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020800 	.word	0x40020800

08001348 <stepper_stop>:

void stepper_stop() {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 800134c:	2200      	movs	r2, #0
 800134e:	2140      	movs	r1, #64	; 0x40
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <stepper_stop+0x34>)
 8001352:	f000 fe41 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 8001356:	2200      	movs	r2, #0
 8001358:	2180      	movs	r1, #128	; 0x80
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <stepper_stop+0x34>)
 800135c:	f000 fe3c 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <stepper_stop+0x34>)
 8001368:	f000 fe36 	bl	8001fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <stepper_stop+0x34>)
 8001374:	f000 fe30 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020800 	.word	0x40020800

08001380 <move_stepper>:

// call this whenever ADC measurement is received over XBees
void move_stepper(uint8_t position) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	// Joystick neutral position
	if (position == 1) {
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <move_stepper+0x16>
		stepper_stop();
 8001390:	f7ff ffda 	bl	8001348 <stepper_stop>
		}
	}
	else {
		// ERROR
	}
}
 8001394:	e024      	b.n	80013e0 <move_stepper+0x60>
	else if (position == 0) {
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10f      	bne.n	80013bc <move_stepper+0x3c>
		for (int i = 7; i >= 0; i--) {
 800139c:	2307      	movs	r3, #7
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e008      	b.n	80013b4 <move_stepper+0x34>
			stepper_half_drive(i);
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff fef6 	bl	8001194 <stepper_half_drive>
			stepper_set_rpm(12);
 80013a8:	200c      	movs	r0, #12
 80013aa:	f7ff fee1 	bl	8001170 <stepper_set_rpm>
		for (int i = 7; i >= 0; i--) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	daf3      	bge.n	80013a2 <move_stepper+0x22>
}
 80013ba:	e011      	b.n	80013e0 <move_stepper+0x60>
	else if (position == 2) {
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d10e      	bne.n	80013e0 <move_stepper+0x60>
		for (int i = 0; i < 8; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	e008      	b.n	80013da <move_stepper+0x5a>
			stepper_half_drive(i);
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f7ff fee3 	bl	8001194 <stepper_half_drive>
			stepper_set_rpm(12);
 80013ce:	200c      	movs	r0, #12
 80013d0:	f7ff fece 	bl	8001170 <stepper_set_rpm>
		for (int i = 0; i < 8; i++) {
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	ddf3      	ble.n	80013c8 <move_stepper+0x48>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001426:	2007      	movs	r0, #7
 8001428:	f000 fb7e 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_TIM_OC_MspInit+0x3c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10d      	bne.n	8001466 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_TIM_OC_MspInit+0x40>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_TIM_OC_MspInit+0x40>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_TIM_OC_MspInit+0x40>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40010000 	.word	0x40010000
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148c:	d10e      	bne.n	80014ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80014aa:	e02e      	b.n	800150a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_TIM_Base_MspInit+0x9c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10e      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
}
 80014d2:	e01a      	b.n	800150a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d115      	bne.n	800150a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2032      	movs	r0, #50	; 0x32
 8001500:	f000 fb1d 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001504:	2032      	movs	r0, #50	; 0x32
 8001506:	f000 fb36 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40000400 	.word	0x40000400
 800151c:	40000c00 	.word	0x40000c00

08001520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	d11e      	bne.n	8001580 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a30      	ldr	r2, [pc, #192]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800155e:	2301      	movs	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800156e:	2301      	movs	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4825      	ldr	r0, [pc, #148]	; (8001610 <HAL_TIM_MspPostInit+0xf0>)
 800157a:	f000 fba9 	bl	8001cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800157e:	e040      	b.n	8001602 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_TIM_MspPostInit+0xf4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d13b      	bne.n	8001602 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_TIM_MspPostInit+0xec>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d2:	2302      	movs	r3, #2
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <HAL_TIM_MspPostInit+0xf0>)
 80015de:	f000 fb77 	bl	8001cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f2:	2302      	movs	r3, #2
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_TIM_MspPostInit+0xf8>)
 80015fe:	f000 fb67 	bl	8001cd0 <HAL_GPIO_Init>
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40000400 	.word	0x40000400
 8001618:	40020400 	.word	0x40020400

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a36      	ldr	r2, [pc, #216]	; (8001714 <HAL_UART_MspInit+0xf8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d135      	bne.n	80016aa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <HAL_UART_MspInit+0xfc>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a34      	ldr	r2, [pc, #208]	; (8001718 <HAL_UART_MspInit+0xfc>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_UART_MspInit+0xfc>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_UART_MspInit+0xfc>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <HAL_UART_MspInit+0xfc>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_UART_MspInit+0xfc>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001676:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001688:	2307      	movs	r3, #7
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4822      	ldr	r0, [pc, #136]	; (800171c <HAL_UART_MspInit+0x100>)
 8001694:	f000 fb1c 	bl	8001cd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2025      	movs	r0, #37	; 0x25
 800169e:	f000 fa4e 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016a2:	2025      	movs	r0, #37	; 0x25
 80016a4:	f000 fa67 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016a8:	e030      	b.n	800170c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_UART_MspInit+0x104>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d12b      	bne.n	800170c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0xfc>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_UART_MspInit+0xfc>)
 80016be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0xfc>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_UART_MspInit+0xfc>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_UART_MspInit+0xfc>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_UART_MspInit+0xfc>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ec:	230c      	movs	r3, #12
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0x100>)
 8001708:	f000 fae2 	bl	8001cd0 <HAL_GPIO_Init>
}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	; 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40011000 	.word	0x40011000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40004400 	.word	0x40004400

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f8ea 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800177c:	2010      	movs	r0, #16
 800177e:	f000 fc45 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <USART1_IRQHandler+0x10>)
 800178e:	f002 fb57 	bl	8003e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000018c 	.word	0x2000018c

0800179c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a4:	f000 fc32 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM5_IRQHandler+0x10>)
 80017b2:	f001 fb7f 	bl	8002eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200000fc 	.word	0x200000fc

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f003 f9de 	bl	8004bb0 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20018000 	.word	0x20018000
 8001820:	00000400 	.word	0x00000400
 8001824:	200000e0 	.word	0x200000e0
 8001828:	200002c0 	.word	0x200002c0

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001856:	490e      	ldr	r1, [pc, #56]	; (8001890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800186c:	4c0b      	ldr	r4, [pc, #44]	; (800189c <LoopFillZerobss+0x26>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800187a:	f7ff ffd7 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f003 f99d 	bl	8004bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7fe ffb5 	bl	80007f0 <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001888:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001894:	080054f0 	.word	0x080054f0
  ldr r2, =_sbss
 8001898:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800189c:	200002bc 	.word	0x200002bc

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f92b 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fd86 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f943 	bl	8001b92 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001924:	f000 f90b 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000050 	.word	0x20000050
 8001940:	20000058 	.word	0x20000058
 8001944:	20000054 	.word	0x20000054

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000058 	.word	0x20000058
 800196c:	200002a8 	.word	0x200002a8

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200002a8 	.word	0x200002a8

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff feda 	bl	8001970 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d008      	beq.n	8001bdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e052      	b.n	8001c82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0216 	bic.w	r2, r2, #22
 8001bea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <HAL_DMA_Abort+0x62>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0208 	bic.w	r2, r2, #8
 8001c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2c:	e013      	b.n	8001c56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2e:	f7ff fe9f 	bl	8001970 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d90c      	bls.n	8001c56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2203      	movs	r2, #3
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e015      	b.n	8001c82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e4      	bne.n	8001c2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	223f      	movs	r2, #63	; 0x3f
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e00c      	b.n	8001cc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2205      	movs	r2, #5
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	e159      	b.n	8001fa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 8148 	bne.w	8001f9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d005      	beq.n	8001d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d130      	bne.n	8001d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 0201 	and.w	r2, r3, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d017      	beq.n	8001dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d123      	bne.n	8001e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a2 	beq.w	8001f9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_GPIO_Init+0x2e8>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a56      	ldr	r2, [pc, #344]	; (8001fb8 <HAL_GPIO_Init+0x2e8>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HAL_GPIO_Init+0x2e8>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e72:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a49      	ldr	r2, [pc, #292]	; (8001fc0 <HAL_GPIO_Init+0x2f0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d019      	beq.n	8001ed2 <HAL_GPIO_Init+0x202>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a48      	ldr	r2, [pc, #288]	; (8001fc4 <HAL_GPIO_Init+0x2f4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0x1fe>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_GPIO_Init+0x2f8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x1fa>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a46      	ldr	r2, [pc, #280]	; (8001fcc <HAL_GPIO_Init+0x2fc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x1f6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <HAL_GPIO_Init+0x300>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x1f2>
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	e008      	b.n	8001ed4 <HAL_GPIO_Init+0x204>
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x204>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e004      	b.n	8001ed4 <HAL_GPIO_Init+0x204>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_Init+0x204>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x204>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	f002 0203 	and.w	r2, r2, #3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4093      	lsls	r3, r2
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee4:	4935      	ldr	r1, [pc, #212]	; (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f16:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f40:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_GPIO_Init+0x304>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	f67f aea2 	bls.w	8001cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40013c00 	.word	0x40013c00

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff4:	e003      	b.n	8001ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	619a      	str	r2, [r3, #24]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fade 	bl	80005ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40013c00 	.word	0x40013c00

0800203c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e264      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d075      	beq.n	8002146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205a:	4ba3      	ldr	r3, [pc, #652]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d00c      	beq.n	8002080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4ba0      	ldr	r3, [pc, #640]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206e:	2b08      	cmp	r3, #8
 8002070:	d112      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002072:	4b9d      	ldr	r3, [pc, #628]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207e:	d10b      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	4b99      	ldr	r3, [pc, #612]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05b      	beq.n	8002144 <HAL_RCC_OscConfig+0x108>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d157      	bne.n	8002144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e23f      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x74>
 80020a2:	4b91      	ldr	r3, [pc, #580]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a90      	ldr	r2, [pc, #576]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a8a      	ldr	r2, [pc, #552]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a87      	ldr	r2, [pc, #540]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020d4:	4b84      	ldr	r3, [pc, #528]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a83      	ldr	r2, [pc, #524]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a80      	ldr	r2, [pc, #512]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fc3c 	bl	8001970 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fc38 	bl	8001970 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e204      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xc0>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fc28 	bl	8001970 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fc24 	bl	8001970 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1f0      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b6c      	ldr	r3, [pc, #432]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0xe8>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002152:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b62      	ldr	r3, [pc, #392]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b5c      	ldr	r3, [pc, #368]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1c4      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4952      	ldr	r1, [pc, #328]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b4f      	ldr	r3, [pc, #316]	; (80022ec <HAL_RCC_OscConfig+0x2b0>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff fbdd 	bl	8001970 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fbd9 	bl	8001970 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1a5      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4940      	ldr	r1, [pc, #256]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_RCC_OscConfig+0x2b0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff fbbc 	bl	8001970 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff fbb8 	bl	8001970 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e184      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d030      	beq.n	8002288 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x2b4>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7ff fb9c 	bl	8001970 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223c:	f7ff fb98 	bl	8001970 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e164      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x200>
 800225a:	e015      	b.n	8002288 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x2b4>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7ff fb85 	bl	8001970 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226a:	f7ff fb81 	bl	8001970 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e14d      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a0 	beq.w	80023d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10f      	bne.n	80022c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x2b8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_RCC_OscConfig+0x2b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_RCC_OscConfig+0x2b8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7ff fb47 	bl	8001970 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e011      	b.n	800230a <HAL_RCC_OscConfig+0x2ce>
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	42470000 	.word	0x42470000
 80022f0:	42470e80 	.word	0x42470e80
 80022f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7ff fb3a 	bl	8001970 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e106      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b85      	ldr	r3, [pc, #532]	; (8002520 <HAL_RCC_OscConfig+0x4e4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d106      	bne.n	800232c <HAL_RCC_OscConfig+0x2f0>
 800231e:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	4a80      	ldr	r2, [pc, #512]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6713      	str	r3, [r2, #112]	; 0x70
 800232a:	e01c      	b.n	8002366 <HAL_RCC_OscConfig+0x32a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x312>
 8002334:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a7a      	ldr	r2, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b78      	ldr	r3, [pc, #480]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a77      	ldr	r2, [pc, #476]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0x32a>
 800234e:	4b75      	ldr	r3, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a74      	ldr	r2, [pc, #464]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	4b72      	ldr	r3, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	4a71      	ldr	r2, [pc, #452]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d015      	beq.n	800239a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f7ff faff 	bl	8001970 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff fafb 	bl	8001970 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0c5      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	4b65      	ldr	r3, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ee      	beq.n	8002376 <HAL_RCC_OscConfig+0x33a>
 8002398:	e014      	b.n	80023c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7ff fae9 	bl	8001970 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7ff fae5 	bl	8001970 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0af      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b56      	ldr	r3, [pc, #344]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a55      	ldr	r2, [pc, #340]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 809b 	beq.w	8002516 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d05c      	beq.n	80024a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d141      	bne.n	8002478 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_OscConfig+0x4ec>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7ff fab9 	bl	8001970 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff fab5 	bl	8001970 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e081      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002414:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	019b      	lsls	r3, r3, #6
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	3b01      	subs	r3, #1
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	4937      	ldr	r1, [pc, #220]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_RCC_OscConfig+0x4ec>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fa8e 	bl	8001970 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff fa8a 	bl	8001970 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e056      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x41c>
 8002476:	e04e      	b.n	8002516 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_RCC_OscConfig+0x4ec>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7ff fa77 	bl	8001970 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff fa73 	bl	8001970 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e03f      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x44a>
 80024a4:	e037      	b.n	8002516 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e032      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <HAL_RCC_OscConfig+0x4e8>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d028      	beq.n	8002512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d121      	bne.n	8002512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d11a      	bne.n	8002512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e2:	4013      	ands	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d111      	bne.n	8002512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	3b01      	subs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40007000 	.word	0x40007000
 8002524:	40023800 	.word	0x40023800
 8002528:	42470060 	.word	0x42470060

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cc      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d90c      	bls.n	8002568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d044      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d119      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e067      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4934      	ldr	r1, [pc, #208]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7ff f9a8 	bl	8001970 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7ff f9a4 	bl	8001970 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d20c      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f908 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08005494 	.word	0x08005494
 80026f0:	20000050 	.word	0x20000050
 80026f4:	20000054 	.word	0x20000054

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002710:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d00d      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x40>
 800271c:	2b08      	cmp	r3, #8
 800271e:	f200 80bd 	bhi.w	800289c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x34>
 8002726:	2b04      	cmp	r3, #4
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x3a>
 800272a:	e0b7      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800272e:	60bb      	str	r3, [r7, #8]
       break;
 8002730:	e0b7      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002734:	60bb      	str	r3, [r7, #8]
      break;
 8002736:	e0b4      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002738:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002740:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002742:	4b5b      	ldr	r3, [pc, #364]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d04d      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	461a      	mov	r2, r3
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	ea02 0800 	and.w	r8, r2, r0
 8002766:	ea03 0901 	and.w	r9, r3, r1
 800276a:	4640      	mov	r0, r8
 800276c:	4649      	mov	r1, r9
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	014b      	lsls	r3, r1, #5
 8002778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800277c:	0142      	lsls	r2, r0, #5
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	ebb0 0008 	subs.w	r0, r0, r8
 8002786:	eb61 0109 	sbc.w	r1, r1, r9
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002798:	0182      	lsls	r2, r0, #6
 800279a:	1a12      	subs	r2, r2, r0
 800279c:	eb63 0301 	sbc.w	r3, r3, r1
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	00d9      	lsls	r1, r3, #3
 80027aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027ae:	00d0      	lsls	r0, r2, #3
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	eb12 0208 	adds.w	r2, r2, r8
 80027b8:	eb43 0309 	adc.w	r3, r3, r9
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	0259      	lsls	r1, r3, #9
 80027c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027ca:	0250      	lsls	r0, r2, #9
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	f7fd fd50 	bl	8000280 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4613      	mov	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e04a      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	461a      	mov	r2, r3
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	ea02 0400 	and.w	r4, r2, r0
 8002802:	ea03 0501 	and.w	r5, r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	014b      	lsls	r3, r1, #5
 8002814:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002818:	0142      	lsls	r2, r0, #5
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	1b00      	subs	r0, r0, r4
 8002820:	eb61 0105 	sbc.w	r1, r1, r5
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	018b      	lsls	r3, r1, #6
 800282e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002832:	0182      	lsls	r2, r0, #6
 8002834:	1a12      	subs	r2, r2, r0
 8002836:	eb63 0301 	sbc.w	r3, r3, r1
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	00d9      	lsls	r1, r3, #3
 8002844:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002848:	00d0      	lsls	r0, r2, #3
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	1912      	adds	r2, r2, r4
 8002850:	eb45 0303 	adc.w	r3, r5, r3
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	0299      	lsls	r1, r3, #10
 800285e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002862:	0290      	lsls	r0, r2, #10
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	f7fd fd04 	bl	8000280 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4613      	mov	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	60bb      	str	r3, [r7, #8]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800289e:	60bb      	str	r3, [r7, #8]
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	68bb      	ldr	r3, [r7, #8]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000050 	.word	0x20000050

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	080054a4 	.word	0x080054a4

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffdc 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0b5b      	lsrs	r3, r3, #13
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	080054a4 	.word	0x080054a4

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fd96 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 fdbc 	bl	80034e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e03c      	b.n	8002a56 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <HAL_TIM_Base_Start+0xa0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d018      	beq.n	8002a20 <HAL_TIM_Base_Start+0x5c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f6:	d013      	beq.n	8002a20 <HAL_TIM_Base_Start+0x5c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_TIM_Base_Start+0xa4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00e      	beq.n	8002a20 <HAL_TIM_Base_Start+0x5c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_TIM_Base_Start+0xa8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_TIM_Base_Start+0x5c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_TIM_Base_Start+0xac>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_TIM_Base_Start+0x5c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_TIM_Base_Start+0xb0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d010      	beq.n	8002a54 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	e007      	b.n	8002a54 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40014000 	.word	0x40014000

08002a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e044      	b.n	8002b1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_TIM_Base_Start_IT+0xb0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d013      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_TIM_Base_Start_IT+0xb4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_TIM_Base_Start_IT+0xb8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d111      	bne.n	8002b08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d010      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	e007      	b.n	8002b18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00
 8002b38:	40014000 	.word	0x40014000

08002b3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe fc68 	bl	8001438 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fcb0 	bl	80034e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e041      	b.n	8002c70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f839 	bl	8002c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f000 fc61 	bl	80034e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_TIM_PWM_Start+0x24>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e022      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x6a>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d109      	bne.n	8002cca <HAL_TIM_PWM_Start+0x3e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e015      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x6a>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d109      	bne.n	8002ce4 <HAL_TIM_PWM_Start+0x58>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e008      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x6a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e068      	b.n	8002dd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_PWM_Start+0x82>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0c:	e013      	b.n	8002d36 <HAL_TIM_PWM_Start+0xaa>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_PWM_Start+0x92>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_PWM_Start+0xaa>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_PWM_Start+0xa2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d2c:	e003      	b.n	8002d36 <HAL_TIM_PWM_Start+0xaa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fe74 	bl	8003a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_TIM_PWM_Start+0x14c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d107      	bne.n	8002d5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_TIM_PWM_Start+0x14c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x10e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d013      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x10e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_TIM_PWM_Start+0x150>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x10e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_TIM_PWM_Start+0x154>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x10e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_TIM_PWM_Start+0x158>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x10e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_TIM_PWM_Start+0x15c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d111      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d010      	beq.n	8002dce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbc:	e007      	b.n	8002dce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40014000 	.word	0x40014000

08002dec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fe14 	bl	8003a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_TIM_PWM_Stop+0xc4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d117      	bne.n	8002e3e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <HAL_TIM_PWM_Stop+0x52>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	f240 4344 	movw	r3, #1092	; 0x444
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d107      	bne.n	8002e3e <HAL_TIM_PWM_Stop+0x52>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_TIM_PWM_Stop+0x82>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	f240 4344 	movw	r3, #1092	; 0x444
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_TIM_PWM_Stop+0x82>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Stop+0x92>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	e013      	b.n	8002ea6 <HAL_TIM_PWM_Stop+0xba>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_PWM_Stop+0xa2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8c:	e00b      	b.n	8002ea6 <HAL_TIM_PWM_Stop+0xba>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_PWM_Stop+0xb2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	e003      	b.n	8002ea6 <HAL_TIM_PWM_Stop+0xba>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0202 	mvn.w	r2, #2
 8002ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fad3 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fac5 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fad6 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0204 	mvn.w	r2, #4
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 faa9 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa9b 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 faac 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0208 	mvn.w	r2, #8
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa7f 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa71 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fa82 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0210 	mvn.w	r2, #16
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa55 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa47 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fa58 	bl	80034b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10e      	bne.n	8003038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0201 	mvn.w	r2, #1
 8003030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fac6 	bl	80005c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fdd4 	bl	8003c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa1d 	bl	80034ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b20      	cmp	r3, #32
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0220 	mvn.w	r2, #32
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fd9e 	bl	8003bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80030de:	2302      	movs	r3, #2
 80030e0:	e048      	b.n	8003174 <HAL_TIM_OC_ConfigChannel+0xb0>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d839      	bhi.n	8003164 <HAL_TIM_OC_ConfigChannel+0xa0>
 80030f0:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	0800312d 	.word	0x0800312d
 80030fc:	08003165 	.word	0x08003165
 8003100:	08003165 	.word	0x08003165
 8003104:	08003165 	.word	0x08003165
 8003108:	0800313b 	.word	0x0800313b
 800310c:	08003165 	.word	0x08003165
 8003110:	08003165 	.word	0x08003165
 8003114:	08003165 	.word	0x08003165
 8003118:	08003149 	.word	0x08003149
 800311c:	08003165 	.word	0x08003165
 8003120:	08003165 	.word	0x08003165
 8003124:	08003165 	.word	0x08003165
 8003128:	08003157 	.word	0x08003157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa54 	bl	80035e0 <TIM_OC1_SetConfig>
      break;
 8003138:	e017      	b.n	800316a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fab3 	bl	80036ac <TIM_OC2_SetConfig>
      break;
 8003146:	e010      	b.n	800316a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fb18 	bl	8003784 <TIM_OC3_SetConfig>
      break;
 8003154:	e009      	b.n	800316a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fb7b 	bl	8003858 <TIM_OC4_SetConfig>
      break;
 8003162:	e002      	b.n	800316a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
      break;
 8003168:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003172:	7dfb      	ldrb	r3, [r7, #23]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003196:	2302      	movs	r3, #2
 8003198:	e0ae      	b.n	80032f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	f200 809f 	bhi.w	80032e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	080032e9 	.word	0x080032e9
 80031b8:	080032e9 	.word	0x080032e9
 80031bc:	080032e9 	.word	0x080032e9
 80031c0:	08003225 	.word	0x08003225
 80031c4:	080032e9 	.word	0x080032e9
 80031c8:	080032e9 	.word	0x080032e9
 80031cc:	080032e9 	.word	0x080032e9
 80031d0:	08003267 	.word	0x08003267
 80031d4:	080032e9 	.word	0x080032e9
 80031d8:	080032e9 	.word	0x080032e9
 80031dc:	080032e9 	.word	0x080032e9
 80031e0:	080032a7 	.word	0x080032a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f9f8 	bl	80035e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0208 	orr.w	r2, r2, #8
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0204 	bic.w	r2, r2, #4
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	619a      	str	r2, [r3, #24]
      break;
 8003222:	e064      	b.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fa3e 	bl	80036ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6999      	ldr	r1, [r3, #24]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	021a      	lsls	r2, r3, #8
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	619a      	str	r2, [r3, #24]
      break;
 8003264:	e043      	b.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fa89 	bl	8003784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0208 	orr.w	r2, r2, #8
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0204 	bic.w	r2, r2, #4
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	61da      	str	r2, [r3, #28]
      break;
 80032a4:	e023      	b.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fad3 	bl	8003858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69d9      	ldr	r1, [r3, #28]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	021a      	lsls	r2, r3, #8
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	61da      	str	r2, [r3, #28]
      break;
 80032e6:	e002      	b.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
      break;
 80032ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_TIM_ConfigClockSource+0x1c>
 8003318:	2302      	movs	r3, #2
 800331a:	e0b4      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x186>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003354:	d03e      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335a:	f200 8087 	bhi.w	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	f000 8086 	beq.w	8003472 <HAL_TIM_ConfigClockSource+0x172>
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d87f      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b70      	cmp	r3, #112	; 0x70
 800336e:	d01a      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003370:	2b70      	cmp	r3, #112	; 0x70
 8003372:	d87b      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b60      	cmp	r3, #96	; 0x60
 8003376:	d050      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x11a>
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d877      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b50      	cmp	r3, #80	; 0x50
 800337e:	d03c      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xfa>
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	d873      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d058      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x13a>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d86f      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b30      	cmp	r3, #48	; 0x30
 800338e:	d064      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d86b      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b20      	cmp	r3, #32
 8003396:	d060      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d867      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05c      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d05a      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	e062      	b.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6899      	ldr	r1, [r3, #8]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f000 fb19 	bl	80039ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	609a      	str	r2, [r3, #8]
      break;
 80033d2:	e04f      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6899      	ldr	r1, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f000 fb02 	bl	80039ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e03c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	461a      	mov	r2, r3
 8003408:	f000 fa76 	bl	80038f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2150      	movs	r1, #80	; 0x50
 8003412:	4618      	mov	r0, r3
 8003414:	f000 facf 	bl	80039b6 <TIM_ITRx_SetConfig>
      break;
 8003418:	e02c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	461a      	mov	r2, r3
 8003428:	f000 fa95 	bl	8003956 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2160      	movs	r1, #96	; 0x60
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fabf 	bl	80039b6 <TIM_ITRx_SetConfig>
      break;
 8003438:	e01c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	461a      	mov	r2, r3
 8003448:	f000 fa56 	bl	80038f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	4618      	mov	r0, r3
 8003454:	f000 faaf 	bl	80039b6 <TIM_ITRx_SetConfig>
      break;
 8003458:	e00c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f000 faa6 	bl	80039b6 <TIM_ITRx_SetConfig>
      break;
 800346a:	e003      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      break;
 8003470:	e000      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <TIM_Base_SetConfig+0xe4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a31      	ldr	r2, [pc, #196]	; (80035c8 <TIM_Base_SetConfig+0xe8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a30      	ldr	r2, [pc, #192]	; (80035cc <TIM_Base_SetConfig+0xec>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <TIM_Base_SetConfig+0xf0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <TIM_Base_SetConfig+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01b      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003538:	d017      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <TIM_Base_SetConfig+0xe8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a21      	ldr	r2, [pc, #132]	; (80035cc <TIM_Base_SetConfig+0xec>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <TIM_Base_SetConfig+0xf0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <TIM_Base_SetConfig+0xf4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1e      	ldr	r2, [pc, #120]	; (80035d8 <TIM_Base_SetConfig+0xf8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <TIM_Base_SetConfig+0xfc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <TIM_Base_SetConfig+0xe4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d103      	bne.n	80035b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40014400 	.word	0x40014400
 80035dc:	40014800 	.word	0x40014800

080035e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0302 	bic.w	r3, r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <TIM_OC1_SetConfig+0xc8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d10c      	bne.n	8003656 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0308 	bic.w	r3, r3, #8
 8003642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <TIM_OC1_SetConfig+0xc8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d111      	bne.n	8003682 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40010000 	.word	0x40010000

080036ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0210 	bic.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0320 	bic.w	r3, r3, #32
 80036f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <TIM_OC2_SetConfig+0xd4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10d      	bne.n	8003728 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <TIM_OC2_SetConfig+0xd4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d113      	bne.n	8003758 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000

08003784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <TIM_OC3_SetConfig+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10d      	bne.n	80037fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <TIM_OC3_SetConfig+0xd0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d113      	bne.n	800382e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800380c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40010000 	.word	0x40010000

08003858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	031b      	lsls	r3, r3, #12
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <TIM_OC4_SetConfig+0x9c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d109      	bne.n	80038cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000

080038f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f023 0201 	bic.w	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 030a 	bic.w	r3, r3, #10
 8003934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003956:	b480      	push	{r7}
 8003958:	b087      	sub	sp, #28
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0210 	bic.w	r2, r3, #16
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	031b      	lsls	r3, r3, #12
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f043 0307 	orr.w	r3, r3, #7
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	021a      	lsls	r2, r3, #8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	609a      	str	r2, [r3, #8]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2201      	movs	r2, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	401a      	ands	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e050      	b.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d018      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d013      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10c      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40014000 	.word	0x40014000

08003b54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e03d      	b.n	8003bec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e03f      	b.n	8003cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd fce8 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fddb 	bl	8004820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08a      	sub	sp, #40	; 0x28
 8003cbe:	af02      	add	r7, sp, #8
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d17c      	bne.n	8003dd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_Transmit+0x2c>
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e075      	b.n	8003dd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UART_Transmit+0x3e>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e06e      	b.n	8003dd6 <HAL_UART_Transmit+0x11c>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2221      	movs	r2, #33	; 0x21
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0e:	f7fd fe2f 	bl	8001970 <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d108      	bne.n	8003d3c <HAL_UART_Transmit+0x82>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	e003      	b.n	8003d44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d4c:	e02a      	b.n	8003da4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fb1f 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e036      	b.n	8003dd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	3302      	adds	r3, #2
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e007      	b.n	8003d96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3301      	adds	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1cf      	bne.n	8003d4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	2140      	movs	r1, #64	; 0x40
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 faef 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e006      	b.n	8003dd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d11d      	bne.n	8003e34 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Receive_IT+0x26>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e016      	b.n	8003e36 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Receive_IT+0x38>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e00f      	b.n	8003e36 <HAL_UART_Receive_IT+0x58>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	461a      	mov	r2, r3
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fb24 	bl	8004478 <UART_Start_Receive_IT>
 8003e30:	4603      	mov	r3, r0
 8003e32:	e000      	b.n	8003e36 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b0ba      	sub	sp, #232	; 0xe8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x66>
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fc03 	bl	80046aa <UART_Receive_IT>
      return;
 8003ea4:	e256      	b.n	8004354 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80de 	beq.w	800406c <HAL_UART_IRQHandler+0x22c>
 8003eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80d1 	beq.w	800406c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_UART_IRQHandler+0xae>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_UART_IRQHandler+0xd2>
 8003efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_UART_IRQHandler+0xf6>
 8003f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d011      	beq.n	8003f66 <HAL_UART_IRQHandler+0x126>
 8003f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f043 0208 	orr.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 81ed 	beq.w	800434a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_UART_IRQHandler+0x14e>
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb8e 	bl	80046aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_UART_IRQHandler+0x17a>
 8003fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04f      	beq.n	800405a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fa96 	bl	80044ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d141      	bne.n	8004052 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ffa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1d9      	bne.n	8003fce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	2b00      	cmp	r3, #0
 8004020:	d013      	beq.n	800404a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	4a7d      	ldr	r2, [pc, #500]	; (800421c <HAL_UART_IRQHandler+0x3dc>)
 8004028:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fe2b 	bl	8001c8a <HAL_DMA_Abort_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	e00e      	b.n	8004068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f990 	bl	8004370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e00a      	b.n	8004068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f98c 	bl	8004370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e006      	b.n	8004068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f988 	bl	8004370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004066:	e170      	b.n	800434a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	bf00      	nop
    return;
 800406a:	e16e      	b.n	800434a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	2b01      	cmp	r3, #1
 8004072:	f040 814a 	bne.w	800430a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8143 	beq.w	800430a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 813c 	beq.w	800430a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	f040 80b4 	bne.w	8004220 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8140 	beq.w	800434e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040d6:	429a      	cmp	r2, r3
 80040d8:	f080 8139 	bcs.w	800434e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ee:	f000 8088 	beq.w	8004202 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800410c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800411e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800412a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1d9      	bne.n	80040f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3314      	adds	r3, #20
 8004144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800414e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800416a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e1      	bne.n	800413e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800418a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800418c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800419e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e3      	bne.n	800417a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80041e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e3      	bne.n	80041c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd fcd4 	bl	8001baa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420a:	b29b      	uxth	r3, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8b6 	bl	8004384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004218:	e099      	b.n	800434e <HAL_UART_IRQHandler+0x50e>
 800421a:	bf00      	nop
 800421c:	080045b3 	.word	0x080045b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 808b 	beq.w	8004352 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800423c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8086 	beq.w	8004352 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800426a:	647a      	str	r2, [r7, #68]	; 0x44
 800426c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e3      	bne.n	8004246 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	623b      	str	r3, [r7, #32]
   return(result);
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042a2:	633a      	str	r2, [r7, #48]	; 0x30
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e3      	bne.n	800427e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042e8:	61fa      	str	r2, [r7, #28]
 80042ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	617b      	str	r3, [r7, #20]
   return(result);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e3      	bne.n	80042c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f83e 	bl	8004384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004308:	e023      	b.n	8004352 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_UART_IRQHandler+0x4ea>
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f959 	bl	80045da <UART_Transmit_IT>
    return;
 8004328:	e014      	b.n	8004354 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <HAL_UART_IRQHandler+0x514>
 8004336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f999 	bl	800467a <UART_EndTransmit_IT>
    return;
 8004348:	e004      	b.n	8004354 <HAL_UART_IRQHandler+0x514>
    return;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <HAL_UART_IRQHandler+0x514>
      return;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <HAL_UART_IRQHandler+0x514>
      return;
 8004352:	bf00      	nop
  }
}
 8004354:	37e8      	adds	r7, #232	; 0xe8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop

0800435c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b090      	sub	sp, #64	; 0x40
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ac:	e050      	b.n	8004450 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b4:	d04c      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0x30>
 80043bc:	f7fd fad8 	bl	8001970 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d241      	bcs.n	8004450 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ec:	637a      	str	r2, [r7, #52]	; 0x34
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	613b      	str	r3, [r7, #16]
   return(result);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004420:	623a      	str	r2, [r7, #32]
 8004422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	69f9      	ldr	r1, [r7, #28]
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	61bb      	str	r3, [r7, #24]
   return(result);
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e5      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e00f      	b.n	8004470 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	429a      	cmp	r2, r3
 800446c:	d09f      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3740      	adds	r7, #64	; 0x40
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2222      	movs	r2, #34	; 0x22
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0220 	orr.w	r2, r2, #32
 80044dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b095      	sub	sp, #84	; 0x54
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800450a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004514:	643a      	str	r2, [r7, #64]	; 0x40
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800451a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e5      	bne.n	80044f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	61fb      	str	r3, [r7, #28]
   return(result);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004548:	62fa      	str	r2, [r7, #44]	; 0x2c
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e5      	bne.n	8004528 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	2b01      	cmp	r3, #1
 8004562:	d119      	bne.n	8004598 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	60bb      	str	r3, [r7, #8]
   return(result);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	647b      	str	r3, [r7, #68]	; 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004584:	61ba      	str	r2, [r7, #24]
 8004586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6979      	ldr	r1, [r7, #20]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	613b      	str	r3, [r7, #16]
   return(result);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045a6:	bf00      	nop
 80045a8:	3754      	adds	r7, #84	; 0x54
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff fecf 	bl	8004370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b21      	cmp	r3, #33	; 0x21
 80045ec:	d13e      	bne.n	800466c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	d114      	bne.n	8004622 <UART_Transmit_IT+0x48>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d110      	bne.n	8004622 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004614:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	1c9a      	adds	r2, r3, #2
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	621a      	str	r2, [r3, #32]
 8004620:	e008      	b.n	8004634 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6211      	str	r1, [r2, #32]
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29b      	uxth	r3, r3
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4619      	mov	r1, r3
 8004642:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10f      	bne.n	8004668 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004656:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004666:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004690:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fe5e 	bl	800435c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b08c      	sub	sp, #48	; 0x30
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b22      	cmp	r3, #34	; 0x22
 80046bc:	f040 80ab 	bne.w	8004816 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d117      	bne.n	80046fa <UART_Receive_IT+0x50>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d113      	bne.n	80046fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28
 80046f8:	e026      	b.n	8004748 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	d007      	beq.n	800471e <UART_Receive_IT+0x74>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10a      	bne.n	800472c <UART_Receive_IT+0x82>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e008      	b.n	800473e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004738:	b2da      	uxtb	r2, r3
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29b      	uxth	r3, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4619      	mov	r1, r3
 8004756:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004758:	2b00      	cmp	r3, #0
 800475a:	d15a      	bne.n	8004812 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0220 	bic.w	r2, r2, #32
 800476a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800477a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	2b01      	cmp	r3, #1
 800479a:	d135      	bne.n	8004808 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	613b      	str	r3, [r7, #16]
   return(result);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	623a      	str	r2, [r7, #32]
 80047c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	6a3a      	ldr	r2, [r7, #32]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d10a      	bne.n	80047fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fdbf 	bl	8004384 <HAL_UARTEx_RxEventCallback>
 8004806:	e002      	b.n	800480e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fb ff09 	bl	8000620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e002      	b.n	8004818 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3730      	adds	r7, #48	; 0x30
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	b09f      	sub	sp, #124	; 0x7c
 8004826:	af00      	add	r7, sp, #0
 8004828:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004836:	68d9      	ldr	r1, [r3, #12]
 8004838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	ea40 0301 	orr.w	r3, r0, r1
 8004840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	431a      	orrs	r2, r3
 800484c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	431a      	orrs	r2, r3
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004864:	f021 010c 	bic.w	r1, r1, #12
 8004868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800486e:	430b      	orrs	r3, r1
 8004870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800487c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487e:	6999      	ldr	r1, [r3, #24]
 8004880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	ea40 0301 	orr.w	r3, r0, r1
 8004888:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4bc5      	ldr	r3, [pc, #788]	; (8004ba4 <UART_SetConfig+0x384>)
 8004890:	429a      	cmp	r2, r3
 8004892:	d004      	beq.n	800489e <UART_SetConfig+0x7e>
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4bc3      	ldr	r3, [pc, #780]	; (8004ba8 <UART_SetConfig+0x388>)
 800489a:	429a      	cmp	r2, r3
 800489c:	d103      	bne.n	80048a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800489e:	f7fe f82d 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80048a2:	6778      	str	r0, [r7, #116]	; 0x74
 80048a4:	e002      	b.n	80048ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048a6:	f7fe f815 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80048aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80b6 	bne.w	8004a24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ba:	461c      	mov	r4, r3
 80048bc:	f04f 0500 	mov.w	r5, #0
 80048c0:	4622      	mov	r2, r4
 80048c2:	462b      	mov	r3, r5
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	6439      	str	r1, [r7, #64]	; 0x40
 80048c8:	415b      	adcs	r3, r3
 80048ca:	647b      	str	r3, [r7, #68]	; 0x44
 80048cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048d0:	1912      	adds	r2, r2, r4
 80048d2:	eb45 0303 	adc.w	r3, r5, r3
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	00d9      	lsls	r1, r3, #3
 80048e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048e4:	00d0      	lsls	r0, r2, #3
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	1911      	adds	r1, r2, r4
 80048ec:	6639      	str	r1, [r7, #96]	; 0x60
 80048ee:	416b      	adcs	r3, r5
 80048f0:	667b      	str	r3, [r7, #100]	; 0x64
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004900:	415b      	adcs	r3, r3
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004908:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800490c:	f7fb fcb8 	bl	8000280 <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4ba5      	ldr	r3, [pc, #660]	; (8004bac <UART_SetConfig+0x38c>)
 8004916:	fba3 2302 	umull	r2, r3, r3, r2
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	011e      	lsls	r6, r3, #4
 800491e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004920:	461c      	mov	r4, r3
 8004922:	f04f 0500 	mov.w	r5, #0
 8004926:	4622      	mov	r2, r4
 8004928:	462b      	mov	r3, r5
 800492a:	1891      	adds	r1, r2, r2
 800492c:	6339      	str	r1, [r7, #48]	; 0x30
 800492e:	415b      	adcs	r3, r3
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
 8004932:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004936:	1912      	adds	r2, r2, r4
 8004938:	eb45 0303 	adc.w	r3, r5, r3
 800493c:	f04f 0000 	mov.w	r0, #0
 8004940:	f04f 0100 	mov.w	r1, #0
 8004944:	00d9      	lsls	r1, r3, #3
 8004946:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800494a:	00d0      	lsls	r0, r2, #3
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	1911      	adds	r1, r2, r4
 8004952:	65b9      	str	r1, [r7, #88]	; 0x58
 8004954:	416b      	adcs	r3, r5
 8004956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	461a      	mov	r2, r3
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	1891      	adds	r1, r2, r2
 8004964:	62b9      	str	r1, [r7, #40]	; 0x28
 8004966:	415b      	adcs	r3, r3
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800496e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004972:	f7fb fc85 	bl	8000280 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4b8c      	ldr	r3, [pc, #560]	; (8004bac <UART_SetConfig+0x38c>)
 800497c:	fba3 1302 	umull	r1, r3, r3, r2
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	2164      	movs	r1, #100	; 0x64
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	3332      	adds	r3, #50	; 0x32
 800498e:	4a87      	ldr	r2, [pc, #540]	; (8004bac <UART_SetConfig+0x38c>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800499c:	441e      	add	r6, r3
 800499e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a0:	4618      	mov	r0, r3
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	1894      	adds	r4, r2, r2
 80049ac:	623c      	str	r4, [r7, #32]
 80049ae:	415b      	adcs	r3, r3
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049b6:	1812      	adds	r2, r2, r0
 80049b8:	eb41 0303 	adc.w	r3, r1, r3
 80049bc:	f04f 0400 	mov.w	r4, #0
 80049c0:	f04f 0500 	mov.w	r5, #0
 80049c4:	00dd      	lsls	r5, r3, #3
 80049c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049ca:	00d4      	lsls	r4, r2, #3
 80049cc:	4622      	mov	r2, r4
 80049ce:	462b      	mov	r3, r5
 80049d0:	1814      	adds	r4, r2, r0
 80049d2:	653c      	str	r4, [r7, #80]	; 0x50
 80049d4:	414b      	adcs	r3, r1
 80049d6:	657b      	str	r3, [r7, #84]	; 0x54
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	461a      	mov	r2, r3
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	1891      	adds	r1, r2, r2
 80049e4:	61b9      	str	r1, [r7, #24]
 80049e6:	415b      	adcs	r3, r3
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049f2:	f7fb fc45 	bl	8000280 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <UART_SetConfig+0x38c>)
 80049fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	2164      	movs	r1, #100	; 0x64
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	3332      	adds	r3, #50	; 0x32
 8004a0e:	4a67      	ldr	r2, [pc, #412]	; (8004bac <UART_SetConfig+0x38c>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	f003 0207 	and.w	r2, r3, #7
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4432      	add	r2, r6
 8004a20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a22:	e0b9      	b.n	8004b98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a26:	461c      	mov	r4, r3
 8004a28:	f04f 0500 	mov.w	r5, #0
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	462b      	mov	r3, r5
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	6139      	str	r1, [r7, #16]
 8004a34:	415b      	adcs	r3, r3
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a3c:	1912      	adds	r2, r2, r4
 8004a3e:	eb45 0303 	adc.w	r3, r5, r3
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	00d9      	lsls	r1, r3, #3
 8004a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a50:	00d0      	lsls	r0, r2, #3
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	eb12 0804 	adds.w	r8, r2, r4
 8004a5a:	eb43 0905 	adc.w	r9, r3, r5
 8004a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	008b      	lsls	r3, r1, #2
 8004a72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a76:	0082      	lsls	r2, r0, #2
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb fc00 	bl	8000280 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4b49      	ldr	r3, [pc, #292]	; (8004bac <UART_SetConfig+0x38c>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	011e      	lsls	r6, r3, #4
 8004a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a90:	4618      	mov	r0, r3
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	1894      	adds	r4, r2, r2
 8004a9c:	60bc      	str	r4, [r7, #8]
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa6:	1812      	adds	r2, r2, r0
 8004aa8:	eb41 0303 	adc.w	r3, r1, r3
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	f04f 0500 	mov.w	r5, #0
 8004ab4:	00dd      	lsls	r5, r3, #3
 8004ab6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aba:	00d4      	lsls	r4, r2, #3
 8004abc:	4622      	mov	r2, r4
 8004abe:	462b      	mov	r3, r5
 8004ac0:	1814      	adds	r4, r2, r0
 8004ac2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ac4:	414b      	adcs	r3, r1
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	008b      	lsls	r3, r1, #2
 8004adc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ae0:	0082      	lsls	r2, r0, #2
 8004ae2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ae6:	f7fb fbcb 	bl	8000280 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <UART_SetConfig+0x38c>)
 8004af0:	fba3 1302 	umull	r1, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	2164      	movs	r1, #100	; 0x64
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	3332      	adds	r3, #50	; 0x32
 8004b02:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <UART_SetConfig+0x38c>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0e:	441e      	add	r6, r3
 8004b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b12:	4618      	mov	r0, r3
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	1894      	adds	r4, r2, r2
 8004b1e:	603c      	str	r4, [r7, #0]
 8004b20:	415b      	adcs	r3, r3
 8004b22:	607b      	str	r3, [r7, #4]
 8004b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b28:	1812      	adds	r2, r2, r0
 8004b2a:	eb41 0303 	adc.w	r3, r1, r3
 8004b2e:	f04f 0400 	mov.w	r4, #0
 8004b32:	f04f 0500 	mov.w	r5, #0
 8004b36:	00dd      	lsls	r5, r3, #3
 8004b38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b3c:	00d4      	lsls	r4, r2, #3
 8004b3e:	4622      	mov	r2, r4
 8004b40:	462b      	mov	r3, r5
 8004b42:	eb12 0a00 	adds.w	sl, r2, r0
 8004b46:	eb43 0b01 	adc.w	fp, r3, r1
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	008b      	lsls	r3, r1, #2
 8004b5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b62:	0082      	lsls	r2, r0, #2
 8004b64:	4650      	mov	r0, sl
 8004b66:	4659      	mov	r1, fp
 8004b68:	f7fb fb8a 	bl	8000280 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <UART_SetConfig+0x38c>)
 8004b72:	fba3 1302 	umull	r1, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2164      	movs	r1, #100	; 0x64
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	3332      	adds	r3, #50	; 0x32
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <UART_SetConfig+0x38c>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4432      	add	r2, r6
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	377c      	adds	r7, #124	; 0x7c
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40011000 	.word	0x40011000
 8004ba8:	40011400 	.word	0x40011400
 8004bac:	51eb851f 	.word	0x51eb851f

08004bb0 <__errno>:
 8004bb0:	4b01      	ldr	r3, [pc, #4]	; (8004bb8 <__errno+0x8>)
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	2000005c 	.word	0x2000005c

08004bbc <__libc_init_array>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	4d0d      	ldr	r5, [pc, #52]	; (8004bf4 <__libc_init_array+0x38>)
 8004bc0:	4c0d      	ldr	r4, [pc, #52]	; (8004bf8 <__libc_init_array+0x3c>)
 8004bc2:	1b64      	subs	r4, r4, r5
 8004bc4:	10a4      	asrs	r4, r4, #2
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	42a6      	cmp	r6, r4
 8004bca:	d109      	bne.n	8004be0 <__libc_init_array+0x24>
 8004bcc:	4d0b      	ldr	r5, [pc, #44]	; (8004bfc <__libc_init_array+0x40>)
 8004bce:	4c0c      	ldr	r4, [pc, #48]	; (8004c00 <__libc_init_array+0x44>)
 8004bd0:	f000 fc4e 	bl	8005470 <_init>
 8004bd4:	1b64      	subs	r4, r4, r5
 8004bd6:	10a4      	asrs	r4, r4, #2
 8004bd8:	2600      	movs	r6, #0
 8004bda:	42a6      	cmp	r6, r4
 8004bdc:	d105      	bne.n	8004bea <__libc_init_array+0x2e>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be4:	4798      	blx	r3
 8004be6:	3601      	adds	r6, #1
 8004be8:	e7ee      	b.n	8004bc8 <__libc_init_array+0xc>
 8004bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bee:	4798      	blx	r3
 8004bf0:	3601      	adds	r6, #1
 8004bf2:	e7f2      	b.n	8004bda <__libc_init_array+0x1e>
 8004bf4:	080054e8 	.word	0x080054e8
 8004bf8:	080054e8 	.word	0x080054e8
 8004bfc:	080054e8 	.word	0x080054e8
 8004c00:	080054ec 	.word	0x080054ec

08004c04 <memset>:
 8004c04:	4402      	add	r2, r0
 8004c06:	4603      	mov	r3, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <siprintf>:
 8004c14:	b40e      	push	{r1, r2, r3}
 8004c16:	b500      	push	{lr}
 8004c18:	b09c      	sub	sp, #112	; 0x70
 8004c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c1c:	9002      	str	r0, [sp, #8]
 8004c1e:	9006      	str	r0, [sp, #24]
 8004c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c24:	4809      	ldr	r0, [pc, #36]	; (8004c4c <siprintf+0x38>)
 8004c26:	9107      	str	r1, [sp, #28]
 8004c28:	9104      	str	r1, [sp, #16]
 8004c2a:	4909      	ldr	r1, [pc, #36]	; (8004c50 <siprintf+0x3c>)
 8004c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	6800      	ldr	r0, [r0, #0]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	a902      	add	r1, sp, #8
 8004c38:	f000 f868 	bl	8004d0c <_svfiprintf_r>
 8004c3c:	9b02      	ldr	r3, [sp, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	b01c      	add	sp, #112	; 0x70
 8004c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c48:	b003      	add	sp, #12
 8004c4a:	4770      	bx	lr
 8004c4c:	2000005c 	.word	0x2000005c
 8004c50:	ffff0208 	.word	0xffff0208

08004c54 <__ssputs_r>:
 8004c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	688e      	ldr	r6, [r1, #8]
 8004c5a:	429e      	cmp	r6, r3
 8004c5c:	4682      	mov	sl, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	4690      	mov	r8, r2
 8004c62:	461f      	mov	r7, r3
 8004c64:	d838      	bhi.n	8004cd8 <__ssputs_r+0x84>
 8004c66:	898a      	ldrh	r2, [r1, #12]
 8004c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c6c:	d032      	beq.n	8004cd4 <__ssputs_r+0x80>
 8004c6e:	6825      	ldr	r5, [r4, #0]
 8004c70:	6909      	ldr	r1, [r1, #16]
 8004c72:	eba5 0901 	sub.w	r9, r5, r1
 8004c76:	6965      	ldr	r5, [r4, #20]
 8004c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c80:	3301      	adds	r3, #1
 8004c82:	444b      	add	r3, r9
 8004c84:	106d      	asrs	r5, r5, #1
 8004c86:	429d      	cmp	r5, r3
 8004c88:	bf38      	it	cc
 8004c8a:	461d      	movcc	r5, r3
 8004c8c:	0553      	lsls	r3, r2, #21
 8004c8e:	d531      	bpl.n	8004cf4 <__ssputs_r+0xa0>
 8004c90:	4629      	mov	r1, r5
 8004c92:	f000 fb47 	bl	8005324 <_malloc_r>
 8004c96:	4606      	mov	r6, r0
 8004c98:	b950      	cbnz	r0, 8004cb0 <__ssputs_r+0x5c>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	f8ca 3000 	str.w	r3, [sl]
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb0:	6921      	ldr	r1, [r4, #16]
 8004cb2:	464a      	mov	r2, r9
 8004cb4:	f000 fabe 	bl	8005234 <memcpy>
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc2:	81a3      	strh	r3, [r4, #12]
 8004cc4:	6126      	str	r6, [r4, #16]
 8004cc6:	6165      	str	r5, [r4, #20]
 8004cc8:	444e      	add	r6, r9
 8004cca:	eba5 0509 	sub.w	r5, r5, r9
 8004cce:	6026      	str	r6, [r4, #0]
 8004cd0:	60a5      	str	r5, [r4, #8]
 8004cd2:	463e      	mov	r6, r7
 8004cd4:	42be      	cmp	r6, r7
 8004cd6:	d900      	bls.n	8004cda <__ssputs_r+0x86>
 8004cd8:	463e      	mov	r6, r7
 8004cda:	4632      	mov	r2, r6
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	4641      	mov	r1, r8
 8004ce0:	f000 fab6 	bl	8005250 <memmove>
 8004ce4:	68a3      	ldr	r3, [r4, #8]
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	1b9b      	subs	r3, r3, r6
 8004cea:	4432      	add	r2, r6
 8004cec:	60a3      	str	r3, [r4, #8]
 8004cee:	6022      	str	r2, [r4, #0]
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e7db      	b.n	8004cac <__ssputs_r+0x58>
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	f000 fb6f 	bl	80053d8 <_realloc_r>
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d1e1      	bne.n	8004cc4 <__ssputs_r+0x70>
 8004d00:	6921      	ldr	r1, [r4, #16]
 8004d02:	4650      	mov	r0, sl
 8004d04:	f000 fabe 	bl	8005284 <_free_r>
 8004d08:	e7c7      	b.n	8004c9a <__ssputs_r+0x46>
	...

08004d0c <_svfiprintf_r>:
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	4698      	mov	r8, r3
 8004d12:	898b      	ldrh	r3, [r1, #12]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	b09d      	sub	sp, #116	; 0x74
 8004d18:	4607      	mov	r7, r0
 8004d1a:	460d      	mov	r5, r1
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	d50e      	bpl.n	8004d3e <_svfiprintf_r+0x32>
 8004d20:	690b      	ldr	r3, [r1, #16]
 8004d22:	b963      	cbnz	r3, 8004d3e <_svfiprintf_r+0x32>
 8004d24:	2140      	movs	r1, #64	; 0x40
 8004d26:	f000 fafd 	bl	8005324 <_malloc_r>
 8004d2a:	6028      	str	r0, [r5, #0]
 8004d2c:	6128      	str	r0, [r5, #16]
 8004d2e:	b920      	cbnz	r0, 8004d3a <_svfiprintf_r+0x2e>
 8004d30:	230c      	movs	r3, #12
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d38:	e0d1      	b.n	8004ede <_svfiprintf_r+0x1d2>
 8004d3a:	2340      	movs	r3, #64	; 0x40
 8004d3c:	616b      	str	r3, [r5, #20]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9309      	str	r3, [sp, #36]	; 0x24
 8004d42:	2320      	movs	r3, #32
 8004d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d4c:	2330      	movs	r3, #48	; 0x30
 8004d4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ef8 <_svfiprintf_r+0x1ec>
 8004d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d56:	f04f 0901 	mov.w	r9, #1
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	469a      	mov	sl, r3
 8004d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d62:	b10a      	cbz	r2, 8004d68 <_svfiprintf_r+0x5c>
 8004d64:	2a25      	cmp	r2, #37	; 0x25
 8004d66:	d1f9      	bne.n	8004d5c <_svfiprintf_r+0x50>
 8004d68:	ebba 0b04 	subs.w	fp, sl, r4
 8004d6c:	d00b      	beq.n	8004d86 <_svfiprintf_r+0x7a>
 8004d6e:	465b      	mov	r3, fp
 8004d70:	4622      	mov	r2, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	4638      	mov	r0, r7
 8004d76:	f7ff ff6d 	bl	8004c54 <__ssputs_r>
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f000 80aa 	beq.w	8004ed4 <_svfiprintf_r+0x1c8>
 8004d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d82:	445a      	add	r2, fp
 8004d84:	9209      	str	r2, [sp, #36]	; 0x24
 8004d86:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80a2 	beq.w	8004ed4 <_svfiprintf_r+0x1c8>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d9a:	f10a 0a01 	add.w	sl, sl, #1
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	9307      	str	r3, [sp, #28]
 8004da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da6:	931a      	str	r3, [sp, #104]	; 0x68
 8004da8:	4654      	mov	r4, sl
 8004daa:	2205      	movs	r2, #5
 8004dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db0:	4851      	ldr	r0, [pc, #324]	; (8004ef8 <_svfiprintf_r+0x1ec>)
 8004db2:	f7fb fa15 	bl	80001e0 <memchr>
 8004db6:	9a04      	ldr	r2, [sp, #16]
 8004db8:	b9d8      	cbnz	r0, 8004df2 <_svfiprintf_r+0xe6>
 8004dba:	06d0      	lsls	r0, r2, #27
 8004dbc:	bf44      	itt	mi
 8004dbe:	2320      	movmi	r3, #32
 8004dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc4:	0711      	lsls	r1, r2, #28
 8004dc6:	bf44      	itt	mi
 8004dc8:	232b      	movmi	r3, #43	; 0x2b
 8004dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dce:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd4:	d015      	beq.n	8004e02 <_svfiprintf_r+0xf6>
 8004dd6:	9a07      	ldr	r2, [sp, #28]
 8004dd8:	4654      	mov	r4, sl
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f04f 0c0a 	mov.w	ip, #10
 8004de0:	4621      	mov	r1, r4
 8004de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de6:	3b30      	subs	r3, #48	; 0x30
 8004de8:	2b09      	cmp	r3, #9
 8004dea:	d94e      	bls.n	8004e8a <_svfiprintf_r+0x17e>
 8004dec:	b1b0      	cbz	r0, 8004e1c <_svfiprintf_r+0x110>
 8004dee:	9207      	str	r2, [sp, #28]
 8004df0:	e014      	b.n	8004e1c <_svfiprintf_r+0x110>
 8004df2:	eba0 0308 	sub.w	r3, r0, r8
 8004df6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	9304      	str	r3, [sp, #16]
 8004dfe:	46a2      	mov	sl, r4
 8004e00:	e7d2      	b.n	8004da8 <_svfiprintf_r+0x9c>
 8004e02:	9b03      	ldr	r3, [sp, #12]
 8004e04:	1d19      	adds	r1, r3, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	9103      	str	r1, [sp, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bfbb      	ittet	lt
 8004e0e:	425b      	neglt	r3, r3
 8004e10:	f042 0202 	orrlt.w	r2, r2, #2
 8004e14:	9307      	strge	r3, [sp, #28]
 8004e16:	9307      	strlt	r3, [sp, #28]
 8004e18:	bfb8      	it	lt
 8004e1a:	9204      	strlt	r2, [sp, #16]
 8004e1c:	7823      	ldrb	r3, [r4, #0]
 8004e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e20:	d10c      	bne.n	8004e3c <_svfiprintf_r+0x130>
 8004e22:	7863      	ldrb	r3, [r4, #1]
 8004e24:	2b2a      	cmp	r3, #42	; 0x2a
 8004e26:	d135      	bne.n	8004e94 <_svfiprintf_r+0x188>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9203      	str	r2, [sp, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bfb8      	it	lt
 8004e34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e38:	3402      	adds	r4, #2
 8004e3a:	9305      	str	r3, [sp, #20]
 8004e3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f08 <_svfiprintf_r+0x1fc>
 8004e40:	7821      	ldrb	r1, [r4, #0]
 8004e42:	2203      	movs	r2, #3
 8004e44:	4650      	mov	r0, sl
 8004e46:	f7fb f9cb 	bl	80001e0 <memchr>
 8004e4a:	b140      	cbz	r0, 8004e5e <_svfiprintf_r+0x152>
 8004e4c:	2340      	movs	r3, #64	; 0x40
 8004e4e:	eba0 000a 	sub.w	r0, r0, sl
 8004e52:	fa03 f000 	lsl.w	r0, r3, r0
 8004e56:	9b04      	ldr	r3, [sp, #16]
 8004e58:	4303      	orrs	r3, r0
 8004e5a:	3401      	adds	r4, #1
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e62:	4826      	ldr	r0, [pc, #152]	; (8004efc <_svfiprintf_r+0x1f0>)
 8004e64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e68:	2206      	movs	r2, #6
 8004e6a:	f7fb f9b9 	bl	80001e0 <memchr>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d038      	beq.n	8004ee4 <_svfiprintf_r+0x1d8>
 8004e72:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <_svfiprintf_r+0x1f4>)
 8004e74:	bb1b      	cbnz	r3, 8004ebe <_svfiprintf_r+0x1b2>
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	3307      	adds	r3, #7
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	3308      	adds	r3, #8
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e84:	4433      	add	r3, r6
 8004e86:	9309      	str	r3, [sp, #36]	; 0x24
 8004e88:	e767      	b.n	8004d5a <_svfiprintf_r+0x4e>
 8004e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e8e:	460c      	mov	r4, r1
 8004e90:	2001      	movs	r0, #1
 8004e92:	e7a5      	b.n	8004de0 <_svfiprintf_r+0xd4>
 8004e94:	2300      	movs	r3, #0
 8004e96:	3401      	adds	r4, #1
 8004e98:	9305      	str	r3, [sp, #20]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f04f 0c0a 	mov.w	ip, #10
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea6:	3a30      	subs	r2, #48	; 0x30
 8004ea8:	2a09      	cmp	r2, #9
 8004eaa:	d903      	bls.n	8004eb4 <_svfiprintf_r+0x1a8>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0c5      	beq.n	8004e3c <_svfiprintf_r+0x130>
 8004eb0:	9105      	str	r1, [sp, #20]
 8004eb2:	e7c3      	b.n	8004e3c <_svfiprintf_r+0x130>
 8004eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eb8:	4604      	mov	r4, r0
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7f0      	b.n	8004ea0 <_svfiprintf_r+0x194>
 8004ebe:	ab03      	add	r3, sp, #12
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <_svfiprintf_r+0x1f8>)
 8004ec6:	a904      	add	r1, sp, #16
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f3af 8000 	nop.w
 8004ece:	1c42      	adds	r2, r0, #1
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	d1d6      	bne.n	8004e82 <_svfiprintf_r+0x176>
 8004ed4:	89ab      	ldrh	r3, [r5, #12]
 8004ed6:	065b      	lsls	r3, r3, #25
 8004ed8:	f53f af2c 	bmi.w	8004d34 <_svfiprintf_r+0x28>
 8004edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ede:	b01d      	add	sp, #116	; 0x74
 8004ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee4:	ab03      	add	r3, sp, #12
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	462a      	mov	r2, r5
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <_svfiprintf_r+0x1f8>)
 8004eec:	a904      	add	r1, sp, #16
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f000 f87a 	bl	8004fe8 <_printf_i>
 8004ef4:	e7eb      	b.n	8004ece <_svfiprintf_r+0x1c2>
 8004ef6:	bf00      	nop
 8004ef8:	080054ac 	.word	0x080054ac
 8004efc:	080054b6 	.word	0x080054b6
 8004f00:	00000000 	.word	0x00000000
 8004f04:	08004c55 	.word	0x08004c55
 8004f08:	080054b2 	.word	0x080054b2

08004f0c <_printf_common>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	4616      	mov	r6, r2
 8004f12:	4699      	mov	r9, r3
 8004f14:	688a      	ldr	r2, [r1, #8]
 8004f16:	690b      	ldr	r3, [r1, #16]
 8004f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	bfb8      	it	lt
 8004f20:	4613      	movlt	r3, r2
 8004f22:	6033      	str	r3, [r6, #0]
 8004f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f28:	4607      	mov	r7, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b10a      	cbz	r2, 8004f32 <_printf_common+0x26>
 8004f2e:	3301      	adds	r3, #1
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	0699      	lsls	r1, r3, #26
 8004f36:	bf42      	ittt	mi
 8004f38:	6833      	ldrmi	r3, [r6, #0]
 8004f3a:	3302      	addmi	r3, #2
 8004f3c:	6033      	strmi	r3, [r6, #0]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	f015 0506 	ands.w	r5, r5, #6
 8004f44:	d106      	bne.n	8004f54 <_printf_common+0x48>
 8004f46:	f104 0a19 	add.w	sl, r4, #25
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	6832      	ldr	r2, [r6, #0]
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dc26      	bgt.n	8004fa2 <_printf_common+0x96>
 8004f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f58:	1e13      	subs	r3, r2, #0
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	bf18      	it	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	0692      	lsls	r2, r2, #26
 8004f62:	d42b      	bmi.n	8004fbc <_printf_common+0xb0>
 8004f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d01e      	beq.n	8004fb0 <_printf_common+0xa4>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	68e5      	ldr	r5, [r4, #12]
 8004f76:	6832      	ldr	r2, [r6, #0]
 8004f78:	f003 0306 	and.w	r3, r3, #6
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	bf08      	it	eq
 8004f80:	1aad      	subeq	r5, r5, r2
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	6922      	ldr	r2, [r4, #16]
 8004f86:	bf0c      	ite	eq
 8004f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f8c:	2500      	movne	r5, #0
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bfc4      	itt	gt
 8004f92:	1a9b      	subgt	r3, r3, r2
 8004f94:	18ed      	addgt	r5, r5, r3
 8004f96:	2600      	movs	r6, #0
 8004f98:	341a      	adds	r4, #26
 8004f9a:	42b5      	cmp	r5, r6
 8004f9c:	d11a      	bne.n	8004fd4 <_printf_common+0xc8>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e008      	b.n	8004fb4 <_printf_common+0xa8>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	4638      	mov	r0, r7
 8004faa:	47c0      	blx	r8
 8004fac:	3001      	adds	r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_printf_common+0xac>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7c6      	b.n	8004f4a <_printf_common+0x3e>
 8004fbc:	18e1      	adds	r1, r4, r3
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	2030      	movs	r0, #48	; 0x30
 8004fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc6:	4422      	add	r2, r4
 8004fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	e7c7      	b.n	8004f64 <_printf_common+0x58>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4638      	mov	r0, r7
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0e6      	beq.n	8004fb0 <_printf_common+0xa4>
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7d9      	b.n	8004f9a <_printf_common+0x8e>
	...

08004fe8 <_printf_i>:
 8004fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	460c      	mov	r4, r1
 8004fee:	4691      	mov	r9, r2
 8004ff0:	7e27      	ldrb	r7, [r4, #24]
 8004ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ff4:	2f78      	cmp	r7, #120	; 0x78
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	469a      	mov	sl, r3
 8004ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ffe:	d807      	bhi.n	8005010 <_printf_i+0x28>
 8005000:	2f62      	cmp	r7, #98	; 0x62
 8005002:	d80a      	bhi.n	800501a <_printf_i+0x32>
 8005004:	2f00      	cmp	r7, #0
 8005006:	f000 80d8 	beq.w	80051ba <_printf_i+0x1d2>
 800500a:	2f58      	cmp	r7, #88	; 0x58
 800500c:	f000 80a3 	beq.w	8005156 <_printf_i+0x16e>
 8005010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005018:	e03a      	b.n	8005090 <_printf_i+0xa8>
 800501a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800501e:	2b15      	cmp	r3, #21
 8005020:	d8f6      	bhi.n	8005010 <_printf_i+0x28>
 8005022:	a001      	add	r0, pc, #4	; (adr r0, 8005028 <_printf_i+0x40>)
 8005024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005028:	08005081 	.word	0x08005081
 800502c:	08005095 	.word	0x08005095
 8005030:	08005011 	.word	0x08005011
 8005034:	08005011 	.word	0x08005011
 8005038:	08005011 	.word	0x08005011
 800503c:	08005011 	.word	0x08005011
 8005040:	08005095 	.word	0x08005095
 8005044:	08005011 	.word	0x08005011
 8005048:	08005011 	.word	0x08005011
 800504c:	08005011 	.word	0x08005011
 8005050:	08005011 	.word	0x08005011
 8005054:	080051a1 	.word	0x080051a1
 8005058:	080050c5 	.word	0x080050c5
 800505c:	08005183 	.word	0x08005183
 8005060:	08005011 	.word	0x08005011
 8005064:	08005011 	.word	0x08005011
 8005068:	080051c3 	.word	0x080051c3
 800506c:	08005011 	.word	0x08005011
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005011 	.word	0x08005011
 8005078:	08005011 	.word	0x08005011
 800507c:	0800518b 	.word	0x0800518b
 8005080:	680b      	ldr	r3, [r1, #0]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	600a      	str	r2, [r1, #0]
 8005088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800508c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005090:	2301      	movs	r3, #1
 8005092:	e0a3      	b.n	80051dc <_printf_i+0x1f4>
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	6808      	ldr	r0, [r1, #0]
 8005098:	062e      	lsls	r6, r5, #24
 800509a:	f100 0304 	add.w	r3, r0, #4
 800509e:	d50a      	bpl.n	80050b6 <_printf_i+0xce>
 80050a0:	6805      	ldr	r5, [r0, #0]
 80050a2:	600b      	str	r3, [r1, #0]
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	da03      	bge.n	80050b0 <_printf_i+0xc8>
 80050a8:	232d      	movs	r3, #45	; 0x2d
 80050aa:	426d      	negs	r5, r5
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b0:	485e      	ldr	r0, [pc, #376]	; (800522c <_printf_i+0x244>)
 80050b2:	230a      	movs	r3, #10
 80050b4:	e019      	b.n	80050ea <_printf_i+0x102>
 80050b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050ba:	6805      	ldr	r5, [r0, #0]
 80050bc:	600b      	str	r3, [r1, #0]
 80050be:	bf18      	it	ne
 80050c0:	b22d      	sxthne	r5, r5
 80050c2:	e7ef      	b.n	80050a4 <_printf_i+0xbc>
 80050c4:	680b      	ldr	r3, [r1, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	1d18      	adds	r0, r3, #4
 80050ca:	6008      	str	r0, [r1, #0]
 80050cc:	0628      	lsls	r0, r5, #24
 80050ce:	d501      	bpl.n	80050d4 <_printf_i+0xec>
 80050d0:	681d      	ldr	r5, [r3, #0]
 80050d2:	e002      	b.n	80050da <_printf_i+0xf2>
 80050d4:	0669      	lsls	r1, r5, #25
 80050d6:	d5fb      	bpl.n	80050d0 <_printf_i+0xe8>
 80050d8:	881d      	ldrh	r5, [r3, #0]
 80050da:	4854      	ldr	r0, [pc, #336]	; (800522c <_printf_i+0x244>)
 80050dc:	2f6f      	cmp	r7, #111	; 0x6f
 80050de:	bf0c      	ite	eq
 80050e0:	2308      	moveq	r3, #8
 80050e2:	230a      	movne	r3, #10
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ea:	6866      	ldr	r6, [r4, #4]
 80050ec:	60a6      	str	r6, [r4, #8]
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	bfa2      	ittt	ge
 80050f2:	6821      	ldrge	r1, [r4, #0]
 80050f4:	f021 0104 	bicge.w	r1, r1, #4
 80050f8:	6021      	strge	r1, [r4, #0]
 80050fa:	b90d      	cbnz	r5, 8005100 <_printf_i+0x118>
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	d04d      	beq.n	800519c <_printf_i+0x1b4>
 8005100:	4616      	mov	r6, r2
 8005102:	fbb5 f1f3 	udiv	r1, r5, r3
 8005106:	fb03 5711 	mls	r7, r3, r1, r5
 800510a:	5dc7      	ldrb	r7, [r0, r7]
 800510c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005110:	462f      	mov	r7, r5
 8005112:	42bb      	cmp	r3, r7
 8005114:	460d      	mov	r5, r1
 8005116:	d9f4      	bls.n	8005102 <_printf_i+0x11a>
 8005118:	2b08      	cmp	r3, #8
 800511a:	d10b      	bne.n	8005134 <_printf_i+0x14c>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	07df      	lsls	r7, r3, #31
 8005120:	d508      	bpl.n	8005134 <_printf_i+0x14c>
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	6861      	ldr	r1, [r4, #4]
 8005126:	4299      	cmp	r1, r3
 8005128:	bfde      	ittt	le
 800512a:	2330      	movle	r3, #48	; 0x30
 800512c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005130:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005134:	1b92      	subs	r2, r2, r6
 8005136:	6122      	str	r2, [r4, #16]
 8005138:	f8cd a000 	str.w	sl, [sp]
 800513c:	464b      	mov	r3, r9
 800513e:	aa03      	add	r2, sp, #12
 8005140:	4621      	mov	r1, r4
 8005142:	4640      	mov	r0, r8
 8005144:	f7ff fee2 	bl	8004f0c <_printf_common>
 8005148:	3001      	adds	r0, #1
 800514a:	d14c      	bne.n	80051e6 <_printf_i+0x1fe>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005150:	b004      	add	sp, #16
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	4835      	ldr	r0, [pc, #212]	; (800522c <_printf_i+0x244>)
 8005158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	680e      	ldr	r6, [r1, #0]
 8005160:	061f      	lsls	r7, r3, #24
 8005162:	f856 5b04 	ldr.w	r5, [r6], #4
 8005166:	600e      	str	r6, [r1, #0]
 8005168:	d514      	bpl.n	8005194 <_printf_i+0x1ac>
 800516a:	07d9      	lsls	r1, r3, #31
 800516c:	bf44      	itt	mi
 800516e:	f043 0320 	orrmi.w	r3, r3, #32
 8005172:	6023      	strmi	r3, [r4, #0]
 8005174:	b91d      	cbnz	r5, 800517e <_printf_i+0x196>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	f023 0320 	bic.w	r3, r3, #32
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	2310      	movs	r3, #16
 8005180:	e7b0      	b.n	80050e4 <_printf_i+0xfc>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f043 0320 	orr.w	r3, r3, #32
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	2378      	movs	r3, #120	; 0x78
 800518c:	4828      	ldr	r0, [pc, #160]	; (8005230 <_printf_i+0x248>)
 800518e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005192:	e7e3      	b.n	800515c <_printf_i+0x174>
 8005194:	065e      	lsls	r6, r3, #25
 8005196:	bf48      	it	mi
 8005198:	b2ad      	uxthmi	r5, r5
 800519a:	e7e6      	b.n	800516a <_printf_i+0x182>
 800519c:	4616      	mov	r6, r2
 800519e:	e7bb      	b.n	8005118 <_printf_i+0x130>
 80051a0:	680b      	ldr	r3, [r1, #0]
 80051a2:	6826      	ldr	r6, [r4, #0]
 80051a4:	6960      	ldr	r0, [r4, #20]
 80051a6:	1d1d      	adds	r5, r3, #4
 80051a8:	600d      	str	r5, [r1, #0]
 80051aa:	0635      	lsls	r5, r6, #24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	d501      	bpl.n	80051b4 <_printf_i+0x1cc>
 80051b0:	6018      	str	r0, [r3, #0]
 80051b2:	e002      	b.n	80051ba <_printf_i+0x1d2>
 80051b4:	0671      	lsls	r1, r6, #25
 80051b6:	d5fb      	bpl.n	80051b0 <_printf_i+0x1c8>
 80051b8:	8018      	strh	r0, [r3, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	4616      	mov	r6, r2
 80051c0:	e7ba      	b.n	8005138 <_printf_i+0x150>
 80051c2:	680b      	ldr	r3, [r1, #0]
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	600a      	str	r2, [r1, #0]
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	6862      	ldr	r2, [r4, #4]
 80051cc:	2100      	movs	r1, #0
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7fb f806 	bl	80001e0 <memchr>
 80051d4:	b108      	cbz	r0, 80051da <_printf_i+0x1f2>
 80051d6:	1b80      	subs	r0, r0, r6
 80051d8:	6060      	str	r0, [r4, #4]
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	2300      	movs	r3, #0
 80051e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e4:	e7a8      	b.n	8005138 <_printf_i+0x150>
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	4632      	mov	r2, r6
 80051ea:	4649      	mov	r1, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	47d0      	blx	sl
 80051f0:	3001      	adds	r0, #1
 80051f2:	d0ab      	beq.n	800514c <_printf_i+0x164>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	079b      	lsls	r3, r3, #30
 80051f8:	d413      	bmi.n	8005222 <_printf_i+0x23a>
 80051fa:	68e0      	ldr	r0, [r4, #12]
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	4298      	cmp	r0, r3
 8005200:	bfb8      	it	lt
 8005202:	4618      	movlt	r0, r3
 8005204:	e7a4      	b.n	8005150 <_printf_i+0x168>
 8005206:	2301      	movs	r3, #1
 8005208:	4632      	mov	r2, r6
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	47d0      	blx	sl
 8005210:	3001      	adds	r0, #1
 8005212:	d09b      	beq.n	800514c <_printf_i+0x164>
 8005214:	3501      	adds	r5, #1
 8005216:	68e3      	ldr	r3, [r4, #12]
 8005218:	9903      	ldr	r1, [sp, #12]
 800521a:	1a5b      	subs	r3, r3, r1
 800521c:	42ab      	cmp	r3, r5
 800521e:	dcf2      	bgt.n	8005206 <_printf_i+0x21e>
 8005220:	e7eb      	b.n	80051fa <_printf_i+0x212>
 8005222:	2500      	movs	r5, #0
 8005224:	f104 0619 	add.w	r6, r4, #25
 8005228:	e7f5      	b.n	8005216 <_printf_i+0x22e>
 800522a:	bf00      	nop
 800522c:	080054bd 	.word	0x080054bd
 8005230:	080054ce 	.word	0x080054ce

08005234 <memcpy>:
 8005234:	440a      	add	r2, r1
 8005236:	4291      	cmp	r1, r2
 8005238:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800523c:	d100      	bne.n	8005240 <memcpy+0xc>
 800523e:	4770      	bx	lr
 8005240:	b510      	push	{r4, lr}
 8005242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800524a:	4291      	cmp	r1, r2
 800524c:	d1f9      	bne.n	8005242 <memcpy+0xe>
 800524e:	bd10      	pop	{r4, pc}

08005250 <memmove>:
 8005250:	4288      	cmp	r0, r1
 8005252:	b510      	push	{r4, lr}
 8005254:	eb01 0402 	add.w	r4, r1, r2
 8005258:	d902      	bls.n	8005260 <memmove+0x10>
 800525a:	4284      	cmp	r4, r0
 800525c:	4623      	mov	r3, r4
 800525e:	d807      	bhi.n	8005270 <memmove+0x20>
 8005260:	1e43      	subs	r3, r0, #1
 8005262:	42a1      	cmp	r1, r4
 8005264:	d008      	beq.n	8005278 <memmove+0x28>
 8005266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800526a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800526e:	e7f8      	b.n	8005262 <memmove+0x12>
 8005270:	4402      	add	r2, r0
 8005272:	4601      	mov	r1, r0
 8005274:	428a      	cmp	r2, r1
 8005276:	d100      	bne.n	800527a <memmove+0x2a>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800527e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005282:	e7f7      	b.n	8005274 <memmove+0x24>

08005284 <_free_r>:
 8005284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005286:	2900      	cmp	r1, #0
 8005288:	d048      	beq.n	800531c <_free_r+0x98>
 800528a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528e:	9001      	str	r0, [sp, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f1a1 0404 	sub.w	r4, r1, #4
 8005296:	bfb8      	it	lt
 8005298:	18e4      	addlt	r4, r4, r3
 800529a:	f000 f8d3 	bl	8005444 <__malloc_lock>
 800529e:	4a20      	ldr	r2, [pc, #128]	; (8005320 <_free_r+0x9c>)
 80052a0:	9801      	ldr	r0, [sp, #4]
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	4615      	mov	r5, r2
 80052a6:	b933      	cbnz	r3, 80052b6 <_free_r+0x32>
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	6014      	str	r4, [r2, #0]
 80052ac:	b003      	add	sp, #12
 80052ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052b2:	f000 b8cd 	b.w	8005450 <__malloc_unlock>
 80052b6:	42a3      	cmp	r3, r4
 80052b8:	d90b      	bls.n	80052d2 <_free_r+0x4e>
 80052ba:	6821      	ldr	r1, [r4, #0]
 80052bc:	1862      	adds	r2, r4, r1
 80052be:	4293      	cmp	r3, r2
 80052c0:	bf04      	itt	eq
 80052c2:	681a      	ldreq	r2, [r3, #0]
 80052c4:	685b      	ldreq	r3, [r3, #4]
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	bf04      	itt	eq
 80052ca:	1852      	addeq	r2, r2, r1
 80052cc:	6022      	streq	r2, [r4, #0]
 80052ce:	602c      	str	r4, [r5, #0]
 80052d0:	e7ec      	b.n	80052ac <_free_r+0x28>
 80052d2:	461a      	mov	r2, r3
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	b10b      	cbz	r3, 80052dc <_free_r+0x58>
 80052d8:	42a3      	cmp	r3, r4
 80052da:	d9fa      	bls.n	80052d2 <_free_r+0x4e>
 80052dc:	6811      	ldr	r1, [r2, #0]
 80052de:	1855      	adds	r5, r2, r1
 80052e0:	42a5      	cmp	r5, r4
 80052e2:	d10b      	bne.n	80052fc <_free_r+0x78>
 80052e4:	6824      	ldr	r4, [r4, #0]
 80052e6:	4421      	add	r1, r4
 80052e8:	1854      	adds	r4, r2, r1
 80052ea:	42a3      	cmp	r3, r4
 80052ec:	6011      	str	r1, [r2, #0]
 80052ee:	d1dd      	bne.n	80052ac <_free_r+0x28>
 80052f0:	681c      	ldr	r4, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	6053      	str	r3, [r2, #4]
 80052f6:	4421      	add	r1, r4
 80052f8:	6011      	str	r1, [r2, #0]
 80052fa:	e7d7      	b.n	80052ac <_free_r+0x28>
 80052fc:	d902      	bls.n	8005304 <_free_r+0x80>
 80052fe:	230c      	movs	r3, #12
 8005300:	6003      	str	r3, [r0, #0]
 8005302:	e7d3      	b.n	80052ac <_free_r+0x28>
 8005304:	6825      	ldr	r5, [r4, #0]
 8005306:	1961      	adds	r1, r4, r5
 8005308:	428b      	cmp	r3, r1
 800530a:	bf04      	itt	eq
 800530c:	6819      	ldreq	r1, [r3, #0]
 800530e:	685b      	ldreq	r3, [r3, #4]
 8005310:	6063      	str	r3, [r4, #4]
 8005312:	bf04      	itt	eq
 8005314:	1949      	addeq	r1, r1, r5
 8005316:	6021      	streq	r1, [r4, #0]
 8005318:	6054      	str	r4, [r2, #4]
 800531a:	e7c7      	b.n	80052ac <_free_r+0x28>
 800531c:	b003      	add	sp, #12
 800531e:	bd30      	pop	{r4, r5, pc}
 8005320:	200000e4 	.word	0x200000e4

08005324 <_malloc_r>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	1ccd      	adds	r5, r1, #3
 8005328:	f025 0503 	bic.w	r5, r5, #3
 800532c:	3508      	adds	r5, #8
 800532e:	2d0c      	cmp	r5, #12
 8005330:	bf38      	it	cc
 8005332:	250c      	movcc	r5, #12
 8005334:	2d00      	cmp	r5, #0
 8005336:	4606      	mov	r6, r0
 8005338:	db01      	blt.n	800533e <_malloc_r+0x1a>
 800533a:	42a9      	cmp	r1, r5
 800533c:	d903      	bls.n	8005346 <_malloc_r+0x22>
 800533e:	230c      	movs	r3, #12
 8005340:	6033      	str	r3, [r6, #0]
 8005342:	2000      	movs	r0, #0
 8005344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005346:	f000 f87d 	bl	8005444 <__malloc_lock>
 800534a:	4921      	ldr	r1, [pc, #132]	; (80053d0 <_malloc_r+0xac>)
 800534c:	680a      	ldr	r2, [r1, #0]
 800534e:	4614      	mov	r4, r2
 8005350:	b99c      	cbnz	r4, 800537a <_malloc_r+0x56>
 8005352:	4f20      	ldr	r7, [pc, #128]	; (80053d4 <_malloc_r+0xb0>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	b923      	cbnz	r3, 8005362 <_malloc_r+0x3e>
 8005358:	4621      	mov	r1, r4
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f862 	bl	8005424 <_sbrk_r>
 8005360:	6038      	str	r0, [r7, #0]
 8005362:	4629      	mov	r1, r5
 8005364:	4630      	mov	r0, r6
 8005366:	f000 f85d 	bl	8005424 <_sbrk_r>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	d123      	bne.n	80053b6 <_malloc_r+0x92>
 800536e:	230c      	movs	r3, #12
 8005370:	6033      	str	r3, [r6, #0]
 8005372:	4630      	mov	r0, r6
 8005374:	f000 f86c 	bl	8005450 <__malloc_unlock>
 8005378:	e7e3      	b.n	8005342 <_malloc_r+0x1e>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	1b5b      	subs	r3, r3, r5
 800537e:	d417      	bmi.n	80053b0 <_malloc_r+0x8c>
 8005380:	2b0b      	cmp	r3, #11
 8005382:	d903      	bls.n	800538c <_malloc_r+0x68>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	441c      	add	r4, r3
 8005388:	6025      	str	r5, [r4, #0]
 800538a:	e004      	b.n	8005396 <_malloc_r+0x72>
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	42a2      	cmp	r2, r4
 8005390:	bf0c      	ite	eq
 8005392:	600b      	streq	r3, [r1, #0]
 8005394:	6053      	strne	r3, [r2, #4]
 8005396:	4630      	mov	r0, r6
 8005398:	f000 f85a 	bl	8005450 <__malloc_unlock>
 800539c:	f104 000b 	add.w	r0, r4, #11
 80053a0:	1d23      	adds	r3, r4, #4
 80053a2:	f020 0007 	bic.w	r0, r0, #7
 80053a6:	1ac2      	subs	r2, r0, r3
 80053a8:	d0cc      	beq.n	8005344 <_malloc_r+0x20>
 80053aa:	1a1b      	subs	r3, r3, r0
 80053ac:	50a3      	str	r3, [r4, r2]
 80053ae:	e7c9      	b.n	8005344 <_malloc_r+0x20>
 80053b0:	4622      	mov	r2, r4
 80053b2:	6864      	ldr	r4, [r4, #4]
 80053b4:	e7cc      	b.n	8005350 <_malloc_r+0x2c>
 80053b6:	1cc4      	adds	r4, r0, #3
 80053b8:	f024 0403 	bic.w	r4, r4, #3
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d0e3      	beq.n	8005388 <_malloc_r+0x64>
 80053c0:	1a21      	subs	r1, r4, r0
 80053c2:	4630      	mov	r0, r6
 80053c4:	f000 f82e 	bl	8005424 <_sbrk_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1dd      	bne.n	8005388 <_malloc_r+0x64>
 80053cc:	e7cf      	b.n	800536e <_malloc_r+0x4a>
 80053ce:	bf00      	nop
 80053d0:	200000e4 	.word	0x200000e4
 80053d4:	200000e8 	.word	0x200000e8

080053d8 <_realloc_r>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	4607      	mov	r7, r0
 80053dc:	4614      	mov	r4, r2
 80053de:	460e      	mov	r6, r1
 80053e0:	b921      	cbnz	r1, 80053ec <_realloc_r+0x14>
 80053e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053e6:	4611      	mov	r1, r2
 80053e8:	f7ff bf9c 	b.w	8005324 <_malloc_r>
 80053ec:	b922      	cbnz	r2, 80053f8 <_realloc_r+0x20>
 80053ee:	f7ff ff49 	bl	8005284 <_free_r>
 80053f2:	4625      	mov	r5, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f8:	f000 f830 	bl	800545c <_malloc_usable_size_r>
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d20f      	bcs.n	8005420 <_realloc_r+0x48>
 8005400:	4621      	mov	r1, r4
 8005402:	4638      	mov	r0, r7
 8005404:	f7ff ff8e 	bl	8005324 <_malloc_r>
 8005408:	4605      	mov	r5, r0
 800540a:	2800      	cmp	r0, #0
 800540c:	d0f2      	beq.n	80053f4 <_realloc_r+0x1c>
 800540e:	4631      	mov	r1, r6
 8005410:	4622      	mov	r2, r4
 8005412:	f7ff ff0f 	bl	8005234 <memcpy>
 8005416:	4631      	mov	r1, r6
 8005418:	4638      	mov	r0, r7
 800541a:	f7ff ff33 	bl	8005284 <_free_r>
 800541e:	e7e9      	b.n	80053f4 <_realloc_r+0x1c>
 8005420:	4635      	mov	r5, r6
 8005422:	e7e7      	b.n	80053f4 <_realloc_r+0x1c>

08005424 <_sbrk_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d06      	ldr	r5, [pc, #24]	; (8005440 <_sbrk_r+0x1c>)
 8005428:	2300      	movs	r3, #0
 800542a:	4604      	mov	r4, r0
 800542c:	4608      	mov	r0, r1
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	f7fc f9c6 	bl	80017c0 <_sbrk>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_sbrk_r+0x1a>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_sbrk_r+0x1a>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	200002ac 	.word	0x200002ac

08005444 <__malloc_lock>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__malloc_lock+0x8>)
 8005446:	f000 b811 	b.w	800546c <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	200002b4 	.word	0x200002b4

08005450 <__malloc_unlock>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__malloc_unlock+0x8>)
 8005452:	f000 b80c 	b.w	800546e <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	200002b4 	.word	0x200002b4

0800545c <_malloc_usable_size_r>:
 800545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005460:	1f18      	subs	r0, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	bfbc      	itt	lt
 8005466:	580b      	ldrlt	r3, [r1, r0]
 8005468:	18c0      	addlt	r0, r0, r3
 800546a:	4770      	bx	lr

0800546c <__retarget_lock_acquire_recursive>:
 800546c:	4770      	bx	lr

0800546e <__retarget_lock_release_recursive>:
 800546e:	4770      	bx	lr

08005470 <_init>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	bf00      	nop
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr

0800547c <_fini>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	bf00      	nop
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr
