
MasterGlove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080074c8  080074c8  000174c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007570  08007570  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007578  08007578  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007578  08007578  00017578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200000a0  08007620  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08007620  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f65  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ca  00000000  00000000  00034035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017001  00000000  00000000  000388f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140bd  00000000  00000000  0004f8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa33  00000000  00000000  000639b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f33e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004984  00000000  00000000  000f343c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080074ac 	.word	0x080074ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	080074ac 	.word	0x080074ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468c      	mov	ip, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8083 	bne.w	8000ce6 <__udivmoddi4+0x116>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d947      	bls.n	8000c76 <__udivmoddi4+0xa6>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b142      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	f1c2 0020 	rsb	r0, r2, #32
 8000bf0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4097      	lsls	r7, r2
 8000bf8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbbc f6f8 	udiv	r6, ip, r8
 8000c08:	fa1f fe87 	uxth.w	lr, r7
 8000c0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb06 f10e 	mul.w	r1, r6, lr
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c22:	f080 8119 	bcs.w	8000e58 <__udivmoddi4+0x288>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8116 	bls.w	8000e58 <__udivmoddi4+0x288>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8105 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8102 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c60:	eba4 040e 	sub.w	r4, r4, lr
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xaa>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d150      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c82:	1bcb      	subs	r3, r1, r7
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	2601      	movs	r6, #1
 8000c8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0xe2>
 8000cac:	428b      	cmp	r3, r1
 8000cae:	f200 80e9 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc4:	fb08 f800 	mul.w	r8, r8, r0
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x10c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x10a>
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	f200 80d9 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eba4 0408 	sub.w	r4, r4, r8
 8000ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce4:	e7bf      	b.n	8000c66 <__udivmoddi4+0x96>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <__udivmoddi4+0x282>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x1cc>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b8 	bhi.w	8000e80 <__udivmoddi4+0x2b0>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0103 	sbc.w	r1, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	468c      	mov	ip, r1
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0a8      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000d1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f603 	lsr.w	r6, r0, r3
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d36:	40d9      	lsrs	r1, r3
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f108 	mul.w	r1, r6, r8
 8000d50:	4299      	cmp	r1, r3
 8000d52:	fa04 f402 	lsl.w	r4, r4, r2
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x19c>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d5e:	f080 808d 	bcs.w	8000e7c <__udivmoddi4+0x2ac>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 808a 	bls.w	8000e7c <__udivmoddi4+0x2ac>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b281      	uxth	r1, r0
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb00 f308 	mul.w	r3, r0, r8
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d8a:	d273      	bcs.n	8000e74 <__udivmoddi4+0x2a4>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d971      	bls.n	8000e74 <__udivmoddi4+0x2a4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4439      	add	r1, r7
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9a:	e778      	b.n	8000c8e <__udivmoddi4+0xbe>
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa03 f406 	lsl.w	r4, r3, r6
 8000da4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da8:	431c      	orrs	r4, r3
 8000daa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dba:	431f      	orrs	r7, r3
 8000dbc:	0c3b      	lsrs	r3, r7, #16
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fa1f f884 	uxth.w	r8, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dce:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x220>
 8000dde:	1861      	adds	r1, r4, r1
 8000de0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000de4:	d248      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000de6:	458a      	cmp	sl, r1
 8000de8:	d946      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000dea:	f1a9 0902 	sub.w	r9, r9, #2
 8000dee:	4421      	add	r1, r4
 8000df0:	eba1 010a 	sub.w	r1, r1, sl
 8000df4:	b2bf      	uxth	r7, r7
 8000df6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e02:	fb00 f808 	mul.w	r8, r0, r8
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x24a>
 8000e0a:	19e7      	adds	r7, r4, r7
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e10:	d22e      	bcs.n	8000e70 <__udivmoddi4+0x2a0>
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d92c      	bls.n	8000e70 <__udivmoddi4+0x2a0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4427      	add	r7, r4
 8000e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1e:	eba7 0708 	sub.w	r7, r7, r8
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	454f      	cmp	r7, r9
 8000e28:	46c6      	mov	lr, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	d31a      	bcc.n	8000e64 <__udivmoddi4+0x294>
 8000e2e:	d017      	beq.n	8000e60 <__udivmoddi4+0x290>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x27a>
 8000e32:	ebb3 020e 	subs.w	r2, r3, lr
 8000e36:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	ea4c 0202 	orr.w	r2, ip, r2
 8000e44:	40f7      	lsrs	r7, r6
 8000e46:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e70b      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6fd      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e60:	4543      	cmp	r3, r8
 8000e62:	d2e5      	bcs.n	8000e30 <__udivmoddi4+0x260>
 8000e64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e68:	eb69 0104 	sbc.w	r1, r9, r4
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7df      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e7d2      	b.n	8000e1a <__udivmoddi4+0x24a>
 8000e74:	4660      	mov	r0, ip
 8000e76:	e78d      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	e7b9      	b.n	8000df0 <__udivmoddi4+0x220>
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	e775      	b.n	8000d6c <__udivmoddi4+0x19c>
 8000e80:	4630      	mov	r0, r6
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	4439      	add	r1, r7
 8000e8a:	e713      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	e724      	b.n	8000cdc <__udivmoddi4+0x10c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <getMagnitude>:
 */

#include "hand_control.h"
#include "math.h"

uint8_t getMagnitude(int16_t x, int16_t y, int16_t z){
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	807b      	strh	r3, [r7, #2]
	// g_vals come in x, y, z
	uint16_t half_mag = 16384/2;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eae:	81bb      	strh	r3, [r7, #12]

	uint16_t z_offset = 16384 - z;
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8000eb6:	81fb      	strh	r3, [r7, #14]

	if(z_offset > half_mag){
 8000eb8:	89fa      	ldrh	r2, [r7, #14]
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d901      	bls.n	8000ec4 <getMagnitude+0x2c>
		z_offset = half_mag;
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	81fb      	strh	r3, [r7, #14]
	}

	//convert to range between 0 to 10
	uint8_t newValue = ((z_offset * 10)/half_mag);
 8000ec4:	89fa      	ldrh	r2, [r7, #14]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	461a      	mov	r2, r3
 8000ed0:	89bb      	ldrh	r3, [r7, #12]
 8000ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed6:	72fb      	strb	r3, [r7, #11]

	return newValue;
 8000ed8:	7afb      	ldrb	r3, [r7, #11]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <getDirection>:

float * getDirection(int16_t x, int16_t y){
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	80bb      	strh	r3, [r7, #4]
	static float direction[2];
	float magnitude = sqrt(pow(x, 2) + pow(y, 2));
 8000ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fabd 	bl	800047c <__aeabi_i2d>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8000fa0 <getDirection+0xb8>
 8000f0a:	ec43 2b10 	vmov	d0, r2, r3
 8000f0e:	f005 fae3 	bl	80064d8 <pow>
 8000f12:	ec55 4b10 	vmov	r4, r5, d0
 8000f16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff faae 	bl	800047c <__aeabi_i2d>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8000fa0 <getDirection+0xb8>
 8000f28:	ec43 2b10 	vmov	d0, r2, r3
 8000f2c:	f005 fad4 	bl	80064d8 <pow>
 8000f30:	ec53 2b10 	vmov	r2, r3, d0
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	f7ff f954 	bl	80001e4 <__adddf3>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	ec43 2b17 	vmov	d7, r2, r3
 8000f44:	eeb0 0a47 	vmov.f32	s0, s14
 8000f48:	eef0 0a67 	vmov.f32	s1, s15
 8000f4c:	f005 fb72 	bl	8006634 <sqrt>
 8000f50:	ec53 2b10 	vmov	r2, r3, d0
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fdd2 	bl	8000b00 <__aeabi_d2f>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60fb      	str	r3, [r7, #12]

	direction[0] = x/magnitude;
 8000f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <getDirection+0xc0>)
 8000f76:	edc3 7a00 	vstr	s15, [r3]
	direction[1] = y/magnitude;
 8000f7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f86:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <getDirection+0xc0>)
 8000f90:	edc3 7a01 	vstr	s15, [r3, #4]

	return direction;
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <getDirection+0xc0>)
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40000000 	.word	0x40000000
 8000fa8:	200000bc 	.word	0x200000bc

08000fac <I2C_ClearBusyFlagErratum>:

static I2C_HandleTypeDef* hi2c;
static float G = 9.81;
static uint32_t timeout = 100;

void I2C_ClearBusyFlagErratum(I2C_Module* i2c) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  // 1. Clear PE bit.
  i2c->instance.Instance->CR1 &= ~(0x0001);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

  //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
  GPIO_InitStructure.Mode         = GPIO_MODE_OUTPUT_OD;
 8000fc4:	2311      	movs	r3, #17
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate    = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Pull         = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed        = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]

  GPIO_InitStructure.Pin          = i2c->sclPin;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000fda:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fd56 	bl	8002a98 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f001 fee9 	bl	8002dd0 <HAL_GPIO_WritePin>

  GPIO_InitStructure.Pin          = i2c->sdaPin;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001004:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	f107 020c 	add.w	r2, r7, #12
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fd41 	bl	8002a98 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	f001 fed4 	bl	8002dd0 <HAL_GPIO_WritePin>

  // 3. Check SCL and SDA High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 8001028:	e000      	b.n	800102c <I2C_ClearBusyFlagErratum+0x80>
  {
    asm("nop");
 800102a:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f001 feb1 	bl	8002da0 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d1f2      	bne.n	800102a <I2C_ClearBusyFlagErratum+0x7e>
  }

  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001044:	e000      	b.n	8001048 <I2C_ClearBusyFlagErratum+0x9c>
  {
    asm("nop");
 8001046:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001052:	4619      	mov	r1, r3
 8001054:	4610      	mov	r0, r2
 8001056:	f001 fea3 	bl	8002da0 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d1f2      	bne.n	8001046 <I2C_ClearBusyFlagErratum+0x9a>
  }

  // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_RESET);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	f001 feaf 	bl	8002dd0 <HAL_GPIO_WritePin>

  //  5. Check SDA Low level in GPIOx_IDR.
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001072:	e000      	b.n	8001076 <I2C_ClearBusyFlagErratum+0xca>
  {
    asm("nop");
 8001074:	bf00      	nop
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f001 fe8c 	bl	8002da0 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f2      	bne.n	8001074 <I2C_ClearBusyFlagErratum+0xc8>
  }

  // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_RESET);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	f001 fe98 	bl	8002dd0 <HAL_GPIO_WritePin>

  //  7. Check SCL Low level in GPIOx_IDR.
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010a0:	e000      	b.n	80010a4 <I2C_ClearBusyFlagErratum+0xf8>
  {
    asm("nop");
 80010a2:	bf00      	nop
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4610      	mov	r0, r2
 80010b2:	f001 fe75 	bl	8002da0 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f2      	bne.n	80010a2 <I2C_ClearBusyFlagErratum+0xf6>
  }

  // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	f001 fe81 	bl	8002dd0 <HAL_GPIO_WritePin>

  // 9. Check SCL High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010ce:	e000      	b.n	80010d2 <I2C_ClearBusyFlagErratum+0x126>
  {
    asm("nop");
 80010d0:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f001 fe5e 	bl	8002da0 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d1f2      	bne.n	80010d0 <I2C_ClearBusyFlagErratum+0x124>
  }

  // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80010f4:	2201      	movs	r2, #1
 80010f6:	4619      	mov	r1, r3
 80010f8:	f001 fe6a 	bl	8002dd0 <HAL_GPIO_WritePin>

  // 11. Check SDA High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 80010fc:	e000      	b.n	8001100 <I2C_ClearBusyFlagErratum+0x154>
  {
    asm("nop");
 80010fe:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f001 fe47 	bl	8002da0 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d1f2      	bne.n	80010fe <I2C_ClearBusyFlagErratum+0x152>
  }

  // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
  GPIO_InitStructure.Mode         = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate    = GPIO_AF4_I2C1;
 800111c:	2304      	movs	r3, #4
 800111e:	61fb      	str	r3, [r7, #28]

  GPIO_InitStructure.Pin          = i2c->sclPin;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001126:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112c:	f107 020c 	add.w	r2, r7, #12
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fcb0 	bl	8002a98 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin          = i2c->sdaPin;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800113e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fca4 	bl	8002a98 <HAL_GPIO_Init>

  // 13. Set SWRST bit in I2Cx_CR1 register.
  i2c->instance.Instance->CR1 |= 0x8000;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800115e:	601a      	str	r2, [r3, #0]

  asm("nop");
 8001160:	bf00      	nop

  // 14. Clear SWRST bit in I2Cx_CR1 register.
  i2c->instance.Instance->CR1 &= ~0x8000;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001170:	601a      	str	r2, [r3, #0]

  asm("nop");
 8001172:	bf00      	nop

  // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
  i2c->instance.Instance->CR1 |= 0x0001;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

  // Call initialization function.
  HAL_I2C_Init(&(i2c->instance));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fe54 	bl	8002e34 <HAL_I2C_Init>
}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <imu_init>:

uint8_t imu_init(I2C_HandleTypeDef* i2c_handle) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handle;
 800119c:	4a3a      	ldr	r2, [pc, #232]	; (8001288 <imu_init+0xf4>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]

	uint8_t buf[6];
	HAL_StatusTypeDef ret;

	buf[0] = WHO_AM_I;
 80011a2:	2375      	movs	r3, #117	; 0x75
 80011a4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <imu_init+0xf4>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <imu_init+0xf8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f107 0208 	add.w	r2, r7, #8
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	21d0      	movs	r1, #208	; 0xd0
 80011b8:	f001 ff80 	bl	80030bc <HAL_I2C_Master_Transmit>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) { return 1; }
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <imu_init+0x36>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e059      	b.n	800127e <imu_init+0xea>
	ret = HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <imu_init+0xf4>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <imu_init+0xf8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f107 0208 	add.w	r2, r7, #8
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	21d0      	movs	r1, #208	; 0xd0
 80011dc:	f002 f86c 	bl	80032b8 <HAL_I2C_Master_Receive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) { return 1; }
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <imu_init+0x5a>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e047      	b.n	800127e <imu_init+0xea>

	if (buf[0] == 0x68) {
 80011ee:	7a3b      	ldrb	r3, [r7, #8]
 80011f0:	2b68      	cmp	r3, #104	; 0x68
 80011f2:	d141      	bne.n	8001278 <imu_init+0xe4>

		//wake device by writing 0 to PWR_MGMT_1
		buf[0] = PWR_MGMT_1;
 80011f4:	236b      	movs	r3, #107	; 0x6b
 80011f6:	723b      	strb	r3, [r7, #8]
		buf[1] = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <imu_init+0xf4>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <imu_init+0xf8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	21d0      	movs	r1, #208	; 0xd0
 800120e:	f001 ff55 	bl	80030bc <HAL_I2C_Master_Transmit>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <imu_init+0x8c>
 800121c:	2301      	movs	r3, #1
 800121e:	e02e      	b.n	800127e <imu_init+0xea>

		//divide sample rate by 8 to achieve 1khz data rate
		buf[0] = SMPRT_DIV;
 8001220:	2319      	movs	r3, #25
 8001222:	723b      	strb	r3, [r7, #8]
		buf[1] = 7;
 8001224:	2307      	movs	r3, #7
 8001226:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <imu_init+0xf4>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <imu_init+0xf8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f107 0208 	add.w	r2, r7, #8
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2302      	movs	r3, #2
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	f001 ff3f 	bl	80030bc <HAL_I2C_Master_Transmit>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <imu_init+0xb8>
 8001248:	2301      	movs	r3, #1
 800124a:	e018      	b.n	800127e <imu_init+0xea>

		//config accelerometer
		buf[0] = ACCEL_CONFIG;
 800124c:	231c      	movs	r3, #28
 800124e:	723b      	strb	r3, [r7, #8]
		buf[1] = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <imu_init+0xf4>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <imu_init+0xf8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	21d0      	movs	r1, #208	; 0xd0
 8001266:	f001 ff29 	bl	80030bc <HAL_I2C_Master_Transmit>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <imu_init+0xe8>
 8001274:	2301      	movs	r3, #1
 8001276:	e002      	b.n	800127e <imu_init+0xea>
	} else {
		return 1;
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <imu_init+0xea>
	}

	return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000c4 	.word	0x200000c4
 800128c:	20000004 	.word	0x20000004

08001290 <imu_calibrate>:


void imu_calibrate(int16_t x_offset, int16_t y_offset, int16_t z_offset) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af02      	add	r7, sp, #8
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	460b      	mov	r3, r1
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	807b      	strh	r3, [r7, #2]
	uint8_t buf[7];
	buf[0] = ACCEL_XG_OFFS_USRH;
 80012a2:	2306      	movs	r3, #6
 80012a4:	723b      	strb	r3, [r7, #8]
	buf[1] = (x_offset >> 8) & 0xFF;
 80012a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012aa:	121b      	asrs	r3, r3, #8
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	727b      	strb	r3, [r7, #9]
	buf[2] = x_offset & 0xFF;
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	72bb      	strb	r3, [r7, #10]
	buf[3] = (y_offset >> 8) & 0xFF;
 80012b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012bc:	121b      	asrs	r3, r3, #8
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	72fb      	strb	r3, [r7, #11]
	buf[4] = y_offset & 0xFF;
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	733b      	strb	r3, [r7, #12]
	buf[5] = (z_offset >> 8) & 0xFF;
 80012ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012ce:	121b      	asrs	r3, r3, #8
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	737b      	strb	r3, [r7, #13]
	buf[6] = z_offset & 0xFF;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 7, timeout);
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <imu_calibrate+0x6c>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <imu_calibrate+0x70>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 0208 	add.w	r2, r7, #8
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2307      	movs	r3, #7
 80012ec:	21d0      	movs	r1, #208	; 0xd0
 80012ee:	f001 fee5 	bl	80030bc <HAL_I2C_Master_Transmit>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000c4 	.word	0x200000c4
 8001300:	20000004 	.word	0x20000004

08001304 <imu_read_accel>:

void imu_read_accel(IMU_DATA* imu_data) {
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]

	uint8_t buf[6];

	//write subregister
	buf[0] = ACCEL_XOUT_H;
 800130c:	233b      	movs	r3, #59	; 0x3b
 800130e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <imu_read_accel+0x148>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <imu_read_accel+0x14c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f107 0208 	add.w	r2, r7, #8
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	21d0      	movs	r1, #208	; 0xd0
 8001322:	f001 fecb 	bl	80030bc <HAL_I2C_Master_Transmit>

	//recieve accel data
	HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDRESS, buf, 6, timeout);
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <imu_read_accel+0x148>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <imu_read_accel+0x14c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f107 0208 	add.w	r2, r7, #8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2306      	movs	r3, #6
 8001336:	21d0      	movs	r1, #208	; 0xd0
 8001338:	f001 ffbe 	bl	80032b8 <HAL_I2C_Master_Receive>

	//get raw data
	imu_data->ax_raw = (int16_t)((buf[0] << 8) | buf[1]);
 800133c:	7a3b      	ldrb	r3, [r7, #8]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	7a7b      	ldrb	r3, [r7, #9]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	801a      	strh	r2, [r3, #0]
	imu_data->ay_raw = (int16_t)((buf[2] << 8) | buf[3]);
 800134e:	7abb      	ldrb	r3, [r7, #10]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]
	imu_data->az_raw = (int16_t)((buf[4] << 8) | buf[5]);
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	7b7b      	ldrb	r3, [r7, #13]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21a      	sxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	809a      	strh	r2, [r3, #4]

	//scale raw data
	//divide by 16384 to get in Gs
	//mult by G=9.81 to get m/s^2
	imu_data->ax = imu_data->ax_raw / 16384.0 * G;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f87f 	bl	800047c <__aeabi_i2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <imu_read_accel+0x150>)
 8001384:	f7ff fa0e 	bl	80007a4 <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4614      	mov	r4, r2
 800138e:	461d      	mov	r5, r3
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <imu_read_accel+0x154>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f883 	bl	80004a0 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7ff f8d5 	bl	8000550 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fba7 	bl	8000b00 <__aeabi_d2f>
 80013b2:	4602      	mov	r2, r0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
	imu_data->ay = imu_data->ay_raw / 16384.0 * G;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f85c 	bl	800047c <__aeabi_i2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <imu_read_accel+0x150>)
 80013ca:	f7ff f9eb 	bl	80007a4 <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4614      	mov	r4, r2
 80013d4:	461d      	mov	r5, r3
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <imu_read_accel+0x154>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f860 	bl	80004a0 <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7ff f8b2 	bl	8000550 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb84 	bl	8000b00 <__aeabi_d2f>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60da      	str	r2, [r3, #12]
	imu_data->az = imu_data->az_raw / 16384.0 * G;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f839 	bl	800047c <__aeabi_i2d>
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <imu_read_accel+0x150>)
 8001410:	f7ff f9c8 	bl	80007a4 <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4614      	mov	r4, r2
 800141a:	461d      	mov	r5, r3
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <imu_read_accel+0x154>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f83d 	bl	80004a0 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4620      	mov	r0, r4
 800142c:	4629      	mov	r1, r5
 800142e:	f7ff f88f 	bl	8000550 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fb61 	bl	8000b00 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]

}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	200000c4 	.word	0x200000c4
 8001450:	20000004 	.word	0x20000004
 8001454:	40d00000 	.word	0x40d00000
 8001458:	20000000 	.word	0x20000000

0800145c <lcd_init>:

#define LCD_I2C_ADDRESS 0x4E

static I2C_HandleTypeDef* hi2c;

void lcd_init(I2C_HandleTypeDef* i2c_handle) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handle;
 8001464:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <lcd_init+0x4c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]

	//Initialize LCD with nibble method
	lcd_transmit_byte(0x02);
 800146a:	2002      	movs	r0, #2
 800146c:	f000 f81e 	bl	80014ac <lcd_transmit_byte>
	HAL_Delay(20);
 8001470:	2014      	movs	r0, #20
 8001472:	f001 f949 	bl	8002708 <HAL_Delay>

	//Function set
	//DL=0, 4 bit mode
	//N=1, 2 line display
	//F=0 5x8 dots
	lcd_transmit_byte(0x28);
 8001476:	2028      	movs	r0, #40	; 0x28
 8001478:	f000 f818 	bl	80014ac <lcd_transmit_byte>
	HAL_Delay(5);
 800147c:	2005      	movs	r0, #5
 800147e:	f001 f943 	bl	8002708 <HAL_Delay>

	//clear display
	lcd_transmit_byte(0x01);
 8001482:	2001      	movs	r0, #1
 8001484:	f000 f812 	bl	80014ac <lcd_transmit_byte>
	HAL_Delay(5);
 8001488:	2005      	movs	r0, #5
 800148a:	f001 f93d 	bl	8002708 <HAL_Delay>

	//Entry mode set
	//I/D=1, increment cursor
	//S=0, no shifting
	lcd_transmit_byte(0x06);
 800148e:	2006      	movs	r0, #6
 8001490:	f000 f80c 	bl	80014ac <lcd_transmit_byte>
	HAL_Delay(5);
 8001494:	2005      	movs	r0, #5
 8001496:	f001 f937 	bl	8002708 <HAL_Delay>

	//Display control
	//D=1, display on
	//C=0, cursor off
	//B=0, cursor blink off
	lcd_transmit_byte(0x0C);
 800149a:	200c      	movs	r0, #12
 800149c:	f000 f806 	bl	80014ac <lcd_transmit_byte>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000c8 	.word	0x200000c8

080014ac <lcd_transmit_byte>:

void lcd_transmit_byte(uint8_t data) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4];
	uint8_t data_upper = data & 0xF0;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f023 030f 	bic.w	r3, r3, #15
 80014bc:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lower = (data << 4) & 0xF0;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	73bb      	strb	r3, [r7, #14]

	//upper bits - EN=1, RS=0 => 0x0C
	//lower bits - EN=0, RS=0 => 0x08

	buf[0] = data_upper | 0x0C;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f043 030c 	orr.w	r3, r3, #12
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	723b      	strb	r3, [r7, #8]
	buf[1] = data_upper | 0x08;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	727b      	strb	r3, [r7, #9]
	buf[2] = data_lower | 0x0C;
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	f043 030c 	orr.w	r3, r3, #12
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	72bb      	strb	r3, [r7, #10]
	buf[3] = data_lower | 0x08;
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(hi2c, LCD_I2C_ADDRESS, (uint8_t *) buf, 4, 100);
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <lcd_transmit_byte+0x5c>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	f107 0208 	add.w	r2, r7, #8
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2304      	movs	r3, #4
 80014fa:	214e      	movs	r1, #78	; 0x4e
 80014fc:	f001 fdde 	bl	80030bc <HAL_I2C_Master_Transmit>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200000c8 	.word	0x200000c8

0800150c <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram_addr = 0x80;
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	73bb      	strb	r3, [r7, #14]

	//row 0 offset = 0
	//row 1 offset = 0x40
	uint8_t pos = col;
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	73fb      	strb	r3, [r7, #15]
	if (row > 0) {
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <lcd_set_cursor+0x24>
		pos += 0x40;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	3340      	adds	r3, #64	; 0x40
 800152e:	73fb      	strb	r3, [r7, #15]
	}

	lcd_transmit_byte(ddram_addr | pos);
 8001530:	7bba      	ldrb	r2, [r7, #14]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	4313      	orrs	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ffb7 	bl	80014ac <lcd_transmit_byte>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <lcd_clear>:

void lcd_clear() {
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
	lcd_transmit_byte(0x01);
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff ffae 	bl	80014ac <lcd_transmit_byte>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <lcd_transmit_char>:

void lcd_transmit_char(char c) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4];
	uint8_t data_upper = c & 0xF0;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f023 030f 	bic.w	r3, r3, #15
 8001564:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lower = (c << 4) & 0xF0;
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	73bb      	strb	r3, [r7, #14]

	//upper bits - EN=1, RS=1 => 0x0D
	//lower bits - EN=0, RS=1 => 0x09

	buf[0] = data_upper | 0x0D;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	f043 030d 	orr.w	r3, r3, #13
 8001572:	b2db      	uxtb	r3, r3
 8001574:	723b      	strb	r3, [r7, #8]
	buf[1] = data_upper | 0x09;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	f043 0309 	orr.w	r3, r3, #9
 800157c:	b2db      	uxtb	r3, r3
 800157e:	727b      	strb	r3, [r7, #9]
	buf[2] = data_lower | 0x0D;
 8001580:	7bbb      	ldrb	r3, [r7, #14]
 8001582:	f043 030d 	orr.w	r3, r3, #13
 8001586:	b2db      	uxtb	r3, r3
 8001588:	72bb      	strb	r3, [r7, #10]
	buf[3] = data_lower | 0x09;
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	f043 0309 	orr.w	r3, r3, #9
 8001590:	b2db      	uxtb	r3, r3
 8001592:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(hi2c, LCD_I2C_ADDRESS, (uint8_t *) buf, 4, 100);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <lcd_transmit_char+0x5c>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2304      	movs	r3, #4
 80015a2:	214e      	movs	r1, #78	; 0x4e
 80015a4:	f001 fd8a 	bl	80030bc <HAL_I2C_Master_Transmit>
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200000c8 	.word	0x200000c8

080015b4 <lcd_transmit_string>:

void lcd_transmit_string(char* str) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	while (*str) {
 80015bc:	e006      	b.n	80015cc <lcd_transmit_string+0x18>
		lcd_transmit_char(*str++);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ffc4 	bl	8001554 <lcd_transmit_char>
	while (*str) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f4      	bne.n	80015be <lcd_transmit_string+0xa>
	}
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <displayLives>:

int8_t button_val = 0;
uint8_t Rx_data[1];

// Displays current lives remaining on LCD
void displayLives() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
	lcd_clear();
 80015e6:	f7ff ffae 	bl	8001546 <lcd_clear>

	char lives[] = "...Lives";
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <displayLives+0x54>)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f2:	c303      	stmia	r3!, {r0, r1}
 80015f4:	701a      	strb	r2, [r3, #0]
	lcd_transmit_string(lives);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ffda 	bl	80015b4 <lcd_transmit_string>

	lcd_set_cursor(0, 1);
 8001600:	2101      	movs	r1, #1
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ff82 	bl	800150c <lcd_set_cursor>
	char remaining[] = "Remaining: ";
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <displayLives+0x58>)
 800160a:	463b      	mov	r3, r7
 800160c:	ca07      	ldmia	r2, {r0, r1, r2}
 800160e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	lcd_transmit_string(remaining);
 8001612:	463b      	mov	r3, r7
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ffcd 	bl	80015b4 <lcd_transmit_string>

	lcd_set_cursor(11, 1);
 800161a:	2101      	movs	r1, #1
 800161c:	200b      	movs	r0, #11
 800161e:	f7ff ff75 	bl	800150c <lcd_set_cursor>
	lcd_transmit_char(livesRemaining);
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <displayLives+0x5c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff94 	bl	8001554 <lcd_transmit_char>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	080074c8 	.word	0x080074c8
 8001638:	080074d4 	.word	0x080074d4
 800163c:	20000008 	.word	0x20000008

08001640 <displayHit>:

// Displays "HIT" on LCD
void displayHit() {
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
	lcd_clear();
 8001646:	f7ff ff7e 	bl	8001546 <lcd_clear>

	char firstLine[] = "...  You've been";
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <displayHit+0x4c>)
 800164c:	f107 040c 	add.w	r4, r7, #12
 8001650:	461d      	mov	r5, r3
 8001652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	7023      	strb	r3, [r4, #0]
	lcd_transmit_string(firstLine);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ffa8 	bl	80015b4 <lcd_transmit_string>

	lcd_set_cursor(6, 1);
 8001664:	2101      	movs	r1, #1
 8001666:	2006      	movs	r0, #6
 8001668:	f7ff ff50 	bl	800150c <lcd_set_cursor>
	char remaining[] = "hit!";
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <displayHit+0x50>)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001674:	6018      	str	r0, [r3, #0]
 8001676:	3304      	adds	r3, #4
 8001678:	7019      	strb	r1, [r3, #0]
	lcd_transmit_string(remaining);
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff99 	bl	80015b4 <lcd_transmit_string>
}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bdb0      	pop	{r4, r5, r7, pc}
 800168a:	bf00      	nop
 800168c:	080074e0 	.word	0x080074e0
 8001690:	080074f4 	.word	0x080074f4

08001694 <displayGameOver>:

// Displays "GAME OVER" on LCD
void displayGameOver() {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
	lcd_clear();
 800169a:	f7ff ff54 	bl	8001546 <lcd_clear>

	char firstLine[] = "...      GAME";
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <displayGameOver+0x48>)
 80016a0:	f107 0408 	add.w	r4, r7, #8
 80016a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a6:	c407      	stmia	r4!, {r0, r1, r2}
 80016a8:	8023      	strh	r3, [r4, #0]
	lcd_transmit_string(firstLine);
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff80 	bl	80015b4 <lcd_transmit_string>

	lcd_set_cursor(6, 1);
 80016b4:	2101      	movs	r1, #1
 80016b6:	2006      	movs	r0, #6
 80016b8:	f7ff ff28 	bl	800150c <lcd_set_cursor>
	char remaining[] = "OVER!";
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <displayGameOver+0x4c>)
 80016be:	463b      	mov	r3, r7
 80016c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c4:	6018      	str	r0, [r3, #0]
 80016c6:	3304      	adds	r3, #4
 80016c8:	8019      	strh	r1, [r3, #0]
	lcd_transmit_string(remaining);
 80016ca:	463b      	mov	r3, r7
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff71 	bl	80015b4 <lcd_transmit_string>
}
 80016d2:	bf00      	nop
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	080074fc 	.word	0x080074fc
 80016e0:	0800750c 	.word	0x0800750c

080016e4 <HAL_GPIO_EXTI_Callback>:

// Joystick Button Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_3) {
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d104      	bne.n	80016fe <HAL_GPIO_EXTI_Callback+0x1a>
		button_val = 1;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_GPIO_EXTI_Callback+0x30>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
		playFireSound();
 80016fa:	f000 fd2f 	bl	800215c <playFireSound>
	}
	// Blue Button For Testing
	if (pin == GPIO_PIN_13) {
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001704:	d101      	bne.n	800170a <HAL_GPIO_EXTI_Callback+0x26>
		playFireSound();
 8001706:	f000 fd29 	bl	800215c <playFireSound>
	}
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000cc 	.word	0x200000cc

08001718 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	4910      	ldr	r1, [pc, #64]	; (8001764 <HAL_UART_RxCpltCallback+0x4c>)
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <HAL_UART_RxCpltCallback+0x50>)
 8001726:	f003 ff2a 	bl	800557e <HAL_UART_Receive_IT>

	// HIT ON ROBOT
	if(Rx_data[0]){
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_UART_RxCpltCallback+0x4c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d014      	beq.n	800175c <HAL_UART_RxCpltCallback+0x44>
		// What happens when robot gets hit?

		// 1) Change LCD screen to say "HIT"
		displayHit();
 8001732:	f7ff ff85 	bl	8001640 <displayHit>
		--livesRemaining;
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_UART_RxCpltCallback+0x54>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	3b01      	subs	r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_UART_RxCpltCallback+0x54>)
 8001740:	701a      	strb	r2, [r3, #0]

		// 2) Play hit sound
		playHitSound();
 8001742:	f000 fce1 	bl	8002108 <playHitSound>

		// Check to see if game over
		if (livesRemaining == '0') {
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_UART_RxCpltCallback+0x54>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b30      	cmp	r3, #48	; 0x30
 800174c:	d104      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x40>
			// Death sequence
			displayGameOver();
 800174e:	f7ff ffa1 	bl	8001694 <displayGameOver>
			playDeathSound();
 8001752:	f000 fca9 	bl	80020a8 <playDeathSound>
		else {
			// Display lives remaining
			displayLives();
		}
	}
}
 8001756:	e001      	b.n	800175c <HAL_UART_RxCpltCallback+0x44>
			displayLives();
 8001758:	f7ff ff42 	bl	80015e0 <displayLives>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200001c4 	.word	0x200001c4
 8001768:	200001c8 	.word	0x200001c8
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_TIM_PeriodElapsedCallback>:

// TIM11 CALLBACK -- for sending data
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	// What to do when we want to send a message
	if(htim == &htim11){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a37      	ldr	r2, [pc, #220]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d166      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0xde>
		imu_read_accel(&imu);
 8001780:	4836      	ldr	r0, [pc, #216]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001782:	f7ff fdbf 	bl	8001304 <imu_read_accel>

		int16_t x = imu.ax_raw;
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	83fb      	strh	r3, [r7, #30]
		int16_t y = imu.ay_raw;
 800178c:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800178e:	885b      	ldrh	r3, [r3, #2]
 8001790:	83bb      	strh	r3, [r7, #28]
		int16_t z = imu.az_raw;
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	837b      	strh	r3, [r7, #26]

		uint8_t magnitude = getMagnitude(x, y, z);
 8001798:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800179c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80017a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb77 	bl	8000e98 <getMagnitude>
 80017aa:	4603      	mov	r3, r0
 80017ac:	767b      	strb	r3, [r7, #25]
		float *direction = getDirection(x, y);
 80017ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80017b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb95 	bl	8000ee8 <getDirection>
 80017be:	6178      	str	r0, [r7, #20]

		int8_t *motor_cmds = getMotorVels(magnitude, direction);
 80017c0:	7e7b      	ldrb	r3, [r7, #25]
 80017c2:	6979      	ldr	r1, [r7, #20]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fafb 	bl	8001dc0 <getMotorVels>
 80017ca:	4603      	mov	r3, r0
 80017cc:	613b      	str	r3, [r7, #16]

		int8_t buf[5];
		buf[0] = button_val;
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80017d0:	f993 3000 	ldrsb.w	r3, [r3]
 80017d4:	723b      	strb	r3, [r7, #8]
		buf[1] = motor_cmds[0] + 10;
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f993 3000 	ldrsb.w	r3, [r3]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	330a      	adds	r3, #10
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	727b      	strb	r3, [r7, #9]
		buf[2] = motor_cmds[1] + 10;
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	3301      	adds	r3, #1
 80017ea:	f993 3000 	ldrsb.w	r3, [r3]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	330a      	adds	r3, #10
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	72bb      	strb	r3, [r7, #10]
		buf[3] = motor_cmds[2] + 10;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	3302      	adds	r3, #2
 80017fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	330a      	adds	r3, #10
 8001804:	b2db      	uxtb	r3, r3
 8001806:	b25b      	sxtb	r3, r3
 8001808:	72fb      	strb	r3, [r7, #11]
		buf[4] = motor_cmds[3] + 10;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3303      	adds	r3, #3
 800180e:	f993 3000 	ldrsb.w	r3, [r3]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	330a      	adds	r3, #10
 8001816:	b2db      	uxtb	r3, r3
 8001818:	b25b      	sxtb	r3, r3
 800181a:	733b      	strb	r3, [r7, #12]

		button_val = 0;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
		HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart2, (uint8_t*)buf, 5, HAL_MAX_DELAY);
 8001822:	f107 0108 	add.w	r1, r7, #8
 8001826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800182a:	2205      	movs	r2, #5
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800182e:	f003 fe14 	bl	800545a <HAL_UART_Transmit>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
		ret = HAL_UART_Transmit(&huart1, (uint8_t *)buf, 5, HAL_MAX_DELAY);
 8001836:	f107 0108 	add.w	r1, r7, #8
 800183a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183e:	2205      	movs	r2, #5
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001842:	f003 fe0a 	bl	800545a <HAL_UART_Transmit>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
		uint8_t x2 = 10;
 800184a:	230a      	movs	r3, #10
 800184c:	73bb      	strb	r3, [r7, #14]

	}
}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000020c 	.word	0x2000020c
 800185c:	2000015c 	.word	0x2000015c
 8001860:	200000cc 	.word	0x200000cc
 8001864:	2000029c 	.word	0x2000029c
 8001868:	200001c8 	.word	0x200001c8

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b09a      	sub	sp, #104	; 0x68
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f000 fed7 	bl	8002624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f855 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 f9eb 	bl	8001c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800187e:	f000 f9bf 	bl	8001c00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001882:	f000 f8bb 	bl	80019fc <MX_I2C1_Init>
  MX_TIM11_Init();
 8001886:	f000 f96d 	bl	8001b64 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 800188a:	f000 f98f 	bl	8001bac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800188e:	f000 f911 	bl	8001ab4 <MX_TIM2_Init>
  MX_I2C3_Init();
 8001892:	f000 f8e1 	bl	8001a58 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_NVIC_SetPriority(USART1_IRQN, 0, 0);
//  HAL_NVIC_EnableIRQ(USART1_IRQN);

  // Start UART Receiving interrupt
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8001896:	2201      	movs	r2, #1
 8001898:	491b      	ldr	r1, [pc, #108]	; (8001908 <main+0x9c>)
 800189a:	481c      	ldr	r0, [pc, #112]	; (800190c <main+0xa0>)
 800189c:	f003 fe6f 	bl	800557e <HAL_UART_Receive_IT>

  I2C_Module i2c_mod;
  i2c_mod.instance = hi2c1;
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <main+0xa4>)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4611      	mov	r1, r2
 80018a6:	2254      	movs	r2, #84	; 0x54
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fd7b 	bl	80063a4 <memcpy>
  i2c_mod.sdaPin = GPIO_PIN_9;
 80018ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  i2c_mod.sdaPort = GPIOB;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <main+0xa8>)
 80018b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  i2c_mod.sclPin = GPIO_PIN_8;
 80018ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018be:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  i2c_mod.sclPort = GPIOB;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <main+0xa8>)
 80018c4:	667b      	str	r3, [r7, #100]	; 0x64
  while (imu_init(&hi2c1) == 1) {
 80018c6:	e003      	b.n	80018d0 <main+0x64>
    I2C_ClearBusyFlagErratum(&i2c_mod);
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fb6e 	bl	8000fac <I2C_ClearBusyFlagErratum>
  while (imu_init(&hi2c1) == 1) {
 80018d0:	480f      	ldr	r0, [pc, #60]	; (8001910 <main+0xa4>)
 80018d2:	f7ff fc5f 	bl	8001194 <imu_init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d0f5      	beq.n	80018c8 <main+0x5c>
  }
  //pass pre-calculated offsets to imu

  //imu_calibrate(503, 582, 2049); // TAPE IMU OFFSETS
  imu_calibrate(182, 2834, 851); // NON-TAPE OFFSETS
 80018dc:	f240 3253 	movw	r2, #851	; 0x353
 80018e0:	f640 3112 	movw	r1, #2834	; 0xb12
 80018e4:	20b6      	movs	r0, #182	; 0xb6
 80018e6:	f7ff fcd3 	bl	8001290 <imu_calibrate>

  //initialize lcd
  lcd_init(&hi2c3);
 80018ea:	480b      	ldr	r0, [pc, #44]	; (8001918 <main+0xac>)
 80018ec:	f7ff fdb6 	bl	800145c <lcd_init>
  displayLives();
 80018f0:	f7ff fe76 	bl	80015e0 <displayLives>

  // initialize piezo buzzer
  piezo_init(&htim2);
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <main+0xb0>)
 80018f6:	f000 fb43 	bl	8001f80 <piezo_init>

  // Start xbee sending timer
  HAL_TIM_Base_Start_IT(&htim11);
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <main+0xb4>)
 80018fc:	f002 fef4 	bl	80046e8 <HAL_TIM_Base_Start_IT>
  omni_init();
 8001900:	f000 fa24 	bl	8001d4c <omni_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001904:	e7fe      	b.n	8001904 <main+0x98>
 8001906:	bf00      	nop
 8001908:	200001c4 	.word	0x200001c4
 800190c:	200001c8 	.word	0x200001c8
 8001910:	20000170 	.word	0x20000170
 8001914:	40020400 	.word	0x40020400
 8001918:	20000108 	.word	0x20000108
 800191c:	20000254 	.word	0x20000254
 8001920:	2000020c 	.word	0x2000020c

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f004 fd44 	bl	80063c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <SystemClock_Config+0xd0>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <SystemClock_Config+0xd0>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <SystemClock_Config+0xd0>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <SystemClock_Config+0xd4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001970:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <SystemClock_Config+0xd4>)
 8001972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <SystemClock_Config+0xd4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198c:	2310      	movs	r3, #16
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001990:	2302      	movs	r3, #2
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001998:	2310      	movs	r3, #16
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800199c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019a2:	2304      	movs	r3, #4
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019a6:	2307      	movs	r3, #7
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 f9d6 	bl	8003d60 <HAL_RCC_OscConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019ba:	f000 f9c1 	bl	8001d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019be:	230f      	movs	r3, #15
 80019c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c2:	2302      	movs	r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	2102      	movs	r1, #2
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fc38 	bl	8004250 <HAL_RCC_ClockConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80019e6:	f000 f9ab 	bl	8001d40 <Error_Handler>
  }
}
 80019ea:	bf00      	nop
 80019ec:	3750      	adds	r7, #80	; 0x50
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000

080019fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <MX_I2C1_Init+0x54>)
 8001a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <MX_I2C1_Init+0x58>)
 8001a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_I2C1_Init+0x50>)
 8001a3a:	f001 f9fb 	bl	8002e34 <HAL_I2C_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a44:	f000 f97c 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000170 	.word	0x20000170
 8001a50:	40005400 	.word	0x40005400
 8001a54:	000186a0 	.word	0x000186a0

08001a58 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <MX_I2C3_Init+0x54>)
 8001a60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <MX_I2C3_Init+0x58>)
 8001a66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MX_I2C3_Init+0x50>)
 8001a96:	f001 f9cd 	bl	8002e34 <HAL_I2C_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001aa0:	f000 f94e 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000108 	.word	0x20000108
 8001aac:	40005c00 	.word	0x40005c00
 8001ab0:	000186a0 	.word	0x000186a0

08001ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001adc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001ae0:	2253      	movs	r2, #83	; 0x53
 8001ae2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001aec:	22f9      	movs	r2, #249	; 0xf9
 8001aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001afc:	4818      	ldr	r0, [pc, #96]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001afe:	f002 fe55 	bl	80047ac <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b08:	f000 f91a 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4811      	ldr	r0, [pc, #68]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001b1c:	f003 fbce 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b26:	f000 f90b 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	; 0x60
 8001b2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001b42:	f003 f89f 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b4c:	f000 f8f8 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <MX_TIM2_Init+0xac>)
 8001b52:	f000 fc29 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000254 	.word	0x20000254

08001b64 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_TIM11_Init+0x40>)
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <MX_TIM11_Init+0x44>)
 8001b6c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 419;
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <MX_TIM11_Init+0x40>)
 8001b70:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001b74:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_TIM11_Init+0x40>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_TIM11_Init+0x40>)
 8001b7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b82:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <MX_TIM11_Init+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_TIM11_Init+0x40>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_TIM11_Init+0x40>)
 8001b92:	f002 fd59 	bl	8004648 <HAL_TIM_Base_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001b9c:	f000 f8d0 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000020c 	.word	0x2000020c
 8001ba8:	40014800 	.word	0x40014800

08001bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <MX_USART1_UART_Init+0x50>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_USART1_UART_Init+0x4c>)
 8001be4:	f003 fbec 	bl	80053c0 <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bee:	f000 f8a7 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200001c8 	.word	0x200001c8
 8001bfc:	40011000 	.word	0x40011000

08001c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c38:	f003 fbc2 	bl	80053c0 <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c42:	f000 f87d 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000029c 	.word	0x2000029c
 8001c50:	40004400 	.word	0x40004400

08001c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a30      	ldr	r2, [pc, #192]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2120      	movs	r1, #32
 8001cde:	4816      	ldr	r0, [pc, #88]	; (8001d38 <MX_GPIO_Init+0xe4>)
 8001ce0:	f001 f876 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4810      	ldr	r0, [pc, #64]	; (8001d3c <MX_GPIO_Init+0xe8>)
 8001cfc:	f000 fecc 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d00:	2320      	movs	r3, #32
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4808      	ldr	r0, [pc, #32]	; (8001d38 <MX_GPIO_Init+0xe4>)
 8001d18:	f000 febe 	bl	8002a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2028      	movs	r0, #40	; 0x28
 8001d22:	f000 fdf0 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d26:	2028      	movs	r0, #40	; 0x28
 8001d28:	f000 fe09 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020800 	.word	0x40020800

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <omni_init>:
#include "motor_control.h"
#include "math.h"

static float params[12];

uint8_t omni_init(){
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

	// Wheel 1 -- front left
	params[0] = 0;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <omni_init+0x6c>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
	params[1] = 1;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <omni_init+0x6c>)
 8001d5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d5e:	605a      	str	r2, [r3, #4]
	params[2] = -1;
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <omni_init+0x6c>)
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <omni_init+0x70>)
 8001d64:	609a      	str	r2, [r3, #8]

	// Wheel 2 -- front right
	params[3] = 0;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <omni_init+0x6c>)
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
	params[4] = 1;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <omni_init+0x6c>)
 8001d70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d74:	611a      	str	r2, [r3, #16]
	params[5] = 1;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <omni_init+0x6c>)
 8001d78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d7c:	615a      	str	r2, [r3, #20]

	// Wheel 3 -- back right
	params[6] = 0;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <omni_init+0x6c>)
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
	params[7] = 1;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <omni_init+0x6c>)
 8001d88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d8c:	61da      	str	r2, [r3, #28]
	params[8] = -1;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <omni_init+0x6c>)
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <omni_init+0x70>)
 8001d92:	621a      	str	r2, [r3, #32]

	// Wheel 4 -- back left
	params[9] = 0;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <omni_init+0x6c>)
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
	params[10] = 1;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <omni_init+0x6c>)
 8001d9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
	params[11] = 1;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <omni_init+0x6c>)
 8001da6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c

	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	200000d0 	.word	0x200000d0
 8001dbc:	bf800000 	.word	0xbf800000

08001dc0 <getMotorVels>:

int8_t * getMotorVels(uint8_t magnitude, float * direction){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
	static int8_t motor_cmds[4];
	matrixMult(magnitude, direction, motor_cmds);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <getMotorVels+0x24>)
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f808 	bl	8001de8 <matrixMult>
	return motor_cmds;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <getMotorVels+0x24>)
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000100 	.word	0x20000100

08001de8 <matrixMult>:

void matrixMult(uint8_t magnitude, float *direction, int8_t *motor_cmds){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	73fb      	strb	r3, [r7, #15]
	float motor1;
	float motor2;
	float motor3;
	float motor4;

	float xv = direction[0] * magnitude;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	edc7 7a07 	vstr	s15, [r7, #28]
	int8_t x_vel = ceil(xv);
 8001e0e:	69f8      	ldr	r0, [r7, #28]
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	ec43 2b10 	vmov	d0, r2, r3
 8001e1c:	f004 fad8 	bl	80063d0 <ceil>
 8001e20:	ec53 2b10 	vmov	r2, r3, d0
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe42 	bl	8000ab0 <__aeabi_d2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	76fb      	strb	r3, [r7, #27]


	float yv = direction[1] * magnitude;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3304      	adds	r3, #4
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a05 	vstr	s15, [r7, #20]
	int8_t y_vel = ceil(yv);
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7fe fb28 	bl	80004a0 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	ec43 2b10 	vmov	d0, r2, r3
 8001e58:	f004 faba 	bl	80063d0 <ceil>
 8001e5c:	ec53 2b10 	vmov	r2, r3, d0
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fe24 	bl	8000ab0 <__aeabi_d2iz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	74fb      	strb	r3, [r7, #19]


	motor_cmds[0] = params[1] * x_vel + params[2] * y_vel;
 8001e6c:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <matrixMult+0x194>)
 8001e6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <matrixMult+0x194>)
 8001e84:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea0:	edc7 7a00 	vstr	s15, [r7]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b25a      	sxtb	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	701a      	strb	r2, [r3, #0]
	motor_cmds[1] = params[4] * x_vel + params[5] * y_vel;
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <matrixMult+0x194>)
 8001eae:	ed93 7a04 	vldr	s14, [r3, #16]
 8001eb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <matrixMult+0x194>)
 8001ec4:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee4:	edc7 7a00 	vstr	s15, [r7]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b252      	sxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
	motor_cmds[2] = params[7] * x_vel + params[8] * y_vel;
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <matrixMult+0x194>)
 8001ef0:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ef4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <matrixMult+0x194>)
 8001f06:	edd3 6a08 	vldr	s13, [r3, #32]
 8001f0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3302      	adds	r3, #2
 8001f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f26:	edc7 7a00 	vstr	s15, [r7]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	b252      	sxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
	motor_cmds[3] = params[10] * x_vel + params[11] * y_vel;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <matrixMult+0x194>)
 8001f32:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <matrixMult+0x194>)
 8001f48:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001f4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3303      	adds	r3, #3
 8001f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f68:	edc7 7a00 	vstr	s15, [r7]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	b252      	sxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

}
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200000d0 	.word	0x200000d0

08001f80 <piezo_init>:

#include "piezo.h"

static TIM_HandleTypeDef* htim;

void piezo_init(TIM_HandleTypeDef* htim_in) {
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	htim = htim_in;
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <piezo_init+0x1c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000104 	.word	0x20000104

08001fa0 <changeFrequency>:

void changeFrequency(int note /* Hz */) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	int arr = 1000000/noteArray[note];
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <changeFrequency+0x80>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	ed93 7a00 	vldr	s14, [r3]
 8001fb4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002024 <changeFrequency+0x84>
 8001fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc0:	ee17 3a90 	vmov	r3, s15
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <changeFrequency+0x88>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fced 	bl	80049ac <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	htim->Init.Period = arr - 1;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <changeFrequency+0x88>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(htim);
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <changeFrequency+0x88>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fbe3 	bl	80047ac <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe6:	2360      	movs	r3, #96	; 0x60
 8001fe8:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = arr/2;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	0fda      	lsrs	r2, r3, #31
 8001fee:	4413      	add	r3, r2
 8001ff0:	105b      	asrs	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
	HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <changeFrequency+0x88>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f107 0108 	add.w	r1, r7, #8
 8002004:	2200      	movs	r2, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fe3c 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <changeFrequency+0x88>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fc1a 	bl	800484c <HAL_TIM_PWM_Start>
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000000c 	.word	0x2000000c
 8002024:	49742400 	.word	0x49742400
 8002028:	20000104 	.word	0x20000104

0800202c <delay>:

void delay(int len) {
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < len; ++i) {}
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e002      	b.n	8002040 <delay+0x14>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3301      	adds	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf8      	blt.n	800203a <delay+0xe>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <rest>:

void rest(int len) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <rest+0x24>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fca0 	bl	80049ac <HAL_TIM_PWM_Stop>
	delay(len);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffdd 	bl	800202c <delay>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000104 	.word	0x20000104

08002080 <playNote>:

void playNote(int len, int note, int restLen) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	changeFrequency(note);
 800208c:	68b8      	ldr	r0, [r7, #8]
 800208e:	f7ff ff87 	bl	8001fa0 <changeFrequency>
	delay(len);
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ffca 	bl	800202c <delay>
	rest(restLen);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ffdd 	bl	8002058 <rest>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <playDeathSound>:

void playDeathSound() {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	playNote(HALF, D, BURST);
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <playDeathSound+0x50>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <playDeathSound+0x54>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ffe4 	bl	8002080 <playNote>
	playNote(QUARTER, D, BURST);
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <playDeathSound+0x58>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <playDeathSound+0x54>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ffde 	bl	8002080 <playNote>
	playNote(FULL, G, BURST);
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <playDeathSound+0x5c>)
 80020c6:	2104      	movs	r1, #4
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <playDeathSound+0x54>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ffd8 	bl	8002080 <playNote>
	playNote(HALF, D, BURST);
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <playDeathSound+0x50>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	4a09      	ldr	r2, [pc, #36]	; (80020fc <playDeathSound+0x54>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ffd2 	bl	8002080 <playNote>
	playNote(QUARTER, G, BURST);
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <playDeathSound+0x58>)
 80020de:	2104      	movs	r1, #4
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <playDeathSound+0x54>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ffcc 	bl	8002080 <playNote>
	playNote(FULL, B, BURST);
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <playDeathSound+0x5c>)
 80020ea:	2106      	movs	r1, #6
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <playDeathSound+0x54>)
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ffc6 	bl	8002080 <playNote>
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	004c4b40 	.word	0x004c4b40
 80020fc:	000493e0 	.word	0x000493e0
 8002100:	002dc6c0 	.word	0x002dc6c0
 8002104:	00989680 	.word	0x00989680

08002108 <playHitSound>:

void playHitSound() {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	playNote(QUARTER, C_HIGH, 1);
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <playHitSound+0x50>)
 800210e:	2107      	movs	r1, #7
 8002110:	2201      	movs	r2, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ffb4 	bl	8002080 <playNote>
	playNote(QUARTER, F, 1);
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <playHitSound+0x50>)
 800211a:	2103      	movs	r1, #3
 800211c:	2201      	movs	r2, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ffae 	bl	8002080 <playNote>
	playNote(QUARTER, C_HIGH, 1);
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <playHitSound+0x50>)
 8002126:	2107      	movs	r1, #7
 8002128:	2201      	movs	r2, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffa8 	bl	8002080 <playNote>
	playNote(QUARTER, F, 1);
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <playHitSound+0x50>)
 8002132:	2103      	movs	r1, #3
 8002134:	2201      	movs	r2, #1
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ffa2 	bl	8002080 <playNote>
	playNote(QUARTER, C_HIGH, 1);
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <playHitSound+0x50>)
 800213e:	2107      	movs	r1, #7
 8002140:	2201      	movs	r2, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff9c 	bl	8002080 <playNote>
	playNote(QUARTER, F, 1);
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <playHitSound+0x50>)
 800214a:	2103      	movs	r1, #3
 800214c:	2201      	movs	r2, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff96 	bl	8002080 <playNote>
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	002dc6c0 	.word	0x002dc6c0

0800215c <playFireSound>:

void playFireSound() {
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	playNote(BURST, C_HIGH, 1);
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <playFireSound+0x2c>)
 8002162:	2107      	movs	r1, #7
 8002164:	2201      	movs	r2, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff8a 	bl	8002080 <playNote>
	playNote(BURST, F, 1);
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <playFireSound+0x2c>)
 800216e:	2103      	movs	r1, #3
 8002170:	2201      	movs	r2, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff84 	bl	8002080 <playNote>
	playNote(BURST, C_LOW, 1);
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <playFireSound+0x2c>)
 800217a:	2100      	movs	r1, #0
 800217c:	2201      	movs	r2, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff7e 	bl	8002080 <playNote>
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	000493e0 	.word	0x000493e0

0800218c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_MspInit+0x4c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_MspInit+0x4c>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_MspInit+0x4c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_MspInit+0x4c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_MspInit+0x4c>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_MspInit+0x4c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ca:	2007      	movs	r0, #7
 80021cc:	f000 fb90 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a42      	ldr	r2, [pc, #264]	; (8002304 <HAL_I2C_MspInit+0x128>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12d      	bne.n	800225a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a40      	ldr	r2, [pc, #256]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800221a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002220:	2312      	movs	r3, #18
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222c:	2304      	movs	r3, #4
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4835      	ldr	r0, [pc, #212]	; (800230c <HAL_I2C_MspInit+0x130>)
 8002238:	f000 fc2e 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a30      	ldr	r2, [pc, #192]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002258:	e04f      	b.n	80022fa <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2c      	ldr	r2, [pc, #176]	; (8002310 <HAL_I2C_MspInit+0x134>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d14a      	bne.n	80022fa <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6313      	str	r3, [r2, #48]	; 0x30
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	6313      	str	r3, [r2, #48]	; 0x30
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800229c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a2:	2312      	movs	r3, #18
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022ae:	2304      	movs	r3, #4
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	4816      	ldr	r0, [pc, #88]	; (8002314 <HAL_I2C_MspInit+0x138>)
 80022ba:	f000 fbed 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022be:	2310      	movs	r3, #16
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c2:	2312      	movs	r3, #18
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80022ce:	2309      	movs	r3, #9
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspInit+0x130>)
 80022da:	f000 fbdd 	bl	8002a98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 80022e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_I2C_MspInit+0x12c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
}
 80022fa:	bf00      	nop
 80022fc:	3730      	adds	r7, #48	; 0x30
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40005400 	.word	0x40005400
 8002308:	40023800 	.word	0x40023800
 800230c:	40020400 	.word	0x40020400
 8002310:	40005c00 	.word	0x40005c00
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d10d      	bne.n	8002346 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_TIM_PWM_MspInit+0x3c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_TIM_PWM_MspInit+0x3c>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_TIM_PWM_MspInit+0x3c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_TIM_Base_MspInit+0x48>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d115      	bne.n	8002396 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_TIM_Base_MspInit+0x4c>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	201a      	movs	r0, #26
 800238c:	f000 fabb 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002390:	201a      	movs	r0, #26
 8002392:	f000 fad4 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40014800 	.word	0x40014800
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d11d      	bne.n	8002406 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_TIM_MspPostInit+0x68>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <HAL_TIM_MspPostInit+0x68>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_TIM_MspPostInit+0x68>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023e6:	2301      	movs	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	4619      	mov	r1, r3
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <HAL_TIM_MspPostInit+0x6c>)
 8002402:	f000 fb49 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	; 0x30
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a36      	ldr	r2, [pc, #216]	; (8002510 <HAL_UART_MspInit+0xf8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d135      	bne.n	80024a6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	4b35      	ldr	r3, [pc, #212]	; (8002514 <HAL_UART_MspInit+0xfc>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a34      	ldr	r2, [pc, #208]	; (8002514 <HAL_UART_MspInit+0xfc>)
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HAL_UART_MspInit+0xfc>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_UART_MspInit+0xfc>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_UART_MspInit+0xfc>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_UART_MspInit+0xfc>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002472:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002484:	2307      	movs	r3, #7
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	4822      	ldr	r0, [pc, #136]	; (8002518 <HAL_UART_MspInit+0x100>)
 8002490:	f000 fb02 	bl	8002a98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	2025      	movs	r0, #37	; 0x25
 800249a:	f000 fa34 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800249e:	2025      	movs	r0, #37	; 0x25
 80024a0:	f000 fa4d 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024a4:	e030      	b.n	8002508 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_UART_MspInit+0x104>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d12b      	bne.n	8002508 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024be:	6413      	str	r3, [r2, #64]	; 0x40
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_UART_MspInit+0xfc>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024e8:	230c      	movs	r3, #12
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f8:	2307      	movs	r3, #7
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4619      	mov	r1, r3
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_UART_MspInit+0x100>)
 8002504:	f000 fac8 	bl	8002a98 <HAL_GPIO_Init>
}
 8002508:	bf00      	nop
 800250a:	3730      	adds	r7, #48	; 0x30
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40011000 	.word	0x40011000
 8002514:	40023800 	.word	0x40023800
 8002518:	40020000 	.word	0x40020000
 800251c:	40004400 	.word	0x40004400

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <NMI_Handler+0x4>

08002526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler+0x4>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler+0x4>

0800253e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 f8ac 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800257a:	f002 fa7b 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000020c 	.word	0x2000020c

08002588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <USART1_IRQHandler+0x10>)
 800258e:	f003 f827 	bl	80055e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200001c8 	.word	0x200001c8

0800259c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025a4:	f000 fc2e 	bl	8002e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <SystemInit+0x20>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <SystemInit+0x20>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025d4:	480d      	ldr	r0, [pc, #52]	; (800260c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025d6:	490e      	ldr	r1, [pc, #56]	; (8002610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025ec:	4c0b      	ldr	r4, [pc, #44]	; (800261c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025fa:	f7ff ffd7 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fe:	f003 fead 	bl	800635c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002602:	f7ff f933 	bl	800186c <main>
  bx  lr    
 8002606:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002608:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002610:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002614:	08007580 	.word	0x08007580
  ldr r2, =_sbss
 8002618:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800261c:	200002e4 	.word	0x200002e4

08002620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC_IRQHandler>
	...

08002624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <HAL_Init+0x40>)
 800262e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_Init+0x40>)
 800263a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_Init+0x40>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 f94f 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f808 	bl	8002668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002658:	f7ff fd98 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_InitTick+0x54>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_InitTick+0x58>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f967 	bl	800295a <HAL_SYSTICK_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00e      	b.n	80026b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b0f      	cmp	r3, #15
 800269a:	d80a      	bhi.n	80026b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269c:	2200      	movs	r2, #0
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a4:	f000 f92f 	bl	8002906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <HAL_InitTick+0x5c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000002c 	.word	0x2000002c
 80026c0:	20000034 	.word	0x20000034
 80026c4:	20000030 	.word	0x20000030

080026c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_IncTick+0x20>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_IncTick+0x24>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_IncTick+0x24>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000034 	.word	0x20000034
 80026ec:	200002e0 	.word	0x200002e0

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200002e0 	.word	0x200002e0

08002708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff ffee 	bl	80026f0 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002720:	d005      	beq.n	800272e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_Delay+0x44>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800272e:	bf00      	nop
 8002730:	f7ff ffde 	bl	80026f0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	429a      	cmp	r2, r3
 800273e:	d8f7      	bhi.n	8002730 <HAL_Delay+0x28>
  {
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000034 	.word	0x20000034

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db0b      	blt.n	80027de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <__NVIC_EnableIRQ+0x38>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d0:	f7ff ff8e 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff29 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff3e 	bl	8002798 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff8e 	bl	8002844 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff31 	bl	80027b4 <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffa2 	bl	80028ac <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff feb6 	bl	80026f0 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d008      	beq.n	80029a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e052      	b.n	8002a4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0216 	bic.w	r2, r2, #22
 80029b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <HAL_DMA_Abort+0x62>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0208 	bic.w	r2, r2, #8
 80029e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f4:	e013      	b.n	8002a1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029f6:	f7ff fe7b 	bl	80026f0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d90c      	bls.n	8002a1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e015      	b.n	8002a4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e4      	bne.n	80029f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	223f      	movs	r2, #63	; 0x3f
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d004      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e00c      	b.n	8002a8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2205      	movs	r2, #5
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e159      	b.n	8002d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 8148 	bne.w	8002d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d005      	beq.n	8002aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d130      	bne.n	8002b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d017      	beq.n	8002b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a2 	beq.w	8002d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b57      	ldr	r3, [pc, #348]	; (8002d80 <HAL_GPIO_Init+0x2e8>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_GPIO_Init+0x2e8>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <HAL_GPIO_Init+0x2e8>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3a:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_GPIO_Init+0x2ec>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a49      	ldr	r2, [pc, #292]	; (8002d88 <HAL_GPIO_Init+0x2f0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d019      	beq.n	8002c9a <HAL_GPIO_Init+0x202>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a48      	ldr	r2, [pc, #288]	; (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0x1fe>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a47      	ldr	r2, [pc, #284]	; (8002d90 <HAL_GPIO_Init+0x2f8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00d      	beq.n	8002c92 <HAL_GPIO_Init+0x1fa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a46      	ldr	r2, [pc, #280]	; (8002d94 <HAL_GPIO_Init+0x2fc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x1f6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a45      	ldr	r2, [pc, #276]	; (8002d98 <HAL_GPIO_Init+0x300>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_GPIO_Init+0x1f2>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	; (8002d84 <HAL_GPIO_Init+0x2ec>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cde:	4a2f      	ldr	r2, [pc, #188]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d08:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f aea2 	bls.w	8002ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40013c00 	.word	0x40013c00

08002da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e001      	b.n	8002dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fc5e 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e12b      	b.n	800309e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff f9be 	bl	80021dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e98:	f001 fbae 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a81      	ldr	r2, [pc, #516]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d807      	bhi.n	8002eb8 <HAL_I2C_Init+0x84>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a80      	ldr	r2, [pc, #512]	; (80030ac <HAL_I2C_Init+0x278>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e006      	b.n	8002ec6 <HAL_I2C_Init+0x92>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a7d      	ldr	r2, [pc, #500]	; (80030b0 <HAL_I2C_Init+0x27c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0e7      	b.n	800309e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a78      	ldr	r2, [pc, #480]	; (80030b4 <HAL_I2C_Init+0x280>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0c9b      	lsrs	r3, r3, #18
 8002ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d802      	bhi.n	8002f08 <HAL_I2C_Init+0xd4>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3301      	adds	r3, #1
 8002f06:	e009      	b.n	8002f1c <HAL_I2C_Init+0xe8>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a69      	ldr	r2, [pc, #420]	; (80030b8 <HAL_I2C_Init+0x284>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	495c      	ldr	r1, [pc, #368]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d819      	bhi.n	8002f70 <HAL_I2C_Init+0x13c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e59      	subs	r1, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f50:	400b      	ands	r3, r1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_I2C_Init+0x138>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e59      	subs	r1, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	e051      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	e04f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <HAL_I2C_Init+0x168>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e012      	b.n	8002fc2 <HAL_I2C_Init+0x18e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	0099      	lsls	r1, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Init+0x196>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_I2C_Init+0x1bc>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e58      	subs	r0, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	440b      	add	r3, r1
 8002fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fee:	e00f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6809      	ldr	r1, [r1, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800303e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6911      	ldr	r1, [r2, #16]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	000186a0 	.word	0x000186a0
 80030ac:	001e847f 	.word	0x001e847f
 80030b0:	003d08ff 	.word	0x003d08ff
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	10624dd3 	.word	0x10624dd3

080030bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
 80030cc:	4613      	mov	r3, r2
 80030ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff fb0e 	bl	80026f0 <HAL_GetTick>
 80030d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	f040 80e0 	bne.w	80032a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2319      	movs	r3, #25
 80030ea:	2201      	movs	r2, #1
 80030ec:	4970      	ldr	r1, [pc, #448]	; (80032b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fc58 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0d3      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_I2C_Master_Transmit+0x50>
 8003108:	2302      	movs	r3, #2
 800310a:	e0cc      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d007      	beq.n	8003132 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2221      	movs	r2, #33	; 0x21
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2210      	movs	r2, #16
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	893a      	ldrh	r2, [r7, #8]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003174:	8979      	ldrh	r1, [r7, #10]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fac2 	bl	8003704 <I2C_MasterRequestWrite>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e08d      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031a0:	e066      	b.n	8003270 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	6a39      	ldr	r1, [r7, #32]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fcd2 	bl	8003b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d107      	bne.n	80031ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06b      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11b      	bne.n	8003244 <HAL_I2C_Master_Transmit+0x188>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	6a39      	ldr	r1, [r7, #32]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fcc2 	bl	8003bd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e01a      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d194      	bne.n	80031a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	00100002 	.word	0x00100002
 80032b4:	ffff0000 	.word	0xffff0000

080032b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	817b      	strh	r3, [r7, #10]
 80032c8:	4613      	mov	r3, r2
 80032ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff fa10 	bl	80026f0 <HAL_GetTick>
 80032d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f040 820b 	bne.w	80036f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2319      	movs	r3, #25
 80032e6:	2201      	movs	r2, #1
 80032e8:	497c      	ldr	r1, [pc, #496]	; (80034dc <HAL_I2C_Master_Receive+0x224>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fb5a 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	e1fe      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_I2C_Master_Receive+0x50>
 8003304:	2302      	movs	r3, #2
 8003306:	e1f7      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d007      	beq.n	800332e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2222      	movs	r2, #34	; 0x22
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2210      	movs	r2, #16
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	893a      	ldrh	r2, [r7, #8]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a5c      	ldr	r2, [pc, #368]	; (80034e0 <HAL_I2C_Master_Receive+0x228>)
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fa46 	bl	8003808 <I2C_MasterRequestRead>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1b8      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	d113      	bne.n	80033b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e18c      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d11b      	bne.n	80033f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e16c      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d11b      	bne.n	8003436 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	e14c      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800345c:	e138      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	2b03      	cmp	r3, #3
 8003464:	f200 80f1 	bhi.w	800364a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b01      	cmp	r3, #1
 800346e:	d123      	bne.n	80034b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fbed 	bl	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e139      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b6:	e10b      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d14e      	bne.n	800355e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2200      	movs	r2, #0
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <HAL_I2C_Master_Receive+0x22c>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fa6a 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e10e      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
 80034da:	bf00      	nop
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000
 80034e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800355c:	e0b8      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	4966      	ldr	r1, [pc, #408]	; (8003700 <HAL_I2C_Master_Receive+0x448>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa1b 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0bf      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	2200      	movs	r2, #0
 80035c2:	494f      	ldr	r1, [pc, #316]	; (8003700 <HAL_I2C_Master_Receive+0x448>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f9ed 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e091      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003648:	e042      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fb00 	bl	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e04c      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d118      	bne.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f aec2 	bne.w	800345e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	00010004 	.word	0x00010004

08003704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	460b      	mov	r3, r1
 8003712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d006      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d003      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800372c:	d108      	bne.n	8003740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e00b      	b.n	8003758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	2b12      	cmp	r3, #18
 8003746:	d107      	bne.n	8003758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f91d 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377e:	d103      	bne.n	8003788 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e035      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003794:	d108      	bne.n	80037a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a4:	611a      	str	r2, [r3, #16]
 80037a6:	e01b      	b.n	80037e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	11db      	asrs	r3, r3, #7
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 0306 	and.w	r3, r3, #6
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f063 030f 	orn	r3, r3, #15
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	490e      	ldr	r1, [pc, #56]	; (8003800 <I2C_MasterRequestWrite+0xfc>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f943 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e010      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <I2C_MasterRequestWrite+0x100>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f933 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	00010008 	.word	0x00010008
 8003804:	00010002 	.word	0x00010002

08003808 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	460b      	mov	r3, r1
 8003816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800382c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d006      	beq.n	8003842 <I2C_MasterRequestRead+0x3a>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d003      	beq.n	8003842 <I2C_MasterRequestRead+0x3a>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003840:	d108      	bne.n	8003854 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00b      	b.n	800386c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	2b11      	cmp	r3, #17
 800385a:	d107      	bne.n	800386c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f893 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003892:	d103      	bne.n	800389c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e079      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a8:	d108      	bne.n	80038bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	611a      	str	r2, [r3, #16]
 80038ba:	e05f      	b.n	800397c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038bc:	897b      	ldrh	r3, [r7, #10]
 80038be:	11db      	asrs	r3, r3, #7
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 0306 	and.w	r3, r3, #6
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f063 030f 	orn	r3, r3, #15
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4930      	ldr	r1, [pc, #192]	; (800399c <I2C_MasterRequestRead+0x194>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f8b9 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e054      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4929      	ldr	r1, [pc, #164]	; (80039a0 <I2C_MasterRequestRead+0x198>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8a9 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e044      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f831 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003956:	d103      	bne.n	8003960 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e017      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	11db      	asrs	r3, r3, #7
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0306 	and.w	r3, r3, #6
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f063 030e 	orn	r3, r3, #14
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <I2C_MasterRequestRead+0x198>)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f865 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	00010008 	.word	0x00010008
 80039a0:	00010002 	.word	0x00010002

080039a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b4:	e025      	b.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039bc:	d021      	beq.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039be:	f7fe fe97 	bl	80026f0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e023      	b.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10d      	bne.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	e00c      	b.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d0b6      	beq.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a60:	e051      	b.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d123      	bne.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0204 	orr.w	r2, r3, #4
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e046      	b.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac0:	d021      	beq.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe fe15 	bl	80026f0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d116      	bne.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e020      	b.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10c      	bne.n	8003b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	e00b      	b.n	8003b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d18d      	bne.n	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5c:	e02d      	b.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f8ce 	bl	8003d00 <I2C_IsAcknowledgeFailed>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e02d      	b.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b74:	d021      	beq.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fdbb 	bl	80026f0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e007      	b.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d1ca      	bne.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bde:	e02d      	b.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f88d 	bl	8003d00 <I2C_IsAcknowledgeFailed>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e02d      	b.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf6:	d021      	beq.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf8:	f7fe fd7a 	bl	80026f0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e007      	b.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d1ca      	bne.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c60:	e042      	b.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d119      	bne.n	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0210 	mvn.w	r2, #16
 8003c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e029      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	f7fe fd24 	bl	80026f0 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d116      	bne.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e007      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d1b5      	bne.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	d11b      	bne.n	8003d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e264      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d075      	beq.n	8003e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7e:	4ba3      	ldr	r3, [pc, #652]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00c      	beq.n	8003da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8a:	4ba0      	ldr	r3, [pc, #640]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d112      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d96:	4b9d      	ldr	r3, [pc, #628]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da2:	d10b      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	4b99      	ldr	r3, [pc, #612]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05b      	beq.n	8003e68 <HAL_RCC_OscConfig+0x108>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d157      	bne.n	8003e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e23f      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x74>
 8003dc6:	4b91      	ldr	r3, [pc, #580]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a90      	ldr	r2, [pc, #576]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e01d      	b.n	8003e10 <HAL_RCC_OscConfig+0xb0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x98>
 8003dde:	4b8b      	ldr	r3, [pc, #556]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a8a      	ldr	r2, [pc, #552]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b88      	ldr	r3, [pc, #544]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a87      	ldr	r2, [pc, #540]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0xb0>
 8003df8:	4b84      	ldr	r3, [pc, #528]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a83      	ldr	r2, [pc, #524]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b81      	ldr	r3, [pc, #516]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a80      	ldr	r2, [pc, #512]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d013      	beq.n	8003e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fe fc6a 	bl	80026f0 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fe fc66 	bl	80026f0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e204      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b76      	ldr	r3, [pc, #472]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0xc0>
 8003e3e:	e014      	b.n	8003e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fc56 	bl	80026f0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fe fc52 	bl	80026f0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1f0      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0xe8>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e76:	4b65      	ldr	r3, [pc, #404]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e82:	4b62      	ldr	r3, [pc, #392]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d11c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d116      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	4b5c      	ldr	r3, [pc, #368]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x152>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e1c4      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	4b56      	ldr	r3, [pc, #344]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4952      	ldr	r1, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	e03a      	b.n	8003f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed0:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <HAL_RCC_OscConfig+0x2b0>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fe fc0b 	bl	80026f0 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ede:	f7fe fc07 	bl	80026f0 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e1a5      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	4b46      	ldr	r3, [pc, #280]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efc:	4b43      	ldr	r3, [pc, #268]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4940      	ldr	r1, [pc, #256]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
 8003f10:	e015      	b.n	8003f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f12:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <HAL_RCC_OscConfig+0x2b0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fe fbea 	bl	80026f0 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fe fbe6 	bl	80026f0 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e184      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	4b36      	ldr	r3, [pc, #216]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d030      	beq.n	8003fac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f52:	4b30      	ldr	r3, [pc, #192]	; (8004014 <HAL_RCC_OscConfig+0x2b4>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fe fbca 	bl	80026f0 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fe fbc6 	bl	80026f0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e164      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x200>
 8003f7e:	e015      	b.n	8003fac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_RCC_OscConfig+0x2b4>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f86:	f7fe fbb3 	bl	80026f0 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8e:	f7fe fbaf 	bl	80026f0 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e14d      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f0      	bne.n	8003f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a0 	beq.w	80040fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_OscConfig+0x2b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d121      	bne.n	800403a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_RCC_OscConfig+0x2b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a07      	ldr	r2, [pc, #28]	; (8004018 <HAL_RCC_OscConfig+0x2b8>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004002:	f7fe fb75 	bl	80026f0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	e011      	b.n	800402e <HAL_RCC_OscConfig+0x2ce>
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	42470000 	.word	0x42470000
 8004014:	42470e80 	.word	0x42470e80
 8004018:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fe fb68 	bl	80026f0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e106      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b85      	ldr	r3, [pc, #532]	; (8004244 <HAL_RCC_OscConfig+0x4e4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d106      	bne.n	8004050 <HAL_RCC_OscConfig+0x2f0>
 8004042:	4b81      	ldr	r3, [pc, #516]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a80      	ldr	r2, [pc, #512]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
 800404e:	e01c      	b.n	800408a <HAL_RCC_OscConfig+0x32a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b05      	cmp	r3, #5
 8004056:	d10c      	bne.n	8004072 <HAL_RCC_OscConfig+0x312>
 8004058:	4b7b      	ldr	r3, [pc, #492]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a7a      	ldr	r2, [pc, #488]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 800405e:	f043 0304 	orr.w	r3, r3, #4
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	4b78      	ldr	r3, [pc, #480]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4a77      	ldr	r2, [pc, #476]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6713      	str	r3, [r2, #112]	; 0x70
 8004070:	e00b      	b.n	800408a <HAL_RCC_OscConfig+0x32a>
 8004072:	4b75      	ldr	r3, [pc, #468]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a74      	ldr	r2, [pc, #464]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
 800407e:	4b72      	ldr	r3, [pc, #456]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a71      	ldr	r2, [pc, #452]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d015      	beq.n	80040be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004092:	f7fe fb2d 	bl	80026f0 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fe fb29 	bl	80026f0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e0c5      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b0:	4b65      	ldr	r3, [pc, #404]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ee      	beq.n	800409a <HAL_RCC_OscConfig+0x33a>
 80040bc:	e014      	b.n	80040e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040be:	f7fe fb17 	bl	80026f0 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fe fb13 	bl	80026f0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e0af      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040dc:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ee      	bne.n	80040c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ee:	4b56      	ldr	r3, [pc, #344]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a55      	ldr	r2, [pc, #340]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 809b 	beq.w	800423a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004104:	4b50      	ldr	r3, [pc, #320]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b08      	cmp	r3, #8
 800410e:	d05c      	beq.n	80041ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d141      	bne.n	800419c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004118:	4b4c      	ldr	r3, [pc, #304]	; (800424c <HAL_RCC_OscConfig+0x4ec>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411e:	f7fe fae7 	bl	80026f0 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004126:	f7fe fae3 	bl	80026f0 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e081      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004138:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f0      	bne.n	8004126 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	019b      	lsls	r3, r3, #6
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	3b01      	subs	r3, #1
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	4937      	ldr	r1, [pc, #220]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_OscConfig+0x4ec>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fe fabc 	bl	80026f0 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417c:	f7fe fab8 	bl	80026f0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e056      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x41c>
 800419a:	e04e      	b.n	800423a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_OscConfig+0x4ec>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a2:	f7fe faa5 	bl	80026f0 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041aa:	f7fe faa1 	bl	80026f0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e03f      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041bc:	4b22      	ldr	r3, [pc, #136]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x44a>
 80041c8:	e037      	b.n	800423a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e032      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <HAL_RCC_OscConfig+0x4e8>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d028      	beq.n	8004236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d121      	bne.n	8004236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d11a      	bne.n	8004236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800420c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800420e:	4293      	cmp	r3, r2
 8004210:	d111      	bne.n	8004236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	3b01      	subs	r3, #1
 8004220:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d107      	bne.n	8004236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40007000 	.word	0x40007000
 8004248:	40023800 	.word	0x40023800
 800424c:	42470060 	.word	0x42470060

08004250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0cc      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d90c      	bls.n	800428c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b65      	ldr	r3, [pc, #404]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b8      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a4:	4b59      	ldr	r3, [pc, #356]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a58      	ldr	r2, [pc, #352]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042bc:	4b53      	ldr	r3, [pc, #332]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a52      	ldr	r2, [pc, #328]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b50      	ldr	r3, [pc, #320]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	494d      	ldr	r1, [pc, #308]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d044      	beq.n	8004370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d119      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d003      	beq.n	800430e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430a:	2b03      	cmp	r3, #3
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e067      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4934      	ldr	r1, [pc, #208]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004340:	f7fe f9d6 	bl	80026f0 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e00a      	b.n	800435e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7fe f9d2 	bl	80026f0 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e04f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 020c 	and.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	429a      	cmp	r2, r3
 800436e:	d1eb      	bne.n	8004348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d20c      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b22      	ldr	r3, [pc, #136]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e032      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4916      	ldr	r1, [pc, #88]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490e      	ldr	r1, [pc, #56]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043d6:	f000 f821 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043da:	4602      	mov	r2, r0
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	490a      	ldr	r1, [pc, #40]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	5ccb      	ldrb	r3, [r1, r3]
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe f936 	bl	8002668 <HAL_InitTick>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023c00 	.word	0x40023c00
 800440c:	40023800 	.word	0x40023800
 8004410:	08007514 	.word	0x08007514
 8004414:	2000002c 	.word	0x2000002c
 8004418:	20000030 	.word	0x20000030

0800441c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	2300      	movs	r3, #0
 800442e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004434:	4b67      	ldr	r3, [pc, #412]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d00d      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x40>
 8004440:	2b08      	cmp	r3, #8
 8004442:	f200 80bd 	bhi.w	80045c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x34>
 800444a:	2b04      	cmp	r3, #4
 800444c:	d003      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x3a>
 800444e:	e0b7      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004452:	60bb      	str	r3, [r7, #8]
       break;
 8004454:	e0b7      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004456:	4b61      	ldr	r3, [pc, #388]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004458:	60bb      	str	r3, [r7, #8]
      break;
 800445a:	e0b4      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800445c:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004464:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004466:	4b5b      	ldr	r3, [pc, #364]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d04d      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004472:	4b58      	ldr	r3, [pc, #352]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	461a      	mov	r2, r3
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	ea02 0800 	and.w	r8, r2, r0
 800448a:	ea03 0901 	and.w	r9, r3, r1
 800448e:	4640      	mov	r0, r8
 8004490:	4649      	mov	r1, r9
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	014b      	lsls	r3, r1, #5
 800449c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044a0:	0142      	lsls	r2, r0, #5
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	ebb0 0008 	subs.w	r0, r0, r8
 80044aa:	eb61 0109 	sbc.w	r1, r1, r9
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	018b      	lsls	r3, r1, #6
 80044b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044bc:	0182      	lsls	r2, r0, #6
 80044be:	1a12      	subs	r2, r2, r0
 80044c0:	eb63 0301 	sbc.w	r3, r3, r1
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f04f 0100 	mov.w	r1, #0
 80044cc:	00d9      	lsls	r1, r3, #3
 80044ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044d2:	00d0      	lsls	r0, r2, #3
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	eb12 0208 	adds.w	r2, r2, r8
 80044dc:	eb43 0309 	adc.w	r3, r3, r9
 80044e0:	f04f 0000 	mov.w	r0, #0
 80044e4:	f04f 0100 	mov.w	r1, #0
 80044e8:	0259      	lsls	r1, r3, #9
 80044ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044ee:	0250      	lsls	r0, r2, #9
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	f7fc fb4e 	bl	8000ba0 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4613      	mov	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e04a      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	461a      	mov	r2, r3
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	ea02 0400 	and.w	r4, r2, r0
 8004526:	ea03 0501 	and.w	r5, r3, r1
 800452a:	4620      	mov	r0, r4
 800452c:	4629      	mov	r1, r5
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	014b      	lsls	r3, r1, #5
 8004538:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800453c:	0142      	lsls	r2, r0, #5
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	1b00      	subs	r0, r0, r4
 8004544:	eb61 0105 	sbc.w	r1, r1, r5
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	018b      	lsls	r3, r1, #6
 8004552:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004556:	0182      	lsls	r2, r0, #6
 8004558:	1a12      	subs	r2, r2, r0
 800455a:	eb63 0301 	sbc.w	r3, r3, r1
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	00d9      	lsls	r1, r3, #3
 8004568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800456c:	00d0      	lsls	r0, r2, #3
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	1912      	adds	r2, r2, r4
 8004574:	eb45 0303 	adc.w	r3, r5, r3
 8004578:	f04f 0000 	mov.w	r0, #0
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	0299      	lsls	r1, r3, #10
 8004582:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004586:	0290      	lsls	r0, r2, #10
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	461a      	mov	r2, r3
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	f7fc fb02 	bl	8000ba0 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	3301      	adds	r3, #1
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	60bb      	str	r3, [r7, #8]
      break;
 80045be:	e002      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045c2:	60bb      	str	r3, [r7, #8]
      break;
 80045c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c6:	68bb      	ldr	r3, [r7, #8]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	007a1200 	.word	0x007a1200

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000002c 	.word	0x2000002c

080045f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045fc:	f7ff fff0 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <HAL_RCC_GetPCLK1Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	08007524 	.word	0x08007524

08004620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004624:	f7ff ffdc 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	0b5b      	lsrs	r3, r3, #13
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4903      	ldr	r1, [pc, #12]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40023800 	.word	0x40023800
 8004644:	08007524 	.word	0x08007524

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e041      	b.n	80046de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd fe72 	bl	8002358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fbe6 	bl	8004e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d001      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e044      	b.n	800478a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_TIM_Base_Start_IT+0xb0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472a:	d013      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1a      	ldr	r2, [pc, #104]	; (800479c <HAL_TIM_Base_Start_IT+0xb4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x6c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d010      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	e007      	b.n	8004788 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40014000 	.word	0x40014000

080047ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e041      	b.n	8004842 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd fda0 	bl	8002318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 fb34 	bl	8004e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_TIM_PWM_Start+0x24>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e022      	b.n	80048b6 <HAL_TIM_PWM_Start+0x6a>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b04      	cmp	r3, #4
 8004874:	d109      	bne.n	800488a <HAL_TIM_PWM_Start+0x3e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e015      	b.n	80048b6 <HAL_TIM_PWM_Start+0x6a>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d109      	bne.n	80048a4 <HAL_TIM_PWM_Start+0x58>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e008      	b.n	80048b6 <HAL_TIM_PWM_Start+0x6a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e068      	b.n	8004990 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0x82>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048cc:	e013      	b.n	80048f6 <HAL_TIM_PWM_Start+0xaa>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0x92>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048dc:	e00b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xaa>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start+0xa2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	e003      	b.n	80048f6 <HAL_TIM_PWM_Start+0xaa>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fcb6 	bl	8005270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a23      	ldr	r2, [pc, #140]	; (8004998 <HAL_TIM_PWM_Start+0x14c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d107      	bne.n	800491e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <HAL_TIM_PWM_Start+0x14c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d018      	beq.n	800495a <HAL_TIM_PWM_Start+0x10e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d013      	beq.n	800495a <HAL_TIM_PWM_Start+0x10e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a19      	ldr	r2, [pc, #100]	; (800499c <HAL_TIM_PWM_Start+0x150>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00e      	beq.n	800495a <HAL_TIM_PWM_Start+0x10e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_TIM_PWM_Start+0x154>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_TIM_PWM_Start+0x10e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIM_PWM_Start+0x158>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_TIM_PWM_Start+0x10e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <HAL_TIM_PWM_Start+0x15c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d111      	bne.n	800497e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b06      	cmp	r3, #6
 800496a:	d010      	beq.n	800498e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	e007      	b.n	800498e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40010000 	.word	0x40010000
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40000c00 	.word	0x40000c00
 80049a8:	40014000 	.word	0x40014000

080049ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fc56 	bl	8005270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <HAL_TIM_PWM_Stop+0xc4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d117      	bne.n	80049fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <HAL_TIM_PWM_Stop+0x52>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	f240 4344 	movw	r3, #1092	; 0x444
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_PWM_Stop+0x52>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a1a      	ldr	r2, [r3, #32]
 8004a04:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10f      	bne.n	8004a2e <HAL_TIM_PWM_Stop+0x82>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	f240 4344 	movw	r3, #1092	; 0x444
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d107      	bne.n	8004a2e <HAL_TIM_PWM_Stop+0x82>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Stop+0x92>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a3c:	e013      	b.n	8004a66 <HAL_TIM_PWM_Stop+0xba>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Stop+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a4c:	e00b      	b.n	8004a66 <HAL_TIM_PWM_Stop+0xba>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Stop+0xb2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	e003      	b.n	8004a66 <HAL_TIM_PWM_Stop+0xba>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40010000 	.word	0x40010000

08004a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d122      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0202 	mvn.w	r2, #2
 8004aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f9b0 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9a2 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f9b3 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0204 	mvn.w	r2, #4
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f986 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f978 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f989 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0208 	mvn.w	r2, #8
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f95c 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f94e 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f95f 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0210 	mvn.w	r2, #16
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f932 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f924 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f935 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0201 	mvn.w	r2, #1
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc fdbc 	bl	8001770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fbc4 	bl	80053ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8fa 	bl	8004e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0220 	mvn.w	r2, #32
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fb8e 	bl	8005398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0ae      	b.n	8004e00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	f200 809f 	bhi.w	8004df0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004df1 	.word	0x08004df1
 8004cc0:	08004df1 	.word	0x08004df1
 8004cc4:	08004df1 	.word	0x08004df1
 8004cc8:	08004d2d 	.word	0x08004d2d
 8004ccc:	08004df1 	.word	0x08004df1
 8004cd0:	08004df1 	.word	0x08004df1
 8004cd4:	08004df1 	.word	0x08004df1
 8004cd8:	08004d6f 	.word	0x08004d6f
 8004cdc:	08004df1 	.word	0x08004df1
 8004ce0:	08004df1 	.word	0x08004df1
 8004ce4:	08004df1 	.word	0x08004df1
 8004ce8:	08004daf 	.word	0x08004daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f930 	bl	8004f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	619a      	str	r2, [r3, #24]
      break;
 8004d2a:	e064      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f976 	bl	8005024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]
      break;
 8004d6c:	e043      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f9c1 	bl	80050fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0208 	orr.w	r2, r2, #8
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0204 	bic.w	r2, r2, #4
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
      break;
 8004dac:	e023      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa0b 	bl	80051d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	021a      	lsls	r2, r3, #8
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	61da      	str	r2, [r3, #28]
      break;
 8004dee:	e002      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
      break;
 8004df4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a34      	ldr	r2, [pc, #208]	; (8004f3c <TIM_Base_SetConfig+0xe4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x38>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x38>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a31      	ldr	r2, [pc, #196]	; (8004f40 <TIM_Base_SetConfig+0xe8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x38>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a30      	ldr	r2, [pc, #192]	; (8004f44 <TIM_Base_SetConfig+0xec>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x38>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <TIM_Base_SetConfig+0xf0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <TIM_Base_SetConfig+0xe4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01b      	beq.n	8004ee2 <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d017      	beq.n	8004ee2 <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <TIM_Base_SetConfig+0xe8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <TIM_Base_SetConfig+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <TIM_Base_SetConfig+0xec>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00f      	beq.n	8004ee2 <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	; (8004f48 <TIM_Base_SetConfig+0xf0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00b      	beq.n	8004ee2 <TIM_Base_SetConfig+0x8a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <TIM_Base_SetConfig+0xf4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d007      	beq.n	8004ee2 <TIM_Base_SetConfig+0x8a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <TIM_Base_SetConfig+0xf8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d003      	beq.n	8004ee2 <TIM_Base_SetConfig+0x8a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <TIM_Base_SetConfig+0xfc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d108      	bne.n	8004ef4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <TIM_Base_SetConfig+0xe4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d103      	bne.n	8004f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	615a      	str	r2, [r3, #20]
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 0302 	bic.w	r3, r3, #2
 8004fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <TIM_OC1_SetConfig+0xc8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10c      	bne.n	8004fce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0308 	bic.w	r3, r3, #8
 8004fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <TIM_OC1_SetConfig+0xc8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d111      	bne.n	8004ffa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40010000 	.word	0x40010000

08005024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f023 0210 	bic.w	r2, r3, #16
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0320 	bic.w	r3, r3, #32
 800506e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <TIM_OC2_SetConfig+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <TIM_OC2_SetConfig+0xd4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d113      	bne.n	80050d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000

080050fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <TIM_OC3_SetConfig+0xd0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10d      	bne.n	8005176 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a14      	ldr	r2, [pc, #80]	; (80051cc <TIM_OC3_SetConfig+0xd0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d113      	bne.n	80051a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	621a      	str	r2, [r3, #32]
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	40010000 	.word	0x40010000

080051d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800521a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	031b      	lsls	r3, r3, #12
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a10      	ldr	r2, [pc, #64]	; (800526c <TIM_OC4_SetConfig+0x9c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d109      	bne.n	8005244 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	019b      	lsls	r3, r3, #6
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010000 	.word	0x40010000

08005270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2201      	movs	r2, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	43db      	mvns	r3, r3
 8005292:	401a      	ands	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e050      	b.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005320:	d013      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a16      	ldr	r2, [pc, #88]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10c      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000

08005398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e03f      	b.n	8005452 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fd f816 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2224      	movs	r2, #36	; 0x24
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fddb 	bl	8005fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b08a      	sub	sp, #40	; 0x28
 800545e:	af02      	add	r7, sp, #8
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b20      	cmp	r3, #32
 8005478:	d17c      	bne.n	8005574 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_UART_Transmit+0x2c>
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e075      	b.n	8005576 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_UART_Transmit+0x3e>
 8005494:	2302      	movs	r3, #2
 8005496:	e06e      	b.n	8005576 <HAL_UART_Transmit+0x11c>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ae:	f7fd f91f 	bl	80026f0 <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d108      	bne.n	80054dc <HAL_UART_Transmit+0x82>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e003      	b.n	80054e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054ec:	e02a      	b.n	8005544 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fb1f 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e036      	b.n	8005576 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	3302      	adds	r3, #2
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e007      	b.n	8005536 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1cf      	bne.n	80054ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	2140      	movs	r1, #64	; 0x40
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 faef 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e006      	b.n	8005576 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b20      	cmp	r3, #32
 8005596:	d11d      	bne.n	80055d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_UART_Receive_IT+0x26>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e016      	b.n	80055d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Receive_IT+0x38>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e00f      	b.n	80055d6 <HAL_UART_Receive_IT+0x58>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	461a      	mov	r2, r3
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fb24 	bl	8005c18 <UART_Start_Receive_IT>
 80055d0:	4603      	mov	r3, r0
 80055d2:	e000      	b.n	80055d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b0ba      	sub	sp, #232	; 0xe8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800560c:	2300      	movs	r3, #0
 800560e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800561e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10f      	bne.n	8005646 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_UART_IRQHandler+0x66>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fc03 	bl	8005e4a <UART_Receive_IT>
      return;
 8005644:	e256      	b.n	8005af4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80de 	beq.w	800580c <HAL_UART_IRQHandler+0x22c>
 8005650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005660:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80d1 	beq.w	800580c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_UART_IRQHandler+0xae>
 8005676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_UART_IRQHandler+0xd2>
 800569a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0202 	orr.w	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_UART_IRQHandler+0xf6>
 80056be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d011      	beq.n	8005706 <HAL_UART_IRQHandler+0x126>
 80056e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f043 0208 	orr.w	r2, r3, #8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 81ed 	beq.w	8005aea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_UART_IRQHandler+0x14e>
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fb8e 	bl	8005e4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <HAL_UART_IRQHandler+0x17a>
 8005752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04f      	beq.n	80057fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa96 	bl	8005c8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d141      	bne.n	80057f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800579a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800579e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1d9      	bne.n	800576e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d013      	beq.n	80057ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	4a7d      	ldr	r2, [pc, #500]	; (80059bc <HAL_UART_IRQHandler+0x3dc>)
 80057c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd f93f 	bl	8002a52 <HAL_DMA_Abort_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00e      	b.n	8005808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f990 	bl	8005b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00a      	b.n	8005808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f98c 	bl	8005b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e006      	b.n	8005808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f988 	bl	8005b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005806:	e170      	b.n	8005aea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	bf00      	nop
    return;
 800580a:	e16e      	b.n	8005aea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 814a 	bne.w	8005aaa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8143 	beq.w	8005aaa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 813c 	beq.w	8005aaa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	f040 80b4 	bne.w	80059c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8140 	beq.w	8005aee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005876:	429a      	cmp	r2, r3
 8005878:	f080 8139 	bcs.w	8005aee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005882:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588e:	f000 8088 	beq.w	80059a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1d9      	bne.n	8005892 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3314      	adds	r3, #20
 80058e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005902:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005906:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800590a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e1      	bne.n	80058de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800592a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800593e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005940:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005944:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800594c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e3      	bne.n	800591a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005984:	65ba      	str	r2, [r7, #88]	; 0x58
 8005986:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800598a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e3      	bne.n	8005960 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	4618      	mov	r0, r3
 800599e:	f7fc ffe8 	bl	8002972 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f8b6 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059b8:	e099      	b.n	8005aee <HAL_UART_IRQHandler+0x50e>
 80059ba:	bf00      	nop
 80059bc:	08005d53 	.word	0x08005d53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 808b 	beq.w	8005af2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8086 	beq.w	8005af2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a0a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e3      	bne.n	80059e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a42:	633a      	str	r2, [r7, #48]	; 0x30
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e3      	bne.n	8005a1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0310 	bic.w	r3, r3, #16
 8005a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a88:	61fa      	str	r2, [r7, #28]
 8005a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	617b      	str	r3, [r7, #20]
   return(result);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e3      	bne.n	8005a64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f83e 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa8:	e023      	b.n	8005af2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_UART_IRQHandler+0x4ea>
 8005ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f959 	bl	8005d7a <UART_Transmit_IT>
    return;
 8005ac8:	e014      	b.n	8005af4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <HAL_UART_IRQHandler+0x514>
 8005ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f999 	bl	8005e1a <UART_EndTransmit_IT>
    return;
 8005ae8:	e004      	b.n	8005af4 <HAL_UART_IRQHandler+0x514>
    return;
 8005aea:	bf00      	nop
 8005aec:	e002      	b.n	8005af4 <HAL_UART_IRQHandler+0x514>
      return;
 8005aee:	bf00      	nop
 8005af0:	e000      	b.n	8005af4 <HAL_UART_IRQHandler+0x514>
      return;
 8005af2:	bf00      	nop
  }
}
 8005af4:	37e8      	adds	r7, #232	; 0xe8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop

08005afc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b090      	sub	sp, #64	; 0x40
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4c:	e050      	b.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b54:	d04c      	beq.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b5c:	f7fc fdc8 	bl	80026f0 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d241      	bcs.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b8c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3314      	adds	r3, #20
 8005bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc0:	623a      	str	r2, [r7, #32]
 8005bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	6a3a      	ldr	r2, [r7, #32]
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e00f      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d09f      	beq.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3740      	adds	r7, #64	; 0x40
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2222      	movs	r2, #34	; 0x22
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0201 	orr.w	r2, r2, #1
 8005c6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0220 	orr.w	r2, r2, #32
 8005c7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b095      	sub	sp, #84	; 0x54
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cb4:	643a      	str	r2, [r7, #64]	; 0x40
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e5      	bne.n	8005c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d119      	bne.n	8005d38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f023 0310 	bic.w	r3, r3, #16
 8005d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d24:	61ba      	str	r2, [r7, #24]
 8005d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6979      	ldr	r1, [r7, #20]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	613b      	str	r3, [r7, #16]
   return(result);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d46:	bf00      	nop
 8005d48:	3754      	adds	r7, #84	; 0x54
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7ff fecf 	bl	8005b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b21      	cmp	r3, #33	; 0x21
 8005d8c:	d13e      	bne.n	8005e0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d114      	bne.n	8005dc2 <UART_Transmit_IT+0x48>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d110      	bne.n	8005dc2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005db4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	1c9a      	adds	r2, r3, #2
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]
 8005dc0:	e008      	b.n	8005dd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6211      	str	r1, [r2, #32]
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4619      	mov	r1, r3
 8005de2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10f      	bne.n	8005e08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff fe5e 	bl	8005afc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b08c      	sub	sp, #48	; 0x30
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b22      	cmp	r3, #34	; 0x22
 8005e5c:	f040 80ab 	bne.w	8005fb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e68:	d117      	bne.n	8005e9a <UART_Receive_IT+0x50>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d113      	bne.n	8005e9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28
 8005e98:	e026      	b.n	8005ee8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eac:	d007      	beq.n	8005ebe <UART_Receive_IT+0x74>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <UART_Receive_IT+0x82>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e008      	b.n	8005ede <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d15a      	bne.n	8005fb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0220 	bic.w	r2, r2, #32
 8005f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695a      	ldr	r2, [r3, #20]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d135      	bne.n	8005fa8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	613b      	str	r3, [r7, #16]
   return(result);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f023 0310 	bic.w	r3, r3, #16
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f62:	623a      	str	r2, [r7, #32]
 8005f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	69f9      	ldr	r1, [r7, #28]
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d10a      	bne.n	8005f9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fdbf 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
 8005fa6:	e002      	b.n	8005fae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fb fbb5 	bl	8001718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e002      	b.n	8005fb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3730      	adds	r7, #48	; 0x30
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	b09f      	sub	sp, #124	; 0x7c
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd6:	68d9      	ldr	r1, [r3, #12]
 8005fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	ea40 0301 	orr.w	r3, r0, r1
 8005fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006004:	f021 010c 	bic.w	r1, r1, #12
 8006008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800600e:	430b      	orrs	r3, r1
 8006010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800601c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601e:	6999      	ldr	r1, [r3, #24]
 8006020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	ea40 0301 	orr.w	r3, r0, r1
 8006028:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4bc5      	ldr	r3, [pc, #788]	; (8006344 <UART_SetConfig+0x384>)
 8006030:	429a      	cmp	r2, r3
 8006032:	d004      	beq.n	800603e <UART_SetConfig+0x7e>
 8006034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4bc3      	ldr	r3, [pc, #780]	; (8006348 <UART_SetConfig+0x388>)
 800603a:	429a      	cmp	r2, r3
 800603c:	d103      	bne.n	8006046 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800603e:	f7fe faef 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8006042:	6778      	str	r0, [r7, #116]	; 0x74
 8006044:	e002      	b.n	800604c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006046:	f7fe fad7 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 800604a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800604c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006054:	f040 80b6 	bne.w	80061c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605a:	461c      	mov	r4, r3
 800605c:	f04f 0500 	mov.w	r5, #0
 8006060:	4622      	mov	r2, r4
 8006062:	462b      	mov	r3, r5
 8006064:	1891      	adds	r1, r2, r2
 8006066:	6439      	str	r1, [r7, #64]	; 0x40
 8006068:	415b      	adcs	r3, r3
 800606a:	647b      	str	r3, [r7, #68]	; 0x44
 800606c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006070:	1912      	adds	r2, r2, r4
 8006072:	eb45 0303 	adc.w	r3, r5, r3
 8006076:	f04f 0000 	mov.w	r0, #0
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	00d9      	lsls	r1, r3, #3
 8006080:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006084:	00d0      	lsls	r0, r2, #3
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	1911      	adds	r1, r2, r4
 800608c:	6639      	str	r1, [r7, #96]	; 0x60
 800608e:	416b      	adcs	r3, r5
 8006090:	667b      	str	r3, [r7, #100]	; 0x64
 8006092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	461a      	mov	r2, r3
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	1891      	adds	r1, r2, r2
 800609e:	63b9      	str	r1, [r7, #56]	; 0x38
 80060a0:	415b      	adcs	r3, r3
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80060ac:	f7fa fd78 	bl	8000ba0 <__aeabi_uldivmod>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4ba5      	ldr	r3, [pc, #660]	; (800634c <UART_SetConfig+0x38c>)
 80060b6:	fba3 2302 	umull	r2, r3, r3, r2
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	011e      	lsls	r6, r3, #4
 80060be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c0:	461c      	mov	r4, r3
 80060c2:	f04f 0500 	mov.w	r5, #0
 80060c6:	4622      	mov	r2, r4
 80060c8:	462b      	mov	r3, r5
 80060ca:	1891      	adds	r1, r2, r2
 80060cc:	6339      	str	r1, [r7, #48]	; 0x30
 80060ce:	415b      	adcs	r3, r3
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
 80060d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80060d6:	1912      	adds	r2, r2, r4
 80060d8:	eb45 0303 	adc.w	r3, r5, r3
 80060dc:	f04f 0000 	mov.w	r0, #0
 80060e0:	f04f 0100 	mov.w	r1, #0
 80060e4:	00d9      	lsls	r1, r3, #3
 80060e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060ea:	00d0      	lsls	r0, r2, #3
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	1911      	adds	r1, r2, r4
 80060f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80060f4:	416b      	adcs	r3, r5
 80060f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	461a      	mov	r2, r3
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	1891      	adds	r1, r2, r2
 8006104:	62b9      	str	r1, [r7, #40]	; 0x28
 8006106:	415b      	adcs	r3, r3
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800610a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800610e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006112:	f7fa fd45 	bl	8000ba0 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4b8c      	ldr	r3, [pc, #560]	; (800634c <UART_SetConfig+0x38c>)
 800611c:	fba3 1302 	umull	r1, r3, r3, r2
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	2164      	movs	r1, #100	; 0x64
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	3332      	adds	r3, #50	; 0x32
 800612e:	4a87      	ldr	r2, [pc, #540]	; (800634c <UART_SetConfig+0x38c>)
 8006130:	fba2 2303 	umull	r2, r3, r2, r3
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800613c:	441e      	add	r6, r3
 800613e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006140:	4618      	mov	r0, r3
 8006142:	f04f 0100 	mov.w	r1, #0
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	1894      	adds	r4, r2, r2
 800614c:	623c      	str	r4, [r7, #32]
 800614e:	415b      	adcs	r3, r3
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
 8006152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006156:	1812      	adds	r2, r2, r0
 8006158:	eb41 0303 	adc.w	r3, r1, r3
 800615c:	f04f 0400 	mov.w	r4, #0
 8006160:	f04f 0500 	mov.w	r5, #0
 8006164:	00dd      	lsls	r5, r3, #3
 8006166:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800616a:	00d4      	lsls	r4, r2, #3
 800616c:	4622      	mov	r2, r4
 800616e:	462b      	mov	r3, r5
 8006170:	1814      	adds	r4, r2, r0
 8006172:	653c      	str	r4, [r7, #80]	; 0x50
 8006174:	414b      	adcs	r3, r1
 8006176:	657b      	str	r3, [r7, #84]	; 0x54
 8006178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	461a      	mov	r2, r3
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	1891      	adds	r1, r2, r2
 8006184:	61b9      	str	r1, [r7, #24]
 8006186:	415b      	adcs	r3, r3
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800618e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006192:	f7fa fd05 	bl	8000ba0 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4b6c      	ldr	r3, [pc, #432]	; (800634c <UART_SetConfig+0x38c>)
 800619c:	fba3 1302 	umull	r1, r3, r3, r2
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	2164      	movs	r1, #100	; 0x64
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	3332      	adds	r3, #50	; 0x32
 80061ae:	4a67      	ldr	r2, [pc, #412]	; (800634c <UART_SetConfig+0x38c>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f003 0207 	and.w	r2, r3, #7
 80061ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4432      	add	r2, r6
 80061c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061c2:	e0b9      	b.n	8006338 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c6:	461c      	mov	r4, r3
 80061c8:	f04f 0500 	mov.w	r5, #0
 80061cc:	4622      	mov	r2, r4
 80061ce:	462b      	mov	r3, r5
 80061d0:	1891      	adds	r1, r2, r2
 80061d2:	6139      	str	r1, [r7, #16]
 80061d4:	415b      	adcs	r3, r3
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061dc:	1912      	adds	r2, r2, r4
 80061de:	eb45 0303 	adc.w	r3, r5, r3
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	00d9      	lsls	r1, r3, #3
 80061ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061f0:	00d0      	lsls	r0, r2, #3
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	eb12 0804 	adds.w	r8, r2, r4
 80061fa:	eb43 0905 	adc.w	r9, r3, r5
 80061fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	f04f 0100 	mov.w	r1, #0
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	008b      	lsls	r3, r1, #2
 8006212:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006216:	0082      	lsls	r2, r0, #2
 8006218:	4640      	mov	r0, r8
 800621a:	4649      	mov	r1, r9
 800621c:	f7fa fcc0 	bl	8000ba0 <__aeabi_uldivmod>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4b49      	ldr	r3, [pc, #292]	; (800634c <UART_SetConfig+0x38c>)
 8006226:	fba3 2302 	umull	r2, r3, r3, r2
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	011e      	lsls	r6, r3, #4
 800622e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006230:	4618      	mov	r0, r3
 8006232:	f04f 0100 	mov.w	r1, #0
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	1894      	adds	r4, r2, r2
 800623c:	60bc      	str	r4, [r7, #8]
 800623e:	415b      	adcs	r3, r3
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006246:	1812      	adds	r2, r2, r0
 8006248:	eb41 0303 	adc.w	r3, r1, r3
 800624c:	f04f 0400 	mov.w	r4, #0
 8006250:	f04f 0500 	mov.w	r5, #0
 8006254:	00dd      	lsls	r5, r3, #3
 8006256:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800625a:	00d4      	lsls	r4, r2, #3
 800625c:	4622      	mov	r2, r4
 800625e:	462b      	mov	r3, r5
 8006260:	1814      	adds	r4, r2, r0
 8006262:	64bc      	str	r4, [r7, #72]	; 0x48
 8006264:	414b      	adcs	r3, r1
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4618      	mov	r0, r3
 800626e:	f04f 0100 	mov.w	r1, #0
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006280:	0082      	lsls	r2, r0, #2
 8006282:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006286:	f7fa fc8b 	bl	8000ba0 <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <UART_SetConfig+0x38c>)
 8006290:	fba3 1302 	umull	r1, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	2164      	movs	r1, #100	; 0x64
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	3332      	adds	r3, #50	; 0x32
 80062a2:	4a2a      	ldr	r2, [pc, #168]	; (800634c <UART_SetConfig+0x38c>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ae:	441e      	add	r6, r3
 80062b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b2:	4618      	mov	r0, r3
 80062b4:	f04f 0100 	mov.w	r1, #0
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	1894      	adds	r4, r2, r2
 80062be:	603c      	str	r4, [r7, #0]
 80062c0:	415b      	adcs	r3, r3
 80062c2:	607b      	str	r3, [r7, #4]
 80062c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c8:	1812      	adds	r2, r2, r0
 80062ca:	eb41 0303 	adc.w	r3, r1, r3
 80062ce:	f04f 0400 	mov.w	r4, #0
 80062d2:	f04f 0500 	mov.w	r5, #0
 80062d6:	00dd      	lsls	r5, r3, #3
 80062d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062dc:	00d4      	lsls	r4, r2, #3
 80062de:	4622      	mov	r2, r4
 80062e0:	462b      	mov	r3, r5
 80062e2:	eb12 0a00 	adds.w	sl, r2, r0
 80062e6:	eb43 0b01 	adc.w	fp, r3, r1
 80062ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f04f 0100 	mov.w	r1, #0
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	008b      	lsls	r3, r1, #2
 80062fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006302:	0082      	lsls	r2, r0, #2
 8006304:	4650      	mov	r0, sl
 8006306:	4659      	mov	r1, fp
 8006308:	f7fa fc4a 	bl	8000ba0 <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4b0e      	ldr	r3, [pc, #56]	; (800634c <UART_SetConfig+0x38c>)
 8006312:	fba3 1302 	umull	r1, r3, r3, r2
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	2164      	movs	r1, #100	; 0x64
 800631a:	fb01 f303 	mul.w	r3, r1, r3
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	3332      	adds	r3, #50	; 0x32
 8006324:	4a09      	ldr	r2, [pc, #36]	; (800634c <UART_SetConfig+0x38c>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	f003 020f 	and.w	r2, r3, #15
 8006330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4432      	add	r2, r6
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	377c      	adds	r7, #124	; 0x7c
 800633c:	46bd      	mov	sp, r7
 800633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006342:	bf00      	nop
 8006344:	40011000 	.word	0x40011000
 8006348:	40011400 	.word	0x40011400
 800634c:	51eb851f 	.word	0x51eb851f

08006350 <__errno>:
 8006350:	4b01      	ldr	r3, [pc, #4]	; (8006358 <__errno+0x8>)
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000038 	.word	0x20000038

0800635c <__libc_init_array>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	4d0d      	ldr	r5, [pc, #52]	; (8006394 <__libc_init_array+0x38>)
 8006360:	4c0d      	ldr	r4, [pc, #52]	; (8006398 <__libc_init_array+0x3c>)
 8006362:	1b64      	subs	r4, r4, r5
 8006364:	10a4      	asrs	r4, r4, #2
 8006366:	2600      	movs	r6, #0
 8006368:	42a6      	cmp	r6, r4
 800636a:	d109      	bne.n	8006380 <__libc_init_array+0x24>
 800636c:	4d0b      	ldr	r5, [pc, #44]	; (800639c <__libc_init_array+0x40>)
 800636e:	4c0c      	ldr	r4, [pc, #48]	; (80063a0 <__libc_init_array+0x44>)
 8006370:	f001 f89c 	bl	80074ac <_init>
 8006374:	1b64      	subs	r4, r4, r5
 8006376:	10a4      	asrs	r4, r4, #2
 8006378:	2600      	movs	r6, #0
 800637a:	42a6      	cmp	r6, r4
 800637c:	d105      	bne.n	800638a <__libc_init_array+0x2e>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	f855 3b04 	ldr.w	r3, [r5], #4
 8006384:	4798      	blx	r3
 8006386:	3601      	adds	r6, #1
 8006388:	e7ee      	b.n	8006368 <__libc_init_array+0xc>
 800638a:	f855 3b04 	ldr.w	r3, [r5], #4
 800638e:	4798      	blx	r3
 8006390:	3601      	adds	r6, #1
 8006392:	e7f2      	b.n	800637a <__libc_init_array+0x1e>
 8006394:	08007578 	.word	0x08007578
 8006398:	08007578 	.word	0x08007578
 800639c:	08007578 	.word	0x08007578
 80063a0:	0800757c 	.word	0x0800757c

080063a4 <memcpy>:
 80063a4:	440a      	add	r2, r1
 80063a6:	4291      	cmp	r1, r2
 80063a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063ac:	d100      	bne.n	80063b0 <memcpy+0xc>
 80063ae:	4770      	bx	lr
 80063b0:	b510      	push	{r4, lr}
 80063b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ba:	4291      	cmp	r1, r2
 80063bc:	d1f9      	bne.n	80063b2 <memcpy+0xe>
 80063be:	bd10      	pop	{r4, pc}

080063c0 <memset>:
 80063c0:	4402      	add	r2, r0
 80063c2:	4603      	mov	r3, r0
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d100      	bne.n	80063ca <memset+0xa>
 80063c8:	4770      	bx	lr
 80063ca:	f803 1b01 	strb.w	r1, [r3], #1
 80063ce:	e7f9      	b.n	80063c4 <memset+0x4>

080063d0 <ceil>:
 80063d0:	ec51 0b10 	vmov	r0, r1, d0
 80063d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80063dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80063e0:	2e13      	cmp	r6, #19
 80063e2:	ee10 5a10 	vmov	r5, s0
 80063e6:	ee10 8a10 	vmov	r8, s0
 80063ea:	460c      	mov	r4, r1
 80063ec:	dc30      	bgt.n	8006450 <ceil+0x80>
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	da12      	bge.n	8006418 <ceil+0x48>
 80063f2:	a335      	add	r3, pc, #212	; (adr r3, 80064c8 <ceil+0xf8>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f7f9 fef4 	bl	80001e4 <__adddf3>
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	f7fa fb36 	bl	8000a70 <__aeabi_dcmpgt>
 8006404:	b128      	cbz	r0, 8006412 <ceil+0x42>
 8006406:	2c00      	cmp	r4, #0
 8006408:	db55      	blt.n	80064b6 <ceil+0xe6>
 800640a:	432c      	orrs	r4, r5
 800640c:	d057      	beq.n	80064be <ceil+0xee>
 800640e:	4c30      	ldr	r4, [pc, #192]	; (80064d0 <ceil+0x100>)
 8006410:	2500      	movs	r5, #0
 8006412:	4621      	mov	r1, r4
 8006414:	4628      	mov	r0, r5
 8006416:	e025      	b.n	8006464 <ceil+0x94>
 8006418:	4f2e      	ldr	r7, [pc, #184]	; (80064d4 <ceil+0x104>)
 800641a:	4137      	asrs	r7, r6
 800641c:	ea01 0307 	and.w	r3, r1, r7
 8006420:	4303      	orrs	r3, r0
 8006422:	d01f      	beq.n	8006464 <ceil+0x94>
 8006424:	a328      	add	r3, pc, #160	; (adr r3, 80064c8 <ceil+0xf8>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7f9 fedb 	bl	80001e4 <__adddf3>
 800642e:	2200      	movs	r2, #0
 8006430:	2300      	movs	r3, #0
 8006432:	f7fa fb1d 	bl	8000a70 <__aeabi_dcmpgt>
 8006436:	2800      	cmp	r0, #0
 8006438:	d0eb      	beq.n	8006412 <ceil+0x42>
 800643a:	2c00      	cmp	r4, #0
 800643c:	bfc2      	ittt	gt
 800643e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006442:	fa43 f606 	asrgt.w	r6, r3, r6
 8006446:	19a4      	addgt	r4, r4, r6
 8006448:	ea24 0407 	bic.w	r4, r4, r7
 800644c:	2500      	movs	r5, #0
 800644e:	e7e0      	b.n	8006412 <ceil+0x42>
 8006450:	2e33      	cmp	r6, #51	; 0x33
 8006452:	dd0b      	ble.n	800646c <ceil+0x9c>
 8006454:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006458:	d104      	bne.n	8006464 <ceil+0x94>
 800645a:	ee10 2a10 	vmov	r2, s0
 800645e:	460b      	mov	r3, r1
 8006460:	f7f9 fec0 	bl	80001e4 <__adddf3>
 8006464:	ec41 0b10 	vmov	d0, r0, r1
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006474:	fa23 f707 	lsr.w	r7, r3, r7
 8006478:	4207      	tst	r7, r0
 800647a:	d0f3      	beq.n	8006464 <ceil+0x94>
 800647c:	a312      	add	r3, pc, #72	; (adr r3, 80064c8 <ceil+0xf8>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7f9 feaf 	bl	80001e4 <__adddf3>
 8006486:	2200      	movs	r2, #0
 8006488:	2300      	movs	r3, #0
 800648a:	f7fa faf1 	bl	8000a70 <__aeabi_dcmpgt>
 800648e:	2800      	cmp	r0, #0
 8006490:	d0bf      	beq.n	8006412 <ceil+0x42>
 8006492:	2c00      	cmp	r4, #0
 8006494:	dd02      	ble.n	800649c <ceil+0xcc>
 8006496:	2e14      	cmp	r6, #20
 8006498:	d103      	bne.n	80064a2 <ceil+0xd2>
 800649a:	3401      	adds	r4, #1
 800649c:	ea25 0507 	bic.w	r5, r5, r7
 80064a0:	e7b7      	b.n	8006412 <ceil+0x42>
 80064a2:	2301      	movs	r3, #1
 80064a4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80064a8:	fa03 f606 	lsl.w	r6, r3, r6
 80064ac:	4435      	add	r5, r6
 80064ae:	4545      	cmp	r5, r8
 80064b0:	bf38      	it	cc
 80064b2:	18e4      	addcc	r4, r4, r3
 80064b4:	e7f2      	b.n	800649c <ceil+0xcc>
 80064b6:	2500      	movs	r5, #0
 80064b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80064bc:	e7a9      	b.n	8006412 <ceil+0x42>
 80064be:	4625      	mov	r5, r4
 80064c0:	e7a7      	b.n	8006412 <ceil+0x42>
 80064c2:	bf00      	nop
 80064c4:	f3af 8000 	nop.w
 80064c8:	8800759c 	.word	0x8800759c
 80064cc:	7e37e43c 	.word	0x7e37e43c
 80064d0:	3ff00000 	.word	0x3ff00000
 80064d4:	000fffff 	.word	0x000fffff

080064d8 <pow>:
 80064d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064dc:	ec59 8b10 	vmov	r8, r9, d0
 80064e0:	ec57 6b11 	vmov	r6, r7, d1
 80064e4:	f000 f8dc 	bl	80066a0 <__ieee754_pow>
 80064e8:	4b4e      	ldr	r3, [pc, #312]	; (8006624 <pow+0x14c>)
 80064ea:	f993 3000 	ldrsb.w	r3, [r3]
 80064ee:	3301      	adds	r3, #1
 80064f0:	ec55 4b10 	vmov	r4, r5, d0
 80064f4:	d015      	beq.n	8006522 <pow+0x4a>
 80064f6:	4632      	mov	r2, r6
 80064f8:	463b      	mov	r3, r7
 80064fa:	4630      	mov	r0, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	f7fa fac1 	bl	8000a84 <__aeabi_dcmpun>
 8006502:	b970      	cbnz	r0, 8006522 <pow+0x4a>
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	4640      	mov	r0, r8
 800650a:	4649      	mov	r1, r9
 800650c:	f7fa faba 	bl	8000a84 <__aeabi_dcmpun>
 8006510:	2200      	movs	r2, #0
 8006512:	2300      	movs	r3, #0
 8006514:	b148      	cbz	r0, 800652a <pow+0x52>
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7fa fa81 	bl	8000a20 <__aeabi_dcmpeq>
 800651e:	2800      	cmp	r0, #0
 8006520:	d17d      	bne.n	800661e <pow+0x146>
 8006522:	ec45 4b10 	vmov	d0, r4, r5
 8006526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	f7fa fa77 	bl	8000a20 <__aeabi_dcmpeq>
 8006532:	b1e0      	cbz	r0, 800656e <pow+0x96>
 8006534:	2200      	movs	r2, #0
 8006536:	2300      	movs	r3, #0
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa fa70 	bl	8000a20 <__aeabi_dcmpeq>
 8006540:	2800      	cmp	r0, #0
 8006542:	d16c      	bne.n	800661e <pow+0x146>
 8006544:	ec47 6b10 	vmov	d0, r6, r7
 8006548:	f000 fe89 	bl	800725e <finite>
 800654c:	2800      	cmp	r0, #0
 800654e:	d0e8      	beq.n	8006522 <pow+0x4a>
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7fa fa6c 	bl	8000a34 <__aeabi_dcmplt>
 800655c:	2800      	cmp	r0, #0
 800655e:	d0e0      	beq.n	8006522 <pow+0x4a>
 8006560:	f7ff fef6 	bl	8006350 <__errno>
 8006564:	2321      	movs	r3, #33	; 0x21
 8006566:	6003      	str	r3, [r0, #0]
 8006568:	2400      	movs	r4, #0
 800656a:	4d2f      	ldr	r5, [pc, #188]	; (8006628 <pow+0x150>)
 800656c:	e7d9      	b.n	8006522 <pow+0x4a>
 800656e:	ec45 4b10 	vmov	d0, r4, r5
 8006572:	f000 fe74 	bl	800725e <finite>
 8006576:	bbb8      	cbnz	r0, 80065e8 <pow+0x110>
 8006578:	ec49 8b10 	vmov	d0, r8, r9
 800657c:	f000 fe6f 	bl	800725e <finite>
 8006580:	b390      	cbz	r0, 80065e8 <pow+0x110>
 8006582:	ec47 6b10 	vmov	d0, r6, r7
 8006586:	f000 fe6a 	bl	800725e <finite>
 800658a:	b368      	cbz	r0, 80065e8 <pow+0x110>
 800658c:	4622      	mov	r2, r4
 800658e:	462b      	mov	r3, r5
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7fa fa76 	bl	8000a84 <__aeabi_dcmpun>
 8006598:	b160      	cbz	r0, 80065b4 <pow+0xdc>
 800659a:	f7ff fed9 	bl	8006350 <__errno>
 800659e:	2321      	movs	r3, #33	; 0x21
 80065a0:	6003      	str	r3, [r0, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	f7fa f8fb 	bl	80007a4 <__aeabi_ddiv>
 80065ae:	4604      	mov	r4, r0
 80065b0:	460d      	mov	r5, r1
 80065b2:	e7b6      	b.n	8006522 <pow+0x4a>
 80065b4:	f7ff fecc 	bl	8006350 <__errno>
 80065b8:	2322      	movs	r3, #34	; 0x22
 80065ba:	6003      	str	r3, [r0, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	4640      	mov	r0, r8
 80065c2:	4649      	mov	r1, r9
 80065c4:	f7fa fa36 	bl	8000a34 <__aeabi_dcmplt>
 80065c8:	2400      	movs	r4, #0
 80065ca:	b158      	cbz	r0, 80065e4 <pow+0x10c>
 80065cc:	ec47 6b10 	vmov	d0, r6, r7
 80065d0:	f000 fe5a 	bl	8007288 <rint>
 80065d4:	4632      	mov	r2, r6
 80065d6:	ec51 0b10 	vmov	r0, r1, d0
 80065da:	463b      	mov	r3, r7
 80065dc:	f7fa fa20 	bl	8000a20 <__aeabi_dcmpeq>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d0c2      	beq.n	800656a <pow+0x92>
 80065e4:	4d11      	ldr	r5, [pc, #68]	; (800662c <pow+0x154>)
 80065e6:	e79c      	b.n	8006522 <pow+0x4a>
 80065e8:	2200      	movs	r2, #0
 80065ea:	2300      	movs	r3, #0
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7fa fa16 	bl	8000a20 <__aeabi_dcmpeq>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d094      	beq.n	8006522 <pow+0x4a>
 80065f8:	ec49 8b10 	vmov	d0, r8, r9
 80065fc:	f000 fe2f 	bl	800725e <finite>
 8006600:	2800      	cmp	r0, #0
 8006602:	d08e      	beq.n	8006522 <pow+0x4a>
 8006604:	ec47 6b10 	vmov	d0, r6, r7
 8006608:	f000 fe29 	bl	800725e <finite>
 800660c:	2800      	cmp	r0, #0
 800660e:	d088      	beq.n	8006522 <pow+0x4a>
 8006610:	f7ff fe9e 	bl	8006350 <__errno>
 8006614:	2322      	movs	r3, #34	; 0x22
 8006616:	6003      	str	r3, [r0, #0]
 8006618:	2400      	movs	r4, #0
 800661a:	2500      	movs	r5, #0
 800661c:	e781      	b.n	8006522 <pow+0x4a>
 800661e:	4d04      	ldr	r5, [pc, #16]	; (8006630 <pow+0x158>)
 8006620:	2400      	movs	r4, #0
 8006622:	e77e      	b.n	8006522 <pow+0x4a>
 8006624:	2000009c 	.word	0x2000009c
 8006628:	fff00000 	.word	0xfff00000
 800662c:	7ff00000 	.word	0x7ff00000
 8006630:	3ff00000 	.word	0x3ff00000

08006634 <sqrt>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	ed2d 8b02 	vpush	{d8}
 800663a:	ec55 4b10 	vmov	r4, r5, d0
 800663e:	f000 fd51 	bl	80070e4 <__ieee754_sqrt>
 8006642:	4b15      	ldr	r3, [pc, #84]	; (8006698 <sqrt+0x64>)
 8006644:	eeb0 8a40 	vmov.f32	s16, s0
 8006648:	eef0 8a60 	vmov.f32	s17, s1
 800664c:	f993 3000 	ldrsb.w	r3, [r3]
 8006650:	3301      	adds	r3, #1
 8006652:	d019      	beq.n	8006688 <sqrt+0x54>
 8006654:	4622      	mov	r2, r4
 8006656:	462b      	mov	r3, r5
 8006658:	4620      	mov	r0, r4
 800665a:	4629      	mov	r1, r5
 800665c:	f7fa fa12 	bl	8000a84 <__aeabi_dcmpun>
 8006660:	b990      	cbnz	r0, 8006688 <sqrt+0x54>
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7fa f9e3 	bl	8000a34 <__aeabi_dcmplt>
 800666e:	b158      	cbz	r0, 8006688 <sqrt+0x54>
 8006670:	f7ff fe6e 	bl	8006350 <__errno>
 8006674:	2321      	movs	r3, #33	; 0x21
 8006676:	6003      	str	r3, [r0, #0]
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	4610      	mov	r0, r2
 800667e:	4619      	mov	r1, r3
 8006680:	f7fa f890 	bl	80007a4 <__aeabi_ddiv>
 8006684:	ec41 0b18 	vmov	d8, r0, r1
 8006688:	eeb0 0a48 	vmov.f32	s0, s16
 800668c:	eef0 0a68 	vmov.f32	s1, s17
 8006690:	ecbd 8b02 	vpop	{d8}
 8006694:	bd38      	pop	{r3, r4, r5, pc}
 8006696:	bf00      	nop
 8006698:	2000009c 	.word	0x2000009c
 800669c:	00000000 	.word	0x00000000

080066a0 <__ieee754_pow>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	ed2d 8b06 	vpush	{d8-d10}
 80066a8:	b08d      	sub	sp, #52	; 0x34
 80066aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80066ae:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80066b2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80066b6:	ea56 0100 	orrs.w	r1, r6, r0
 80066ba:	ec53 2b10 	vmov	r2, r3, d0
 80066be:	f000 84d1 	beq.w	8007064 <__ieee754_pow+0x9c4>
 80066c2:	497f      	ldr	r1, [pc, #508]	; (80068c0 <__ieee754_pow+0x220>)
 80066c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80066c8:	428c      	cmp	r4, r1
 80066ca:	ee10 8a10 	vmov	r8, s0
 80066ce:	4699      	mov	r9, r3
 80066d0:	dc09      	bgt.n	80066e6 <__ieee754_pow+0x46>
 80066d2:	d103      	bne.n	80066dc <__ieee754_pow+0x3c>
 80066d4:	b97a      	cbnz	r2, 80066f6 <__ieee754_pow+0x56>
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	dd02      	ble.n	80066e0 <__ieee754_pow+0x40>
 80066da:	e00c      	b.n	80066f6 <__ieee754_pow+0x56>
 80066dc:	428e      	cmp	r6, r1
 80066de:	dc02      	bgt.n	80066e6 <__ieee754_pow+0x46>
 80066e0:	428e      	cmp	r6, r1
 80066e2:	d110      	bne.n	8006706 <__ieee754_pow+0x66>
 80066e4:	b178      	cbz	r0, 8006706 <__ieee754_pow+0x66>
 80066e6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80066ea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80066ee:	ea54 0308 	orrs.w	r3, r4, r8
 80066f2:	f000 84b7 	beq.w	8007064 <__ieee754_pow+0x9c4>
 80066f6:	4873      	ldr	r0, [pc, #460]	; (80068c4 <__ieee754_pow+0x224>)
 80066f8:	b00d      	add	sp, #52	; 0x34
 80066fa:	ecbd 8b06 	vpop	{d8-d10}
 80066fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006702:	f000 bdb9 	b.w	8007278 <nan>
 8006706:	f1b9 0f00 	cmp.w	r9, #0
 800670a:	da36      	bge.n	800677a <__ieee754_pow+0xda>
 800670c:	496e      	ldr	r1, [pc, #440]	; (80068c8 <__ieee754_pow+0x228>)
 800670e:	428e      	cmp	r6, r1
 8006710:	dc51      	bgt.n	80067b6 <__ieee754_pow+0x116>
 8006712:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006716:	428e      	cmp	r6, r1
 8006718:	f340 84af 	ble.w	800707a <__ieee754_pow+0x9da>
 800671c:	1531      	asrs	r1, r6, #20
 800671e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006722:	2914      	cmp	r1, #20
 8006724:	dd0f      	ble.n	8006746 <__ieee754_pow+0xa6>
 8006726:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800672a:	fa20 fc01 	lsr.w	ip, r0, r1
 800672e:	fa0c f101 	lsl.w	r1, ip, r1
 8006732:	4281      	cmp	r1, r0
 8006734:	f040 84a1 	bne.w	800707a <__ieee754_pow+0x9da>
 8006738:	f00c 0c01 	and.w	ip, ip, #1
 800673c:	f1cc 0102 	rsb	r1, ip, #2
 8006740:	9100      	str	r1, [sp, #0]
 8006742:	b180      	cbz	r0, 8006766 <__ieee754_pow+0xc6>
 8006744:	e059      	b.n	80067fa <__ieee754_pow+0x15a>
 8006746:	2800      	cmp	r0, #0
 8006748:	d155      	bne.n	80067f6 <__ieee754_pow+0x156>
 800674a:	f1c1 0114 	rsb	r1, r1, #20
 800674e:	fa46 fc01 	asr.w	ip, r6, r1
 8006752:	fa0c f101 	lsl.w	r1, ip, r1
 8006756:	42b1      	cmp	r1, r6
 8006758:	f040 848c 	bne.w	8007074 <__ieee754_pow+0x9d4>
 800675c:	f00c 0c01 	and.w	ip, ip, #1
 8006760:	f1cc 0102 	rsb	r1, ip, #2
 8006764:	9100      	str	r1, [sp, #0]
 8006766:	4959      	ldr	r1, [pc, #356]	; (80068cc <__ieee754_pow+0x22c>)
 8006768:	428e      	cmp	r6, r1
 800676a:	d12d      	bne.n	80067c8 <__ieee754_pow+0x128>
 800676c:	2f00      	cmp	r7, #0
 800676e:	da79      	bge.n	8006864 <__ieee754_pow+0x1c4>
 8006770:	4956      	ldr	r1, [pc, #344]	; (80068cc <__ieee754_pow+0x22c>)
 8006772:	2000      	movs	r0, #0
 8006774:	f7fa f816 	bl	80007a4 <__aeabi_ddiv>
 8006778:	e016      	b.n	80067a8 <__ieee754_pow+0x108>
 800677a:	2100      	movs	r1, #0
 800677c:	9100      	str	r1, [sp, #0]
 800677e:	2800      	cmp	r0, #0
 8006780:	d13b      	bne.n	80067fa <__ieee754_pow+0x15a>
 8006782:	494f      	ldr	r1, [pc, #316]	; (80068c0 <__ieee754_pow+0x220>)
 8006784:	428e      	cmp	r6, r1
 8006786:	d1ee      	bne.n	8006766 <__ieee754_pow+0xc6>
 8006788:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800678c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006790:	ea53 0308 	orrs.w	r3, r3, r8
 8006794:	f000 8466 	beq.w	8007064 <__ieee754_pow+0x9c4>
 8006798:	4b4d      	ldr	r3, [pc, #308]	; (80068d0 <__ieee754_pow+0x230>)
 800679a:	429c      	cmp	r4, r3
 800679c:	dd0d      	ble.n	80067ba <__ieee754_pow+0x11a>
 800679e:	2f00      	cmp	r7, #0
 80067a0:	f280 8464 	bge.w	800706c <__ieee754_pow+0x9cc>
 80067a4:	2000      	movs	r0, #0
 80067a6:	2100      	movs	r1, #0
 80067a8:	ec41 0b10 	vmov	d0, r0, r1
 80067ac:	b00d      	add	sp, #52	; 0x34
 80067ae:	ecbd 8b06 	vpop	{d8-d10}
 80067b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b6:	2102      	movs	r1, #2
 80067b8:	e7e0      	b.n	800677c <__ieee754_pow+0xdc>
 80067ba:	2f00      	cmp	r7, #0
 80067bc:	daf2      	bge.n	80067a4 <__ieee754_pow+0x104>
 80067be:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80067c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80067c6:	e7ef      	b.n	80067a8 <__ieee754_pow+0x108>
 80067c8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80067cc:	d104      	bne.n	80067d8 <__ieee754_pow+0x138>
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f7f9 febd 	bl	8000550 <__aeabi_dmul>
 80067d6:	e7e7      	b.n	80067a8 <__ieee754_pow+0x108>
 80067d8:	493e      	ldr	r1, [pc, #248]	; (80068d4 <__ieee754_pow+0x234>)
 80067da:	428f      	cmp	r7, r1
 80067dc:	d10d      	bne.n	80067fa <__ieee754_pow+0x15a>
 80067de:	f1b9 0f00 	cmp.w	r9, #0
 80067e2:	db0a      	blt.n	80067fa <__ieee754_pow+0x15a>
 80067e4:	ec43 2b10 	vmov	d0, r2, r3
 80067e8:	b00d      	add	sp, #52	; 0x34
 80067ea:	ecbd 8b06 	vpop	{d8-d10}
 80067ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f2:	f000 bc77 	b.w	80070e4 <__ieee754_sqrt>
 80067f6:	2100      	movs	r1, #0
 80067f8:	9100      	str	r1, [sp, #0]
 80067fa:	ec43 2b10 	vmov	d0, r2, r3
 80067fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006802:	f000 fd23 	bl	800724c <fabs>
 8006806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680a:	ec51 0b10 	vmov	r0, r1, d0
 800680e:	f1b8 0f00 	cmp.w	r8, #0
 8006812:	d12a      	bne.n	800686a <__ieee754_pow+0x1ca>
 8006814:	b12c      	cbz	r4, 8006822 <__ieee754_pow+0x182>
 8006816:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80068cc <__ieee754_pow+0x22c>
 800681a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800681e:	45e6      	cmp	lr, ip
 8006820:	d123      	bne.n	800686a <__ieee754_pow+0x1ca>
 8006822:	2f00      	cmp	r7, #0
 8006824:	da05      	bge.n	8006832 <__ieee754_pow+0x192>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	2000      	movs	r0, #0
 800682c:	4927      	ldr	r1, [pc, #156]	; (80068cc <__ieee754_pow+0x22c>)
 800682e:	f7f9 ffb9 	bl	80007a4 <__aeabi_ddiv>
 8006832:	f1b9 0f00 	cmp.w	r9, #0
 8006836:	dab7      	bge.n	80067a8 <__ieee754_pow+0x108>
 8006838:	9b00      	ldr	r3, [sp, #0]
 800683a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800683e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006842:	4323      	orrs	r3, r4
 8006844:	d108      	bne.n	8006858 <__ieee754_pow+0x1b8>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	f7f9 fcc7 	bl	80001e0 <__aeabi_dsub>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	e78d      	b.n	8006774 <__ieee754_pow+0xd4>
 8006858:	9b00      	ldr	r3, [sp, #0]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d1a4      	bne.n	80067a8 <__ieee754_pow+0x108>
 800685e:	4602      	mov	r2, r0
 8006860:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	e79e      	b.n	80067a8 <__ieee754_pow+0x108>
 800686a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800686e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8006872:	950a      	str	r5, [sp, #40]	; 0x28
 8006874:	9d00      	ldr	r5, [sp, #0]
 8006876:	46ac      	mov	ip, r5
 8006878:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800687a:	ea5c 0505 	orrs.w	r5, ip, r5
 800687e:	d0e4      	beq.n	800684a <__ieee754_pow+0x1aa>
 8006880:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <__ieee754_pow+0x238>)
 8006882:	429e      	cmp	r6, r3
 8006884:	f340 80fc 	ble.w	8006a80 <__ieee754_pow+0x3e0>
 8006888:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800688c:	429e      	cmp	r6, r3
 800688e:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <__ieee754_pow+0x230>)
 8006890:	dd07      	ble.n	80068a2 <__ieee754_pow+0x202>
 8006892:	429c      	cmp	r4, r3
 8006894:	dc0a      	bgt.n	80068ac <__ieee754_pow+0x20c>
 8006896:	2f00      	cmp	r7, #0
 8006898:	da84      	bge.n	80067a4 <__ieee754_pow+0x104>
 800689a:	a307      	add	r3, pc, #28	; (adr r3, 80068b8 <__ieee754_pow+0x218>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	e795      	b.n	80067ce <__ieee754_pow+0x12e>
 80068a2:	429c      	cmp	r4, r3
 80068a4:	dbf7      	blt.n	8006896 <__ieee754_pow+0x1f6>
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <__ieee754_pow+0x22c>)
 80068a8:	429c      	cmp	r4, r3
 80068aa:	dd17      	ble.n	80068dc <__ieee754_pow+0x23c>
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	dcf4      	bgt.n	800689a <__ieee754_pow+0x1fa>
 80068b0:	e778      	b.n	80067a4 <__ieee754_pow+0x104>
 80068b2:	bf00      	nop
 80068b4:	f3af 8000 	nop.w
 80068b8:	8800759c 	.word	0x8800759c
 80068bc:	7e37e43c 	.word	0x7e37e43c
 80068c0:	7ff00000 	.word	0x7ff00000
 80068c4:	0800752c 	.word	0x0800752c
 80068c8:	433fffff 	.word	0x433fffff
 80068cc:	3ff00000 	.word	0x3ff00000
 80068d0:	3fefffff 	.word	0x3fefffff
 80068d4:	3fe00000 	.word	0x3fe00000
 80068d8:	41e00000 	.word	0x41e00000
 80068dc:	4b64      	ldr	r3, [pc, #400]	; (8006a70 <__ieee754_pow+0x3d0>)
 80068de:	2200      	movs	r2, #0
 80068e0:	f7f9 fc7e 	bl	80001e0 <__aeabi_dsub>
 80068e4:	a356      	add	r3, pc, #344	; (adr r3, 8006a40 <__ieee754_pow+0x3a0>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	4604      	mov	r4, r0
 80068ec:	460d      	mov	r5, r1
 80068ee:	f7f9 fe2f 	bl	8000550 <__aeabi_dmul>
 80068f2:	a355      	add	r3, pc, #340	; (adr r3, 8006a48 <__ieee754_pow+0x3a8>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	4606      	mov	r6, r0
 80068fa:	460f      	mov	r7, r1
 80068fc:	4620      	mov	r0, r4
 80068fe:	4629      	mov	r1, r5
 8006900:	f7f9 fe26 	bl	8000550 <__aeabi_dmul>
 8006904:	4b5b      	ldr	r3, [pc, #364]	; (8006a74 <__ieee754_pow+0x3d4>)
 8006906:	4682      	mov	sl, r0
 8006908:	468b      	mov	fp, r1
 800690a:	2200      	movs	r2, #0
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fe1e 	bl	8000550 <__aeabi_dmul>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	a14d      	add	r1, pc, #308	; (adr r1, 8006a50 <__ieee754_pow+0x3b0>)
 800691a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800691e:	f7f9 fc5f 	bl	80001e0 <__aeabi_dsub>
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	f7f9 fe13 	bl	8000550 <__aeabi_dmul>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	2000      	movs	r0, #0
 8006930:	4951      	ldr	r1, [pc, #324]	; (8006a78 <__ieee754_pow+0x3d8>)
 8006932:	f7f9 fc55 	bl	80001e0 <__aeabi_dsub>
 8006936:	4622      	mov	r2, r4
 8006938:	4680      	mov	r8, r0
 800693a:	4689      	mov	r9, r1
 800693c:	462b      	mov	r3, r5
 800693e:	4620      	mov	r0, r4
 8006940:	4629      	mov	r1, r5
 8006942:	f7f9 fe05 	bl	8000550 <__aeabi_dmul>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4640      	mov	r0, r8
 800694c:	4649      	mov	r1, r9
 800694e:	f7f9 fdff 	bl	8000550 <__aeabi_dmul>
 8006952:	a341      	add	r3, pc, #260	; (adr r3, 8006a58 <__ieee754_pow+0x3b8>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 fdfa 	bl	8000550 <__aeabi_dmul>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4650      	mov	r0, sl
 8006962:	4659      	mov	r1, fp
 8006964:	f7f9 fc3c 	bl	80001e0 <__aeabi_dsub>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	f7f9 fc36 	bl	80001e4 <__adddf3>
 8006978:	2400      	movs	r4, #0
 800697a:	4632      	mov	r2, r6
 800697c:	463b      	mov	r3, r7
 800697e:	4620      	mov	r0, r4
 8006980:	460d      	mov	r5, r1
 8006982:	f7f9 fc2d 	bl	80001e0 <__aeabi_dsub>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4640      	mov	r0, r8
 800698c:	4649      	mov	r1, r9
 800698e:	f7f9 fc27 	bl	80001e0 <__aeabi_dsub>
 8006992:	9b00      	ldr	r3, [sp, #0]
 8006994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006996:	3b01      	subs	r3, #1
 8006998:	4313      	orrs	r3, r2
 800699a:	4682      	mov	sl, r0
 800699c:	468b      	mov	fp, r1
 800699e:	f040 81f1 	bne.w	8006d84 <__ieee754_pow+0x6e4>
 80069a2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006a60 <__ieee754_pow+0x3c0>
 80069a6:	eeb0 8a47 	vmov.f32	s16, s14
 80069aa:	eef0 8a67 	vmov.f32	s17, s15
 80069ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069b2:	2600      	movs	r6, #0
 80069b4:	4632      	mov	r2, r6
 80069b6:	463b      	mov	r3, r7
 80069b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069bc:	f7f9 fc10 	bl	80001e0 <__aeabi_dsub>
 80069c0:	4622      	mov	r2, r4
 80069c2:	462b      	mov	r3, r5
 80069c4:	f7f9 fdc4 	bl	8000550 <__aeabi_dmul>
 80069c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069cc:	4680      	mov	r8, r0
 80069ce:	4689      	mov	r9, r1
 80069d0:	4650      	mov	r0, sl
 80069d2:	4659      	mov	r1, fp
 80069d4:	f7f9 fdbc 	bl	8000550 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4640      	mov	r0, r8
 80069de:	4649      	mov	r1, r9
 80069e0:	f7f9 fc00 	bl	80001e4 <__adddf3>
 80069e4:	4632      	mov	r2, r6
 80069e6:	463b      	mov	r3, r7
 80069e8:	4680      	mov	r8, r0
 80069ea:	4689      	mov	r9, r1
 80069ec:	4620      	mov	r0, r4
 80069ee:	4629      	mov	r1, r5
 80069f0:	f7f9 fdae 	bl	8000550 <__aeabi_dmul>
 80069f4:	460b      	mov	r3, r1
 80069f6:	4604      	mov	r4, r0
 80069f8:	460d      	mov	r5, r1
 80069fa:	4602      	mov	r2, r0
 80069fc:	4649      	mov	r1, r9
 80069fe:	4640      	mov	r0, r8
 8006a00:	f7f9 fbf0 	bl	80001e4 <__adddf3>
 8006a04:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <__ieee754_pow+0x3dc>)
 8006a06:	4299      	cmp	r1, r3
 8006a08:	ec45 4b19 	vmov	d9, r4, r5
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
 8006a10:	468b      	mov	fp, r1
 8006a12:	f340 82fe 	ble.w	8007012 <__ieee754_pow+0x972>
 8006a16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006a1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006a1e:	4303      	orrs	r3, r0
 8006a20:	f000 81f0 	beq.w	8006e04 <__ieee754_pow+0x764>
 8006a24:	a310      	add	r3, pc, #64	; (adr r3, 8006a68 <__ieee754_pow+0x3c8>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	ec51 0b18 	vmov	r0, r1, d8
 8006a2e:	f7f9 fd8f 	bl	8000550 <__aeabi_dmul>
 8006a32:	a30d      	add	r3, pc, #52	; (adr r3, 8006a68 <__ieee754_pow+0x3c8>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	e6cb      	b.n	80067d2 <__ieee754_pow+0x132>
 8006a3a:	bf00      	nop
 8006a3c:	f3af 8000 	nop.w
 8006a40:	60000000 	.word	0x60000000
 8006a44:	3ff71547 	.word	0x3ff71547
 8006a48:	f85ddf44 	.word	0xf85ddf44
 8006a4c:	3e54ae0b 	.word	0x3e54ae0b
 8006a50:	55555555 	.word	0x55555555
 8006a54:	3fd55555 	.word	0x3fd55555
 8006a58:	652b82fe 	.word	0x652b82fe
 8006a5c:	3ff71547 	.word	0x3ff71547
 8006a60:	00000000 	.word	0x00000000
 8006a64:	bff00000 	.word	0xbff00000
 8006a68:	8800759c 	.word	0x8800759c
 8006a6c:	7e37e43c 	.word	0x7e37e43c
 8006a70:	3ff00000 	.word	0x3ff00000
 8006a74:	3fd00000 	.word	0x3fd00000
 8006a78:	3fe00000 	.word	0x3fe00000
 8006a7c:	408fffff 	.word	0x408fffff
 8006a80:	4bd7      	ldr	r3, [pc, #860]	; (8006de0 <__ieee754_pow+0x740>)
 8006a82:	ea03 0309 	and.w	r3, r3, r9
 8006a86:	2200      	movs	r2, #0
 8006a88:	b92b      	cbnz	r3, 8006a96 <__ieee754_pow+0x3f6>
 8006a8a:	4bd6      	ldr	r3, [pc, #856]	; (8006de4 <__ieee754_pow+0x744>)
 8006a8c:	f7f9 fd60 	bl	8000550 <__aeabi_dmul>
 8006a90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006a94:	460c      	mov	r4, r1
 8006a96:	1523      	asrs	r3, r4, #20
 8006a98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a9c:	4413      	add	r3, r2
 8006a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa0:	4bd1      	ldr	r3, [pc, #836]	; (8006de8 <__ieee754_pow+0x748>)
 8006aa2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006aa6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006ab0:	dd08      	ble.n	8006ac4 <__ieee754_pow+0x424>
 8006ab2:	4bce      	ldr	r3, [pc, #824]	; (8006dec <__ieee754_pow+0x74c>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	f340 8163 	ble.w	8006d80 <__ieee754_pow+0x6e0>
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	3301      	adds	r3, #1
 8006abe:	9309      	str	r3, [sp, #36]	; 0x24
 8006ac0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006ac4:	2400      	movs	r4, #0
 8006ac6:	00e3      	lsls	r3, r4, #3
 8006ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aca:	4bc9      	ldr	r3, [pc, #804]	; (8006df0 <__ieee754_pow+0x750>)
 8006acc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ad0:	ed93 7b00 	vldr	d7, [r3]
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	ec53 2b17 	vmov	r2, r3, d7
 8006ada:	eeb0 8a47 	vmov.f32	s16, s14
 8006ade:	eef0 8a67 	vmov.f32	s17, s15
 8006ae2:	4682      	mov	sl, r0
 8006ae4:	f7f9 fb7c 	bl	80001e0 <__aeabi_dsub>
 8006ae8:	4652      	mov	r2, sl
 8006aea:	4606      	mov	r6, r0
 8006aec:	460f      	mov	r7, r1
 8006aee:	462b      	mov	r3, r5
 8006af0:	ec51 0b18 	vmov	r0, r1, d8
 8006af4:	f7f9 fb76 	bl	80001e4 <__adddf3>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	2000      	movs	r0, #0
 8006afe:	49bd      	ldr	r1, [pc, #756]	; (8006df4 <__ieee754_pow+0x754>)
 8006b00:	f7f9 fe50 	bl	80007a4 <__aeabi_ddiv>
 8006b04:	ec41 0b19 	vmov	d9, r0, r1
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fd1e 	bl	8000550 <__aeabi_dmul>
 8006b14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b20:	2300      	movs	r3, #0
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006b28:	46ab      	mov	fp, r5
 8006b2a:	106d      	asrs	r5, r5, #1
 8006b2c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006b30:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006b34:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4614      	mov	r4, r2
 8006b40:	461d      	mov	r5, r3
 8006b42:	f7f9 fd05 	bl	8000550 <__aeabi_dmul>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	f7f9 fb47 	bl	80001e0 <__aeabi_dsub>
 8006b52:	ec53 2b18 	vmov	r2, r3, d8
 8006b56:	4606      	mov	r6, r0
 8006b58:	460f      	mov	r7, r1
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 fb3f 	bl	80001e0 <__aeabi_dsub>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4650      	mov	r0, sl
 8006b68:	4659      	mov	r1, fp
 8006b6a:	f7f9 fb39 	bl	80001e0 <__aeabi_dsub>
 8006b6e:	4642      	mov	r2, r8
 8006b70:	464b      	mov	r3, r9
 8006b72:	f7f9 fced 	bl	8000550 <__aeabi_dmul>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	f7f9 fb2f 	bl	80001e0 <__aeabi_dsub>
 8006b82:	ec53 2b19 	vmov	r2, r3, d9
 8006b86:	f7f9 fce3 	bl	8000550 <__aeabi_dmul>
 8006b8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b8e:	ec41 0b18 	vmov	d8, r0, r1
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	f7f9 fcdb 	bl	8000550 <__aeabi_dmul>
 8006b9a:	a37d      	add	r3, pc, #500	; (adr r3, 8006d90 <__ieee754_pow+0x6f0>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	f7f9 fcd4 	bl	8000550 <__aeabi_dmul>
 8006ba8:	a37b      	add	r3, pc, #492	; (adr r3, 8006d98 <__ieee754_pow+0x6f8>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 fb19 	bl	80001e4 <__adddf3>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	f7f9 fccb 	bl	8000550 <__aeabi_dmul>
 8006bba:	a379      	add	r3, pc, #484	; (adr r3, 8006da0 <__ieee754_pow+0x700>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fb10 	bl	80001e4 <__adddf3>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	f7f9 fcc2 	bl	8000550 <__aeabi_dmul>
 8006bcc:	a376      	add	r3, pc, #472	; (adr r3, 8006da8 <__ieee754_pow+0x708>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 fb07 	bl	80001e4 <__adddf3>
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	462b      	mov	r3, r5
 8006bda:	f7f9 fcb9 	bl	8000550 <__aeabi_dmul>
 8006bde:	a374      	add	r3, pc, #464	; (adr r3, 8006db0 <__ieee754_pow+0x710>)
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	f7f9 fafe 	bl	80001e4 <__adddf3>
 8006be8:	4622      	mov	r2, r4
 8006bea:	462b      	mov	r3, r5
 8006bec:	f7f9 fcb0 	bl	8000550 <__aeabi_dmul>
 8006bf0:	a371      	add	r3, pc, #452	; (adr r3, 8006db8 <__ieee754_pow+0x718>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f7f9 faf5 	bl	80001e4 <__adddf3>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	460f      	mov	r7, r1
 8006c00:	462b      	mov	r3, r5
 8006c02:	4620      	mov	r0, r4
 8006c04:	4629      	mov	r1, r5
 8006c06:	f7f9 fca3 	bl	8000550 <__aeabi_dmul>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4630      	mov	r0, r6
 8006c10:	4639      	mov	r1, r7
 8006c12:	f7f9 fc9d 	bl	8000550 <__aeabi_dmul>
 8006c16:	4642      	mov	r2, r8
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c22:	f7f9 fadf 	bl	80001e4 <__adddf3>
 8006c26:	ec53 2b18 	vmov	r2, r3, d8
 8006c2a:	f7f9 fc91 	bl	8000550 <__aeabi_dmul>
 8006c2e:	4622      	mov	r2, r4
 8006c30:	462b      	mov	r3, r5
 8006c32:	f7f9 fad7 	bl	80001e4 <__adddf3>
 8006c36:	4642      	mov	r2, r8
 8006c38:	4682      	mov	sl, r0
 8006c3a:	468b      	mov	fp, r1
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7f9 fc85 	bl	8000550 <__aeabi_dmul>
 8006c46:	4b6c      	ldr	r3, [pc, #432]	; (8006df8 <__ieee754_pow+0x758>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	460f      	mov	r7, r1
 8006c4e:	f7f9 fac9 	bl	80001e4 <__adddf3>
 8006c52:	4652      	mov	r2, sl
 8006c54:	465b      	mov	r3, fp
 8006c56:	f7f9 fac5 	bl	80001e4 <__adddf3>
 8006c5a:	9c04      	ldr	r4, [sp, #16]
 8006c5c:	460d      	mov	r5, r1
 8006c5e:	4622      	mov	r2, r4
 8006c60:	460b      	mov	r3, r1
 8006c62:	4640      	mov	r0, r8
 8006c64:	4649      	mov	r1, r9
 8006c66:	f7f9 fc73 	bl	8000550 <__aeabi_dmul>
 8006c6a:	4b63      	ldr	r3, [pc, #396]	; (8006df8 <__ieee754_pow+0x758>)
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	4689      	mov	r9, r1
 8006c70:	2200      	movs	r2, #0
 8006c72:	4620      	mov	r0, r4
 8006c74:	4629      	mov	r1, r5
 8006c76:	f7f9 fab3 	bl	80001e0 <__aeabi_dsub>
 8006c7a:	4632      	mov	r2, r6
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	f7f9 faaf 	bl	80001e0 <__aeabi_dsub>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4650      	mov	r0, sl
 8006c88:	4659      	mov	r1, fp
 8006c8a:	f7f9 faa9 	bl	80001e0 <__aeabi_dsub>
 8006c8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c92:	f7f9 fc5d 	bl	8000550 <__aeabi_dmul>
 8006c96:	4622      	mov	r2, r4
 8006c98:	4606      	mov	r6, r0
 8006c9a:	460f      	mov	r7, r1
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	ec51 0b18 	vmov	r0, r1, d8
 8006ca2:	f7f9 fc55 	bl	8000550 <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fa99 	bl	80001e4 <__adddf3>
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460f      	mov	r7, r1
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4640      	mov	r0, r8
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	f7f9 fa91 	bl	80001e4 <__adddf3>
 8006cc2:	9c04      	ldr	r4, [sp, #16]
 8006cc4:	a33e      	add	r3, pc, #248	; (adr r3, 8006dc0 <__ieee754_pow+0x720>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	460d      	mov	r5, r1
 8006cce:	f7f9 fc3f 	bl	8000550 <__aeabi_dmul>
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	ec41 0b18 	vmov	d8, r0, r1
 8006cd8:	464b      	mov	r3, r9
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f7f9 fa7f 	bl	80001e0 <__aeabi_dsub>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 fa79 	bl	80001e0 <__aeabi_dsub>
 8006cee:	a336      	add	r3, pc, #216	; (adr r3, 8006dc8 <__ieee754_pow+0x728>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f7f9 fc2c 	bl	8000550 <__aeabi_dmul>
 8006cf8:	a335      	add	r3, pc, #212	; (adr r3, 8006dd0 <__ieee754_pow+0x730>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	4620      	mov	r0, r4
 8006d04:	4629      	mov	r1, r5
 8006d06:	f7f9 fc23 	bl	8000550 <__aeabi_dmul>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4630      	mov	r0, r6
 8006d10:	4639      	mov	r1, r7
 8006d12:	f7f9 fa67 	bl	80001e4 <__adddf3>
 8006d16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d18:	4b38      	ldr	r3, [pc, #224]	; (8006dfc <__ieee754_pow+0x75c>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f7f9 fa60 	bl	80001e4 <__adddf3>
 8006d24:	4682      	mov	sl, r0
 8006d26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d28:	468b      	mov	fp, r1
 8006d2a:	f7f9 fba7 	bl	800047c <__aeabi_i2d>
 8006d2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d30:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <__ieee754_pow+0x760>)
 8006d32:	4413      	add	r3, r2
 8006d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d38:	4606      	mov	r6, r0
 8006d3a:	460f      	mov	r7, r1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	465b      	mov	r3, fp
 8006d40:	ec51 0b18 	vmov	r0, r1, d8
 8006d44:	f7f9 fa4e 	bl	80001e4 <__adddf3>
 8006d48:	4642      	mov	r2, r8
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	f7f9 fa4a 	bl	80001e4 <__adddf3>
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	f7f9 fa46 	bl	80001e4 <__adddf3>
 8006d58:	9c04      	ldr	r4, [sp, #16]
 8006d5a:	4632      	mov	r2, r6
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	4620      	mov	r0, r4
 8006d60:	460d      	mov	r5, r1
 8006d62:	f7f9 fa3d 	bl	80001e0 <__aeabi_dsub>
 8006d66:	4642      	mov	r2, r8
 8006d68:	464b      	mov	r3, r9
 8006d6a:	f7f9 fa39 	bl	80001e0 <__aeabi_dsub>
 8006d6e:	ec53 2b18 	vmov	r2, r3, d8
 8006d72:	f7f9 fa35 	bl	80001e0 <__aeabi_dsub>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	e606      	b.n	800698e <__ieee754_pow+0x2ee>
 8006d80:	2401      	movs	r4, #1
 8006d82:	e6a0      	b.n	8006ac6 <__ieee754_pow+0x426>
 8006d84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006dd8 <__ieee754_pow+0x738>
 8006d88:	e60d      	b.n	80069a6 <__ieee754_pow+0x306>
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w
 8006d90:	4a454eef 	.word	0x4a454eef
 8006d94:	3fca7e28 	.word	0x3fca7e28
 8006d98:	93c9db65 	.word	0x93c9db65
 8006d9c:	3fcd864a 	.word	0x3fcd864a
 8006da0:	a91d4101 	.word	0xa91d4101
 8006da4:	3fd17460 	.word	0x3fd17460
 8006da8:	518f264d 	.word	0x518f264d
 8006dac:	3fd55555 	.word	0x3fd55555
 8006db0:	db6fabff 	.word	0xdb6fabff
 8006db4:	3fdb6db6 	.word	0x3fdb6db6
 8006db8:	33333303 	.word	0x33333303
 8006dbc:	3fe33333 	.word	0x3fe33333
 8006dc0:	e0000000 	.word	0xe0000000
 8006dc4:	3feec709 	.word	0x3feec709
 8006dc8:	dc3a03fd 	.word	0xdc3a03fd
 8006dcc:	3feec709 	.word	0x3feec709
 8006dd0:	145b01f5 	.word	0x145b01f5
 8006dd4:	be3e2fe0 	.word	0xbe3e2fe0
 8006dd8:	00000000 	.word	0x00000000
 8006ddc:	3ff00000 	.word	0x3ff00000
 8006de0:	7ff00000 	.word	0x7ff00000
 8006de4:	43400000 	.word	0x43400000
 8006de8:	0003988e 	.word	0x0003988e
 8006dec:	000bb679 	.word	0x000bb679
 8006df0:	08007530 	.word	0x08007530
 8006df4:	3ff00000 	.word	0x3ff00000
 8006df8:	40080000 	.word	0x40080000
 8006dfc:	08007550 	.word	0x08007550
 8006e00:	08007540 	.word	0x08007540
 8006e04:	a3b5      	add	r3, pc, #724	; (adr r3, 80070dc <__ieee754_pow+0xa3c>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 f9e9 	bl	80001e4 <__adddf3>
 8006e12:	4622      	mov	r2, r4
 8006e14:	ec41 0b1a 	vmov	d10, r0, r1
 8006e18:	462b      	mov	r3, r5
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	4639      	mov	r1, r7
 8006e1e:	f7f9 f9df 	bl	80001e0 <__aeabi_dsub>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	ec51 0b1a 	vmov	r0, r1, d10
 8006e2a:	f7f9 fe21 	bl	8000a70 <__aeabi_dcmpgt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f47f adf8 	bne.w	8006a24 <__ieee754_pow+0x384>
 8006e34:	4aa4      	ldr	r2, [pc, #656]	; (80070c8 <__ieee754_pow+0xa28>)
 8006e36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f340 810b 	ble.w	8007056 <__ieee754_pow+0x9b6>
 8006e40:	151b      	asrs	r3, r3, #20
 8006e42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006e46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006e4a:	fa4a f303 	asr.w	r3, sl, r3
 8006e4e:	445b      	add	r3, fp
 8006e50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006e54:	4e9d      	ldr	r6, [pc, #628]	; (80070cc <__ieee754_pow+0xa2c>)
 8006e56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006e5a:	4116      	asrs	r6, r2
 8006e5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006e60:	2000      	movs	r0, #0
 8006e62:	ea23 0106 	bic.w	r1, r3, r6
 8006e66:	f1c2 0214 	rsb	r2, r2, #20
 8006e6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006e6e:	fa4a fa02 	asr.w	sl, sl, r2
 8006e72:	f1bb 0f00 	cmp.w	fp, #0
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	bfb8      	it	lt
 8006e80:	f1ca 0a00 	rsblt	sl, sl, #0
 8006e84:	f7f9 f9ac 	bl	80001e0 <__aeabi_dsub>
 8006e88:	ec41 0b19 	vmov	d9, r0, r1
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	ec51 0b19 	vmov	r0, r1, d9
 8006e94:	f7f9 f9a6 	bl	80001e4 <__adddf3>
 8006e98:	2400      	movs	r4, #0
 8006e9a:	a379      	add	r3, pc, #484	; (adr r3, 8007080 <__ieee754_pow+0x9e0>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	460d      	mov	r5, r1
 8006ea4:	f7f9 fb54 	bl	8000550 <__aeabi_dmul>
 8006ea8:	ec53 2b19 	vmov	r2, r3, d9
 8006eac:	4606      	mov	r6, r0
 8006eae:	460f      	mov	r7, r1
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f7f9 f994 	bl	80001e0 <__aeabi_dsub>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 f98e 	bl	80001e0 <__aeabi_dsub>
 8006ec4:	a370      	add	r3, pc, #448	; (adr r3, 8007088 <__ieee754_pow+0x9e8>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f7f9 fb41 	bl	8000550 <__aeabi_dmul>
 8006ece:	a370      	add	r3, pc, #448	; (adr r3, 8007090 <__ieee754_pow+0x9f0>)
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	f7f9 fb38 	bl	8000550 <__aeabi_dmul>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f7f9 f97c 	bl	80001e4 <__adddf3>
 8006eec:	4604      	mov	r4, r0
 8006eee:	460d      	mov	r5, r1
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f7f9 f974 	bl	80001e4 <__adddf3>
 8006efc:	4632      	mov	r2, r6
 8006efe:	463b      	mov	r3, r7
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	f7f9 f96c 	bl	80001e0 <__aeabi_dsub>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 f966 	bl	80001e0 <__aeabi_dsub>
 8006f14:	4642      	mov	r2, r8
 8006f16:	4606      	mov	r6, r0
 8006f18:	460f      	mov	r7, r1
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fb16 	bl	8000550 <__aeabi_dmul>
 8006f24:	a35c      	add	r3, pc, #368	; (adr r3, 8007098 <__ieee754_pow+0x9f8>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	460d      	mov	r5, r1
 8006f2e:	f7f9 fb0f 	bl	8000550 <__aeabi_dmul>
 8006f32:	a35b      	add	r3, pc, #364	; (adr r3, 80070a0 <__ieee754_pow+0xa00>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 f952 	bl	80001e0 <__aeabi_dsub>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	f7f9 fb06 	bl	8000550 <__aeabi_dmul>
 8006f44:	a358      	add	r3, pc, #352	; (adr r3, 80070a8 <__ieee754_pow+0xa08>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f94b 	bl	80001e4 <__adddf3>
 8006f4e:	4622      	mov	r2, r4
 8006f50:	462b      	mov	r3, r5
 8006f52:	f7f9 fafd 	bl	8000550 <__aeabi_dmul>
 8006f56:	a356      	add	r3, pc, #344	; (adr r3, 80070b0 <__ieee754_pow+0xa10>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f7f9 f940 	bl	80001e0 <__aeabi_dsub>
 8006f60:	4622      	mov	r2, r4
 8006f62:	462b      	mov	r3, r5
 8006f64:	f7f9 faf4 	bl	8000550 <__aeabi_dmul>
 8006f68:	a353      	add	r3, pc, #332	; (adr r3, 80070b8 <__ieee754_pow+0xa18>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 f939 	bl	80001e4 <__adddf3>
 8006f72:	4622      	mov	r2, r4
 8006f74:	462b      	mov	r3, r5
 8006f76:	f7f9 faeb 	bl	8000550 <__aeabi_dmul>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	f7f9 f92d 	bl	80001e0 <__aeabi_dsub>
 8006f86:	4604      	mov	r4, r0
 8006f88:	460d      	mov	r5, r1
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 fadd 	bl	8000550 <__aeabi_dmul>
 8006f96:	2200      	movs	r2, #0
 8006f98:	ec41 0b19 	vmov	d9, r0, r1
 8006f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 f91c 	bl	80001e0 <__aeabi_dsub>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	ec51 0b19 	vmov	r0, r1, d9
 8006fb0:	f7f9 fbf8 	bl	80007a4 <__aeabi_ddiv>
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	460d      	mov	r5, r1
 8006fba:	463b      	mov	r3, r7
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	f7f9 fac6 	bl	8000550 <__aeabi_dmul>
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	f7f9 f90c 	bl	80001e4 <__adddf3>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	f7f9 f904 	bl	80001e0 <__aeabi_dsub>
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	f7f9 f900 	bl	80001e0 <__aeabi_dsub>
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	493a      	ldr	r1, [pc, #232]	; (80070d0 <__ieee754_pow+0xa30>)
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	f7f9 f8fa 	bl	80001e0 <__aeabi_dsub>
 8006fec:	e9cd 0100 	strd	r0, r1, [sp]
 8006ff0:	9b01      	ldr	r3, [sp, #4]
 8006ff2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffa:	da2f      	bge.n	800705c <__ieee754_pow+0x9bc>
 8006ffc:	4650      	mov	r0, sl
 8006ffe:	ed9d 0b00 	vldr	d0, [sp]
 8007002:	f000 f9cd 	bl	80073a0 <scalbn>
 8007006:	ec51 0b10 	vmov	r0, r1, d0
 800700a:	ec53 2b18 	vmov	r2, r3, d8
 800700e:	f7ff bbe0 	b.w	80067d2 <__ieee754_pow+0x132>
 8007012:	4b30      	ldr	r3, [pc, #192]	; (80070d4 <__ieee754_pow+0xa34>)
 8007014:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007018:	429e      	cmp	r6, r3
 800701a:	f77f af0b 	ble.w	8006e34 <__ieee754_pow+0x794>
 800701e:	4b2e      	ldr	r3, [pc, #184]	; (80070d8 <__ieee754_pow+0xa38>)
 8007020:	440b      	add	r3, r1
 8007022:	4303      	orrs	r3, r0
 8007024:	d00b      	beq.n	800703e <__ieee754_pow+0x99e>
 8007026:	a326      	add	r3, pc, #152	; (adr r3, 80070c0 <__ieee754_pow+0xa20>)
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	ec51 0b18 	vmov	r0, r1, d8
 8007030:	f7f9 fa8e 	bl	8000550 <__aeabi_dmul>
 8007034:	a322      	add	r3, pc, #136	; (adr r3, 80070c0 <__ieee754_pow+0xa20>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7ff bbca 	b.w	80067d2 <__ieee754_pow+0x132>
 800703e:	4622      	mov	r2, r4
 8007040:	462b      	mov	r3, r5
 8007042:	f7f9 f8cd 	bl	80001e0 <__aeabi_dsub>
 8007046:	4642      	mov	r2, r8
 8007048:	464b      	mov	r3, r9
 800704a:	f7f9 fd07 	bl	8000a5c <__aeabi_dcmpge>
 800704e:	2800      	cmp	r0, #0
 8007050:	f43f aef0 	beq.w	8006e34 <__ieee754_pow+0x794>
 8007054:	e7e7      	b.n	8007026 <__ieee754_pow+0x986>
 8007056:	f04f 0a00 	mov.w	sl, #0
 800705a:	e717      	b.n	8006e8c <__ieee754_pow+0x7ec>
 800705c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007060:	4619      	mov	r1, r3
 8007062:	e7d2      	b.n	800700a <__ieee754_pow+0x96a>
 8007064:	491a      	ldr	r1, [pc, #104]	; (80070d0 <__ieee754_pow+0xa30>)
 8007066:	2000      	movs	r0, #0
 8007068:	f7ff bb9e 	b.w	80067a8 <__ieee754_pow+0x108>
 800706c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007070:	f7ff bb9a 	b.w	80067a8 <__ieee754_pow+0x108>
 8007074:	9000      	str	r0, [sp, #0]
 8007076:	f7ff bb76 	b.w	8006766 <__ieee754_pow+0xc6>
 800707a:	2100      	movs	r1, #0
 800707c:	f7ff bb60 	b.w	8006740 <__ieee754_pow+0xa0>
 8007080:	00000000 	.word	0x00000000
 8007084:	3fe62e43 	.word	0x3fe62e43
 8007088:	fefa39ef 	.word	0xfefa39ef
 800708c:	3fe62e42 	.word	0x3fe62e42
 8007090:	0ca86c39 	.word	0x0ca86c39
 8007094:	be205c61 	.word	0xbe205c61
 8007098:	72bea4d0 	.word	0x72bea4d0
 800709c:	3e663769 	.word	0x3e663769
 80070a0:	c5d26bf1 	.word	0xc5d26bf1
 80070a4:	3ebbbd41 	.word	0x3ebbbd41
 80070a8:	af25de2c 	.word	0xaf25de2c
 80070ac:	3f11566a 	.word	0x3f11566a
 80070b0:	16bebd93 	.word	0x16bebd93
 80070b4:	3f66c16c 	.word	0x3f66c16c
 80070b8:	5555553e 	.word	0x5555553e
 80070bc:	3fc55555 	.word	0x3fc55555
 80070c0:	c2f8f359 	.word	0xc2f8f359
 80070c4:	01a56e1f 	.word	0x01a56e1f
 80070c8:	3fe00000 	.word	0x3fe00000
 80070cc:	000fffff 	.word	0x000fffff
 80070d0:	3ff00000 	.word	0x3ff00000
 80070d4:	4090cbff 	.word	0x4090cbff
 80070d8:	3f6f3400 	.word	0x3f6f3400
 80070dc:	652b82fe 	.word	0x652b82fe
 80070e0:	3c971547 	.word	0x3c971547

080070e4 <__ieee754_sqrt>:
 80070e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e8:	ec55 4b10 	vmov	r4, r5, d0
 80070ec:	4e56      	ldr	r6, [pc, #344]	; (8007248 <__ieee754_sqrt+0x164>)
 80070ee:	43ae      	bics	r6, r5
 80070f0:	ee10 0a10 	vmov	r0, s0
 80070f4:	ee10 3a10 	vmov	r3, s0
 80070f8:	4629      	mov	r1, r5
 80070fa:	462a      	mov	r2, r5
 80070fc:	d110      	bne.n	8007120 <__ieee754_sqrt+0x3c>
 80070fe:	ee10 2a10 	vmov	r2, s0
 8007102:	462b      	mov	r3, r5
 8007104:	f7f9 fa24 	bl	8000550 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 f868 	bl	80001e4 <__adddf3>
 8007114:	4604      	mov	r4, r0
 8007116:	460d      	mov	r5, r1
 8007118:	ec45 4b10 	vmov	d0, r4, r5
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	2d00      	cmp	r5, #0
 8007122:	dc10      	bgt.n	8007146 <__ieee754_sqrt+0x62>
 8007124:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007128:	4330      	orrs	r0, r6
 800712a:	d0f5      	beq.n	8007118 <__ieee754_sqrt+0x34>
 800712c:	b15d      	cbz	r5, 8007146 <__ieee754_sqrt+0x62>
 800712e:	ee10 2a10 	vmov	r2, s0
 8007132:	462b      	mov	r3, r5
 8007134:	ee10 0a10 	vmov	r0, s0
 8007138:	f7f9 f852 	bl	80001e0 <__aeabi_dsub>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	f7f9 fb30 	bl	80007a4 <__aeabi_ddiv>
 8007144:	e7e6      	b.n	8007114 <__ieee754_sqrt+0x30>
 8007146:	1509      	asrs	r1, r1, #20
 8007148:	d076      	beq.n	8007238 <__ieee754_sqrt+0x154>
 800714a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800714e:	07ce      	lsls	r6, r1, #31
 8007150:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007154:	bf5e      	ittt	pl
 8007156:	0fda      	lsrpl	r2, r3, #31
 8007158:	005b      	lslpl	r3, r3, #1
 800715a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800715e:	0fda      	lsrs	r2, r3, #31
 8007160:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007164:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007168:	2000      	movs	r0, #0
 800716a:	106d      	asrs	r5, r5, #1
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	f04f 0e16 	mov.w	lr, #22
 8007172:	4684      	mov	ip, r0
 8007174:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007178:	eb0c 0401 	add.w	r4, ip, r1
 800717c:	4294      	cmp	r4, r2
 800717e:	bfde      	ittt	le
 8007180:	1b12      	suble	r2, r2, r4
 8007182:	eb04 0c01 	addle.w	ip, r4, r1
 8007186:	1840      	addle	r0, r0, r1
 8007188:	0052      	lsls	r2, r2, #1
 800718a:	f1be 0e01 	subs.w	lr, lr, #1
 800718e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007192:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007196:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800719a:	d1ed      	bne.n	8007178 <__ieee754_sqrt+0x94>
 800719c:	4671      	mov	r1, lr
 800719e:	2720      	movs	r7, #32
 80071a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80071a4:	4562      	cmp	r2, ip
 80071a6:	eb04 060e 	add.w	r6, r4, lr
 80071aa:	dc02      	bgt.n	80071b2 <__ieee754_sqrt+0xce>
 80071ac:	d113      	bne.n	80071d6 <__ieee754_sqrt+0xf2>
 80071ae:	429e      	cmp	r6, r3
 80071b0:	d811      	bhi.n	80071d6 <__ieee754_sqrt+0xf2>
 80071b2:	2e00      	cmp	r6, #0
 80071b4:	eb06 0e04 	add.w	lr, r6, r4
 80071b8:	da43      	bge.n	8007242 <__ieee754_sqrt+0x15e>
 80071ba:	f1be 0f00 	cmp.w	lr, #0
 80071be:	db40      	blt.n	8007242 <__ieee754_sqrt+0x15e>
 80071c0:	f10c 0801 	add.w	r8, ip, #1
 80071c4:	eba2 020c 	sub.w	r2, r2, ip
 80071c8:	429e      	cmp	r6, r3
 80071ca:	bf88      	it	hi
 80071cc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80071d0:	1b9b      	subs	r3, r3, r6
 80071d2:	4421      	add	r1, r4
 80071d4:	46c4      	mov	ip, r8
 80071d6:	0052      	lsls	r2, r2, #1
 80071d8:	3f01      	subs	r7, #1
 80071da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80071de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80071e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071e6:	d1dd      	bne.n	80071a4 <__ieee754_sqrt+0xc0>
 80071e8:	4313      	orrs	r3, r2
 80071ea:	d006      	beq.n	80071fa <__ieee754_sqrt+0x116>
 80071ec:	1c4c      	adds	r4, r1, #1
 80071ee:	bf13      	iteet	ne
 80071f0:	3101      	addne	r1, #1
 80071f2:	3001      	addeq	r0, #1
 80071f4:	4639      	moveq	r1, r7
 80071f6:	f021 0101 	bicne.w	r1, r1, #1
 80071fa:	1043      	asrs	r3, r0, #1
 80071fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007200:	0849      	lsrs	r1, r1, #1
 8007202:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007206:	07c2      	lsls	r2, r0, #31
 8007208:	bf48      	it	mi
 800720a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800720e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007212:	460c      	mov	r4, r1
 8007214:	463d      	mov	r5, r7
 8007216:	e77f      	b.n	8007118 <__ieee754_sqrt+0x34>
 8007218:	0ada      	lsrs	r2, r3, #11
 800721a:	3815      	subs	r0, #21
 800721c:	055b      	lsls	r3, r3, #21
 800721e:	2a00      	cmp	r2, #0
 8007220:	d0fa      	beq.n	8007218 <__ieee754_sqrt+0x134>
 8007222:	02d7      	lsls	r7, r2, #11
 8007224:	d50a      	bpl.n	800723c <__ieee754_sqrt+0x158>
 8007226:	f1c1 0420 	rsb	r4, r1, #32
 800722a:	fa23 f404 	lsr.w	r4, r3, r4
 800722e:	1e4d      	subs	r5, r1, #1
 8007230:	408b      	lsls	r3, r1
 8007232:	4322      	orrs	r2, r4
 8007234:	1b41      	subs	r1, r0, r5
 8007236:	e788      	b.n	800714a <__ieee754_sqrt+0x66>
 8007238:	4608      	mov	r0, r1
 800723a:	e7f0      	b.n	800721e <__ieee754_sqrt+0x13a>
 800723c:	0052      	lsls	r2, r2, #1
 800723e:	3101      	adds	r1, #1
 8007240:	e7ef      	b.n	8007222 <__ieee754_sqrt+0x13e>
 8007242:	46e0      	mov	r8, ip
 8007244:	e7be      	b.n	80071c4 <__ieee754_sqrt+0xe0>
 8007246:	bf00      	nop
 8007248:	7ff00000 	.word	0x7ff00000

0800724c <fabs>:
 800724c:	ec51 0b10 	vmov	r0, r1, d0
 8007250:	ee10 2a10 	vmov	r2, s0
 8007254:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007258:	ec43 2b10 	vmov	d0, r2, r3
 800725c:	4770      	bx	lr

0800725e <finite>:
 800725e:	b082      	sub	sp, #8
 8007260:	ed8d 0b00 	vstr	d0, [sp]
 8007264:	9801      	ldr	r0, [sp, #4]
 8007266:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800726a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800726e:	0fc0      	lsrs	r0, r0, #31
 8007270:	b002      	add	sp, #8
 8007272:	4770      	bx	lr
 8007274:	0000      	movs	r0, r0
	...

08007278 <nan>:
 8007278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007280 <nan+0x8>
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	00000000 	.word	0x00000000
 8007284:	7ff80000 	.word	0x7ff80000

08007288 <rint>:
 8007288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800728a:	ec51 0b10 	vmov	r0, r1, d0
 800728e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007292:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007296:	2e13      	cmp	r6, #19
 8007298:	ee10 4a10 	vmov	r4, s0
 800729c:	460b      	mov	r3, r1
 800729e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80072a2:	dc58      	bgt.n	8007356 <rint+0xce>
 80072a4:	2e00      	cmp	r6, #0
 80072a6:	da2b      	bge.n	8007300 <rint+0x78>
 80072a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80072ac:	4302      	orrs	r2, r0
 80072ae:	d023      	beq.n	80072f8 <rint+0x70>
 80072b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80072b4:	4302      	orrs	r2, r0
 80072b6:	4254      	negs	r4, r2
 80072b8:	4314      	orrs	r4, r2
 80072ba:	0c4b      	lsrs	r3, r1, #17
 80072bc:	0b24      	lsrs	r4, r4, #12
 80072be:	045b      	lsls	r3, r3, #17
 80072c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80072c4:	ea44 0103 	orr.w	r1, r4, r3
 80072c8:	4b32      	ldr	r3, [pc, #200]	; (8007394 <rint+0x10c>)
 80072ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f8 ff83 	bl	80001e4 <__adddf3>
 80072de:	e9cd 0100 	strd	r0, r1, [sp]
 80072e2:	463b      	mov	r3, r7
 80072e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072e8:	4632      	mov	r2, r6
 80072ea:	f7f8 ff79 	bl	80001e0 <__aeabi_dsub>
 80072ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80072f6:	4639      	mov	r1, r7
 80072f8:	ec41 0b10 	vmov	d0, r0, r1
 80072fc:	b003      	add	sp, #12
 80072fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007300:	4a25      	ldr	r2, [pc, #148]	; (8007398 <rint+0x110>)
 8007302:	4132      	asrs	r2, r6
 8007304:	ea01 0702 	and.w	r7, r1, r2
 8007308:	4307      	orrs	r7, r0
 800730a:	d0f5      	beq.n	80072f8 <rint+0x70>
 800730c:	0851      	lsrs	r1, r2, #1
 800730e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007312:	4314      	orrs	r4, r2
 8007314:	d00c      	beq.n	8007330 <rint+0xa8>
 8007316:	ea23 0201 	bic.w	r2, r3, r1
 800731a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800731e:	2e13      	cmp	r6, #19
 8007320:	fa43 f606 	asr.w	r6, r3, r6
 8007324:	bf0c      	ite	eq
 8007326:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800732a:	2400      	movne	r4, #0
 800732c:	ea42 0306 	orr.w	r3, r2, r6
 8007330:	4918      	ldr	r1, [pc, #96]	; (8007394 <rint+0x10c>)
 8007332:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007336:	4622      	mov	r2, r4
 8007338:	e9d5 4500 	ldrd	r4, r5, [r5]
 800733c:	4620      	mov	r0, r4
 800733e:	4629      	mov	r1, r5
 8007340:	f7f8 ff50 	bl	80001e4 <__adddf3>
 8007344:	e9cd 0100 	strd	r0, r1, [sp]
 8007348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800734c:	4622      	mov	r2, r4
 800734e:	462b      	mov	r3, r5
 8007350:	f7f8 ff46 	bl	80001e0 <__aeabi_dsub>
 8007354:	e7d0      	b.n	80072f8 <rint+0x70>
 8007356:	2e33      	cmp	r6, #51	; 0x33
 8007358:	dd07      	ble.n	800736a <rint+0xe2>
 800735a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800735e:	d1cb      	bne.n	80072f8 <rint+0x70>
 8007360:	ee10 2a10 	vmov	r2, s0
 8007364:	f7f8 ff3e 	bl	80001e4 <__adddf3>
 8007368:	e7c6      	b.n	80072f8 <rint+0x70>
 800736a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800736e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007372:	40d6      	lsrs	r6, r2
 8007374:	4230      	tst	r0, r6
 8007376:	d0bf      	beq.n	80072f8 <rint+0x70>
 8007378:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800737c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007380:	bf1f      	itttt	ne
 8007382:	ea24 0101 	bicne.w	r1, r4, r1
 8007386:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800738a:	fa44 f202 	asrne.w	r2, r4, r2
 800738e:	ea41 0402 	orrne.w	r4, r1, r2
 8007392:	e7cd      	b.n	8007330 <rint+0xa8>
 8007394:	08007560 	.word	0x08007560
 8007398:	000fffff 	.word	0x000fffff
 800739c:	00000000 	.word	0x00000000

080073a0 <scalbn>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	ec55 4b10 	vmov	r4, r5, d0
 80073a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80073aa:	4606      	mov	r6, r0
 80073ac:	462b      	mov	r3, r5
 80073ae:	b99a      	cbnz	r2, 80073d8 <scalbn+0x38>
 80073b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80073b4:	4323      	orrs	r3, r4
 80073b6:	d036      	beq.n	8007426 <scalbn+0x86>
 80073b8:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <scalbn+0x100>)
 80073ba:	4629      	mov	r1, r5
 80073bc:	ee10 0a10 	vmov	r0, s0
 80073c0:	2200      	movs	r2, #0
 80073c2:	f7f9 f8c5 	bl	8000550 <__aeabi_dmul>
 80073c6:	4b37      	ldr	r3, [pc, #220]	; (80074a4 <scalbn+0x104>)
 80073c8:	429e      	cmp	r6, r3
 80073ca:	4604      	mov	r4, r0
 80073cc:	460d      	mov	r5, r1
 80073ce:	da10      	bge.n	80073f2 <scalbn+0x52>
 80073d0:	a32b      	add	r3, pc, #172	; (adr r3, 8007480 <scalbn+0xe0>)
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	e03a      	b.n	800744e <scalbn+0xae>
 80073d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80073dc:	428a      	cmp	r2, r1
 80073de:	d10c      	bne.n	80073fa <scalbn+0x5a>
 80073e0:	ee10 2a10 	vmov	r2, s0
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f8 fefc 	bl	80001e4 <__adddf3>
 80073ec:	4604      	mov	r4, r0
 80073ee:	460d      	mov	r5, r1
 80073f0:	e019      	b.n	8007426 <scalbn+0x86>
 80073f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80073f6:	460b      	mov	r3, r1
 80073f8:	3a36      	subs	r2, #54	; 0x36
 80073fa:	4432      	add	r2, r6
 80073fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007400:	428a      	cmp	r2, r1
 8007402:	dd08      	ble.n	8007416 <scalbn+0x76>
 8007404:	2d00      	cmp	r5, #0
 8007406:	a120      	add	r1, pc, #128	; (adr r1, 8007488 <scalbn+0xe8>)
 8007408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800740c:	da1c      	bge.n	8007448 <scalbn+0xa8>
 800740e:	a120      	add	r1, pc, #128	; (adr r1, 8007490 <scalbn+0xf0>)
 8007410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007414:	e018      	b.n	8007448 <scalbn+0xa8>
 8007416:	2a00      	cmp	r2, #0
 8007418:	dd08      	ble.n	800742c <scalbn+0x8c>
 800741a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800741e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007426:	ec45 4b10 	vmov	d0, r4, r5
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007430:	da19      	bge.n	8007466 <scalbn+0xc6>
 8007432:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007436:	429e      	cmp	r6, r3
 8007438:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800743c:	dd0a      	ble.n	8007454 <scalbn+0xb4>
 800743e:	a112      	add	r1, pc, #72	; (adr r1, 8007488 <scalbn+0xe8>)
 8007440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e2      	bne.n	800740e <scalbn+0x6e>
 8007448:	a30f      	add	r3, pc, #60	; (adr r3, 8007488 <scalbn+0xe8>)
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f7f9 f87f 	bl	8000550 <__aeabi_dmul>
 8007452:	e7cb      	b.n	80073ec <scalbn+0x4c>
 8007454:	a10a      	add	r1, pc, #40	; (adr r1, 8007480 <scalbn+0xe0>)
 8007456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0b8      	beq.n	80073d0 <scalbn+0x30>
 800745e:	a10e      	add	r1, pc, #56	; (adr r1, 8007498 <scalbn+0xf8>)
 8007460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007464:	e7b4      	b.n	80073d0 <scalbn+0x30>
 8007466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800746a:	3236      	adds	r2, #54	; 0x36
 800746c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007470:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007474:	4620      	mov	r0, r4
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <scalbn+0x108>)
 8007478:	2200      	movs	r2, #0
 800747a:	e7e8      	b.n	800744e <scalbn+0xae>
 800747c:	f3af 8000 	nop.w
 8007480:	c2f8f359 	.word	0xc2f8f359
 8007484:	01a56e1f 	.word	0x01a56e1f
 8007488:	8800759c 	.word	0x8800759c
 800748c:	7e37e43c 	.word	0x7e37e43c
 8007490:	8800759c 	.word	0x8800759c
 8007494:	fe37e43c 	.word	0xfe37e43c
 8007498:	c2f8f359 	.word	0xc2f8f359
 800749c:	81a56e1f 	.word	0x81a56e1f
 80074a0:	43500000 	.word	0x43500000
 80074a4:	ffff3cb0 	.word	0xffff3cb0
 80074a8:	3c900000 	.word	0x3c900000

080074ac <_init>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr

080074b8 <_fini>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr
