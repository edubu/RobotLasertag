
MasterGlove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008020  08008020  00018020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008100  08008100  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008108  08008108  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800810c  0800810c  0001810c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200000a0  080081b0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080081b0  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a94  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab3  00000000  00000000  00034b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00037618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000386a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001733b  00000000  00000000  00039670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146eb  00000000  00000000  000509ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff3e  00000000  00000000  00065096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4fd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ddc  00000000  00000000  000f5028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008004 	.word	0x08008004

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	08008004 	.word	0x08008004

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <getMagnitude>:
 */

#include "hand_control.h"
#include "math.h"

uint8_t getMagnitude(int16_t x, int16_t y, int16_t z){
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	807b      	strh	r3, [r7, #2]
	// g_vals come in x, y, z
	uint16_t half_mag = 16384/2;
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	81bb      	strh	r3, [r7, #12]

	uint16_t z_offset = 16384 - z;
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8000f5e:	81fb      	strh	r3, [r7, #14]

	if(z_offset > half_mag){
 8000f60:	89fa      	ldrh	r2, [r7, #14]
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d901      	bls.n	8000f6c <getMagnitude+0x2c>
		z_offset = half_mag;
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	81fb      	strh	r3, [r7, #14]
	}

	//convert to range between 0 to 10
	uint8_t newValue = ((z_offset * 10)/half_mag);
 8000f6c:	89fa      	ldrh	r2, [r7, #14]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	461a      	mov	r2, r3
 8000f78:	89bb      	ldrh	r3, [r7, #12]
 8000f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f7e:	72fb      	strb	r3, [r7, #11]

	return newValue;
 8000f80:	7afb      	ldrb	r3, [r7, #11]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <getDirection>:

float * getDirection(int16_t x, int16_t y){
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	80bb      	strh	r3, [r7, #4]
	static float direction[2];
	float magnitude = sqrt(pow(x, 2) + pow(y, 2));
 8000fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fabd 	bl	8000524 <__aeabi_i2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001050 <getDirection+0xc0>
 8000fb2:	ec43 2b10 	vmov	d0, r2, r3
 8000fb6:	f006 f83b 	bl	8007030 <pow>
 8000fba:	ec55 4b10 	vmov	r4, r5, d0
 8000fbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff faae 	bl	8000524 <__aeabi_i2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001050 <getDirection+0xc0>
 8000fd0:	ec43 2b10 	vmov	d0, r2, r3
 8000fd4:	f006 f82c 	bl	8007030 <pow>
 8000fd8:	ec53 2b10 	vmov	r2, r3, d0
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff f954 	bl	800028c <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	ec43 2b17 	vmov	d7, r2, r3
 8000fec:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff0:	eef0 0a67 	vmov.f32	s1, s15
 8000ff4:	f006 f8ca 	bl	800718c <sqrt>
 8000ff8:	ec53 2b10 	vmov	r2, r3, d0
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fdd2 	bl	8000ba8 <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]

	direction[0] = -x/magnitude;
 8001008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100c:	425b      	negs	r3, r3
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001016:	ed97 7a03 	vldr	s14, [r7, #12]
 800101a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <getDirection+0xc8>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
	direction[1] = -y/magnitude;
 8001024:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001028:	425b      	negs	r3, r3
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001032:	ed97 7a03 	vldr	s14, [r7, #12]
 8001036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <getDirection+0xc8>)
 800103c:	edc3 7a01 	vstr	s15, [r3, #4]
//
//	if(abs(direction[1]) <= 0.1){
//		direction[1] = 0;
//	}

	return direction;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <getDirection+0xc8>)
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	00000000 	.word	0x00000000
 8001054:	40000000 	.word	0x40000000
 8001058:	200000bc 	.word	0x200000bc

0800105c <I2C_ClearBusyFlagErratum>:

static I2C_HandleTypeDef* hi2c;
static float G = 9.81;
static uint32_t timeout = 100;

void I2C_ClearBusyFlagErratum(I2C_Module* i2c) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  // 1. Clear PE bit.
  i2c->instance.Instance->CR1 &= ~(0x0001);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

  //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
  GPIO_InitStructure.Mode         = GPIO_MODE_OUTPUT_OD;
 8001074:	2311      	movs	r3, #17
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate    = GPIO_AF4_I2C1;
 8001078:	2304      	movs	r3, #4
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Pull         = GPIO_PULLUP;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed        = GPIO_SPEED_FREQ_HIGH;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]

  GPIO_InitStructure.Pin          = i2c->sclPin;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800108a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001090:	f107 020c 	add.w	r2, r7, #12
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fe4a 	bl	8002d30 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	f001 ffdd 	bl	8003068 <HAL_GPIO_WritePin>

  GPIO_InitStructure.Pin          = i2c->sdaPin;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80010b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fe35 	bl	8002d30 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	f001 ffc8 	bl	8003068 <HAL_GPIO_WritePin>

  // 3. Check SCL and SDA High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010d8:	e000      	b.n	80010dc <I2C_ClearBusyFlagErratum+0x80>
  {
    asm("nop");
 80010da:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	f001 ffa5 	bl	8003038 <HAL_GPIO_ReadPin>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d1f2      	bne.n	80010da <I2C_ClearBusyFlagErratum+0x7e>
  }

  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 80010f4:	e000      	b.n	80010f8 <I2C_ClearBusyFlagErratum+0x9c>
  {
    asm("nop");
 80010f6:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001102:	4619      	mov	r1, r3
 8001104:	4610      	mov	r0, r2
 8001106:	f001 ff97 	bl	8003038 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1f2      	bne.n	80010f6 <I2C_ClearBusyFlagErratum+0x9a>
  }

  // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_RESET);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	f001 ffa3 	bl	8003068 <HAL_GPIO_WritePin>

  //  5. Check SDA Low level in GPIOx_IDR.
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001122:	e000      	b.n	8001126 <I2C_ClearBusyFlagErratum+0xca>
  {
    asm("nop");
 8001124:	bf00      	nop
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001130:	4619      	mov	r1, r3
 8001132:	4610      	mov	r0, r2
 8001134:	f001 ff80 	bl	8003038 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f2      	bne.n	8001124 <I2C_ClearBusyFlagErratum+0xc8>
  }

  // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_RESET);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f001 ff8c 	bl	8003068 <HAL_GPIO_WritePin>

  //  7. Check SCL Low level in GPIOx_IDR.
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 8001150:	e000      	b.n	8001154 <I2C_ClearBusyFlagErratum+0xf8>
  {
    asm("nop");
 8001152:	bf00      	nop
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f001 ff69 	bl	8003038 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f2      	bne.n	8001152 <I2C_ClearBusyFlagErratum+0xf6>
  }

  // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	f001 ff75 	bl	8003068 <HAL_GPIO_WritePin>

  // 9. Check SCL High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 800117e:	e000      	b.n	8001182 <I2C_ClearBusyFlagErratum+0x126>
  {
    asm("nop");
 8001180:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800118c:	4619      	mov	r1, r3
 800118e:	4610      	mov	r0, r2
 8001190:	f001 ff52 	bl	8003038 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b01      	cmp	r3, #1
 8001198:	d1f2      	bne.n	8001180 <I2C_ClearBusyFlagErratum+0x124>
  }

  // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	f001 ff5e 	bl	8003068 <HAL_GPIO_WritePin>

  // 11. Check SDA High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 80011ac:	e000      	b.n	80011b0 <I2C_ClearBusyFlagErratum+0x154>
  {
    asm("nop");
 80011ae:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f001 ff3b 	bl	8003038 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d1f2      	bne.n	80011ae <I2C_ClearBusyFlagErratum+0x152>
  }

  // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
  GPIO_InitStructure.Mode         = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate    = GPIO_AF4_I2C1;
 80011cc:	2304      	movs	r3, #4
 80011ce:	61fb      	str	r3, [r7, #28]

  GPIO_InitStructure.Pin          = i2c->sclPin;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80011d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fda4 	bl	8002d30 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin          = i2c->sdaPin;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80011ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fd98 	bl	8002d30 <HAL_GPIO_Init>

  // 13. Set SWRST bit in I2Cx_CR1 register.
  i2c->instance.Instance->CR1 |= 0x8000;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800120e:	601a      	str	r2, [r3, #0]

  asm("nop");
 8001210:	bf00      	nop

  // 14. Clear SWRST bit in I2Cx_CR1 register.
  i2c->instance.Instance->CR1 &= ~0x8000;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001220:	601a      	str	r2, [r3, #0]

  asm("nop");
 8001222:	bf00      	nop

  // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
  i2c->instance.Instance->CR1 |= 0x0001;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  // Call initialization function.
  HAL_I2C_Init(&(i2c->instance));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	f001 ff48 	bl	80030cc <HAL_I2C_Init>
}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <imu_init>:

uint8_t imu_init(I2C_HandleTypeDef* i2c_handle) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handle;
 800124c:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <imu_init+0xf4>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]

	uint8_t buf[6];
	HAL_StatusTypeDef ret;

	buf[0] = WHO_AM_I;
 8001252:	2375      	movs	r3, #117	; 0x75
 8001254:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 8001256:	4b38      	ldr	r3, [pc, #224]	; (8001338 <imu_init+0xf4>)
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <imu_init+0xf8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f107 0208 	add.w	r2, r7, #8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	21d0      	movs	r1, #208	; 0xd0
 8001268:	f002 f874 	bl	8003354 <HAL_I2C_Master_Transmit>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) { return 1; }
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <imu_init+0x36>
 8001276:	2301      	movs	r3, #1
 8001278:	e059      	b.n	800132e <imu_init+0xea>
	ret = HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <imu_init+0xf4>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	4b2f      	ldr	r3, [pc, #188]	; (800133c <imu_init+0xf8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f107 0208 	add.w	r2, r7, #8
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	21d0      	movs	r1, #208	; 0xd0
 800128c:	f002 f960 	bl	8003550 <HAL_I2C_Master_Receive>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) { return 1; }
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <imu_init+0x5a>
 800129a:	2301      	movs	r3, #1
 800129c:	e047      	b.n	800132e <imu_init+0xea>

	if (buf[0] == 0x68) {
 800129e:	7a3b      	ldrb	r3, [r7, #8]
 80012a0:	2b68      	cmp	r3, #104	; 0x68
 80012a2:	d141      	bne.n	8001328 <imu_init+0xe4>

		//wake device by writing 0 to PWR_MGMT_1
		buf[0] = PWR_MGMT_1;
 80012a4:	236b      	movs	r3, #107	; 0x6b
 80012a6:	723b      	strb	r3, [r7, #8]
		buf[1] = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <imu_init+0xf4>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <imu_init+0xf8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f107 0208 	add.w	r2, r7, #8
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2302      	movs	r3, #2
 80012bc:	21d0      	movs	r1, #208	; 0xd0
 80012be:	f002 f849 	bl	8003354 <HAL_I2C_Master_Transmit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <imu_init+0x8c>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e02e      	b.n	800132e <imu_init+0xea>

		//divide sample rate by 8 to achieve 1khz data rate
		buf[0] = SMPRT_DIV;
 80012d0:	2319      	movs	r3, #25
 80012d2:	723b      	strb	r3, [r7, #8]
		buf[1] = 7;
 80012d4:	2307      	movs	r3, #7
 80012d6:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <imu_init+0xf4>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <imu_init+0xf8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2302      	movs	r3, #2
 80012e8:	21d0      	movs	r1, #208	; 0xd0
 80012ea:	f002 f833 	bl	8003354 <HAL_I2C_Master_Transmit>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <imu_init+0xb8>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e018      	b.n	800132e <imu_init+0xea>

		//config accelerometer
		buf[0] = ACCEL_CONFIG;
 80012fc:	231c      	movs	r3, #28
 80012fe:	723b      	strb	r3, [r7, #8]
		buf[1] = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <imu_init+0xf4>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <imu_init+0xf8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f107 0208 	add.w	r2, r7, #8
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2302      	movs	r3, #2
 8001314:	21d0      	movs	r1, #208	; 0xd0
 8001316:	f002 f81d 	bl	8003354 <HAL_I2C_Master_Transmit>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <imu_init+0xe8>
 8001324:	2301      	movs	r3, #1
 8001326:	e002      	b.n	800132e <imu_init+0xea>
	} else {
		return 1;
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <imu_init+0xea>
	}

	return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000c4 	.word	0x200000c4
 800133c:	20000004 	.word	0x20000004

08001340 <imu_calibrate>:


void imu_calibrate(int16_t x_offset, int16_t y_offset, int16_t z_offset) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af02      	add	r7, sp, #8
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	460b      	mov	r3, r1
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	807b      	strh	r3, [r7, #2]
	uint8_t buf[7];
	buf[0] = ACCEL_XG_OFFS_USRH;
 8001352:	2306      	movs	r3, #6
 8001354:	723b      	strb	r3, [r7, #8]
	buf[1] = (x_offset >> 8) & 0xFF;
 8001356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135a:	121b      	asrs	r3, r3, #8
 800135c:	b21b      	sxth	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	727b      	strb	r3, [r7, #9]
	buf[2] = x_offset & 0xFF;
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	72bb      	strb	r3, [r7, #10]
	buf[3] = (y_offset >> 8) & 0xFF;
 8001368:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136c:	121b      	asrs	r3, r3, #8
 800136e:	b21b      	sxth	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	72fb      	strb	r3, [r7, #11]
	buf[4] = y_offset & 0xFF;
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	733b      	strb	r3, [r7, #12]
	buf[5] = (z_offset >> 8) & 0xFF;
 800137a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800137e:	121b      	asrs	r3, r3, #8
 8001380:	b21b      	sxth	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]
	buf[6] = z_offset & 0xFF;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 7, timeout);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <imu_calibrate+0x6c>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <imu_calibrate+0x70>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2307      	movs	r3, #7
 800139c:	21d0      	movs	r1, #208	; 0xd0
 800139e:	f001 ffd9 	bl	8003354 <HAL_I2C_Master_Transmit>
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000c4 	.word	0x200000c4
 80013b0:	20000004 	.word	0x20000004

080013b4 <imu_read_accel>:

void imu_read_accel(IMU_DATA* imu_data) {
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]

	uint8_t buf[6];

	//write subregister
	buf[0] = ACCEL_XOUT_H;
 80013bc:	233b      	movs	r3, #59	; 0x3b
 80013be:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 80013c0:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <imu_read_accel+0x148>)
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <imu_read_accel+0x14c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f107 0208 	add.w	r2, r7, #8
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	21d0      	movs	r1, #208	; 0xd0
 80013d2:	f001 ffbf 	bl	8003354 <HAL_I2C_Master_Transmit>

	//recieve accel data
	HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDRESS, buf, 6, timeout);
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <imu_read_accel+0x148>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <imu_read_accel+0x14c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f107 0208 	add.w	r2, r7, #8
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2306      	movs	r3, #6
 80013e6:	21d0      	movs	r1, #208	; 0xd0
 80013e8:	f002 f8b2 	bl	8003550 <HAL_I2C_Master_Receive>

	//get raw data
	imu_data->ax_raw = (int16_t)((buf[0] << 8) | buf[1]);
 80013ec:	7a3b      	ldrb	r3, [r7, #8]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	7a7b      	ldrb	r3, [r7, #9]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	801a      	strh	r2, [r3, #0]
	imu_data->ay_raw = (int16_t)((buf[2] << 8) | buf[3]);
 80013fe:	7abb      	ldrb	r3, [r7, #10]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	7afb      	ldrb	r3, [r7, #11]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	805a      	strh	r2, [r3, #2]
	imu_data->az_raw = (int16_t)((buf[4] << 8) | buf[5]);
 8001410:	7b3b      	ldrb	r3, [r7, #12]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21a      	sxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	809a      	strh	r2, [r3, #4]

	//scale raw data
	//divide by 16384 to get in Gs
	//mult by G=9.81 to get m/s^2
	imu_data->ax = imu_data->ax_raw / 16384.0 * G;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f87b 	bl	8000524 <__aeabi_i2d>
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <imu_read_accel+0x150>)
 8001434:	f7ff fa0a 	bl	800084c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <imu_read_accel+0x154>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f87f 	bl	8000548 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7ff f8d1 	bl	80005f8 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fba3 	bl	8000ba8 <__aeabi_d2f>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
	imu_data->ay = imu_data->ay_raw / 16384.0 * G;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f858 	bl	8000524 <__aeabi_i2d>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <imu_read_accel+0x150>)
 800147a:	f7ff f9e7 	bl	800084c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4614      	mov	r4, r2
 8001484:	461d      	mov	r5, r3
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <imu_read_accel+0x154>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f85c 	bl	8000548 <__aeabi_f2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4620      	mov	r0, r4
 8001496:	4629      	mov	r1, r5
 8001498:	f7ff f8ae 	bl	80005f8 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb80 	bl	8000ba8 <__aeabi_d2f>
 80014a8:	4602      	mov	r2, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60da      	str	r2, [r3, #12]
	imu_data->az = imu_data->az_raw / 16384.0 * G;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f835 	bl	8000524 <__aeabi_i2d>
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <imu_read_accel+0x150>)
 80014c0:	f7ff f9c4 	bl	800084c <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4614      	mov	r4, r2
 80014ca:	461d      	mov	r5, r3
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <imu_read_accel+0x154>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f839 	bl	8000548 <__aeabi_f2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7ff f88b 	bl	80005f8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb5d 	bl	8000ba8 <__aeabi_d2f>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	611a      	str	r2, [r3, #16]

}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bdb0      	pop	{r4, r5, r7, pc}
 80014fc:	200000c4 	.word	0x200000c4
 8001500:	20000004 	.word	0x20000004
 8001504:	40d00000 	.word	0x40d00000
 8001508:	20000000 	.word	0x20000000

0800150c <lcd_init>:

#define LCD_I2C_ADDRESS 0x4E

static I2C_HandleTypeDef* hi2c;

void lcd_init(I2C_HandleTypeDef* i2c_handle) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handle;
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <lcd_init+0x4c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]

	//Initialize LCD with nibble method
	lcd_transmit_byte(0x02);
 800151a:	2002      	movs	r0, #2
 800151c:	f000 f81e 	bl	800155c <lcd_transmit_byte>
	HAL_Delay(20);
 8001520:	2014      	movs	r0, #20
 8001522:	f001 fa3d 	bl	80029a0 <HAL_Delay>

	//Function set
	//DL=0, 4 bit mode
	//N=1, 2 line display
	//F=0 5x8 dots
	lcd_transmit_byte(0x28);
 8001526:	2028      	movs	r0, #40	; 0x28
 8001528:	f000 f818 	bl	800155c <lcd_transmit_byte>
	HAL_Delay(5);
 800152c:	2005      	movs	r0, #5
 800152e:	f001 fa37 	bl	80029a0 <HAL_Delay>

	//clear display
	lcd_transmit_byte(0x01);
 8001532:	2001      	movs	r0, #1
 8001534:	f000 f812 	bl	800155c <lcd_transmit_byte>
	HAL_Delay(5);
 8001538:	2005      	movs	r0, #5
 800153a:	f001 fa31 	bl	80029a0 <HAL_Delay>

	//Entry mode set
	//I/D=1, increment cursor
	//S=0, no shifting
	lcd_transmit_byte(0x06);
 800153e:	2006      	movs	r0, #6
 8001540:	f000 f80c 	bl	800155c <lcd_transmit_byte>
	HAL_Delay(5);
 8001544:	2005      	movs	r0, #5
 8001546:	f001 fa2b 	bl	80029a0 <HAL_Delay>

	//Display control
	//D=1, display on
	//C=0, cursor off
	//B=0, cursor blink off
	lcd_transmit_byte(0x0C);
 800154a:	200c      	movs	r0, #12
 800154c:	f000 f806 	bl	800155c <lcd_transmit_byte>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200000c8 	.word	0x200000c8

0800155c <lcd_transmit_byte>:

void lcd_transmit_byte(uint8_t data) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4];
	uint8_t data_upper = data & 0xF0;
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f023 030f 	bic.w	r3, r3, #15
 800156c:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lower = (data << 4) & 0xF0;
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	73bb      	strb	r3, [r7, #14]

	//upper bits - EN=1, RS=0 => 0x0C
	//lower bits - EN=0, RS=0 => 0x08

	buf[0] = data_upper | 0x0C;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	f043 030c 	orr.w	r3, r3, #12
 800157a:	b2db      	uxtb	r3, r3
 800157c:	723b      	strb	r3, [r7, #8]
	buf[1] = data_upper | 0x08;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	b2db      	uxtb	r3, r3
 8001586:	727b      	strb	r3, [r7, #9]
	buf[2] = data_lower | 0x0C;
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	f043 030c 	orr.w	r3, r3, #12
 800158e:	b2db      	uxtb	r3, r3
 8001590:	72bb      	strb	r3, [r7, #10]
	buf[3] = data_lower | 0x08;
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	b2db      	uxtb	r3, r3
 800159a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(hi2c, LCD_I2C_ADDRESS, (uint8_t *) buf, 4, 100);
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <lcd_transmit_byte+0x5c>)
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	f107 0208 	add.w	r2, r7, #8
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2304      	movs	r3, #4
 80015aa:	214e      	movs	r1, #78	; 0x4e
 80015ac:	f001 fed2 	bl	8003354 <HAL_I2C_Master_Transmit>
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200000c8 	.word	0x200000c8

080015bc <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram_addr = 0x80;
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	73bb      	strb	r3, [r7, #14]

	//row 0 offset = 0
	//row 1 offset = 0x40
	uint8_t pos = col;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	73fb      	strb	r3, [r7, #15]
	if (row > 0) {
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <lcd_set_cursor+0x24>
		pos += 0x40;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3340      	adds	r3, #64	; 0x40
 80015de:	73fb      	strb	r3, [r7, #15]
	}

	lcd_transmit_byte(ddram_addr | pos);
 80015e0:	7bba      	ldrb	r2, [r7, #14]
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ffb7 	bl	800155c <lcd_transmit_byte>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <lcd_clear>:

void lcd_clear() {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
	lcd_transmit_byte(0x01);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff ffae 	bl	800155c <lcd_transmit_byte>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <lcd_transmit_char>:

void lcd_transmit_char(char c) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4];
	uint8_t data_upper = c & 0xF0;
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f023 030f 	bic.w	r3, r3, #15
 8001614:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lower = (c << 4) & 0xF0;
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	73bb      	strb	r3, [r7, #14]

	//upper bits - EN=1, RS=1 => 0x0D
	//lower bits - EN=0, RS=1 => 0x09

	buf[0] = data_upper | 0x0D;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f043 030d 	orr.w	r3, r3, #13
 8001622:	b2db      	uxtb	r3, r3
 8001624:	723b      	strb	r3, [r7, #8]
	buf[1] = data_upper | 0x09;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	f043 0309 	orr.w	r3, r3, #9
 800162c:	b2db      	uxtb	r3, r3
 800162e:	727b      	strb	r3, [r7, #9]
	buf[2] = data_lower | 0x0D;
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	f043 030d 	orr.w	r3, r3, #13
 8001636:	b2db      	uxtb	r3, r3
 8001638:	72bb      	strb	r3, [r7, #10]
	buf[3] = data_lower | 0x09;
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	f043 0309 	orr.w	r3, r3, #9
 8001640:	b2db      	uxtb	r3, r3
 8001642:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(hi2c, LCD_I2C_ADDRESS, (uint8_t *) buf, 4, 100);
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <lcd_transmit_char+0x5c>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2304      	movs	r3, #4
 8001652:	214e      	movs	r1, #78	; 0x4e
 8001654:	f001 fe7e 	bl	8003354 <HAL_I2C_Master_Transmit>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000c8 	.word	0x200000c8

08001664 <lcd_transmit_string>:

void lcd_transmit_string(char* str) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800166c:	e006      	b.n	800167c <lcd_transmit_string+0x18>
		lcd_transmit_char(*str++);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ffc4 	bl	8001604 <lcd_transmit_char>
	while (*str) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f4      	bne.n	800166e <lcd_transmit_string+0xa>
	}
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <displayLives>:

int8_t button_val = 0;
uint8_t Rx_data[4];

// Displays current lives remaining on LCD
void displayLives() {
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
	lcd_clear();
 8001696:	f7ff ffae 	bl	80015f6 <lcd_clear>

	char lives[] = "...Lives";
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <displayLives+0x54>)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016a2:	c303      	stmia	r3!, {r0, r1}
 80016a4:	701a      	strb	r2, [r3, #0]
	lcd_transmit_string(lives);
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ffda 	bl	8001664 <lcd_transmit_string>

	lcd_set_cursor(0, 1);
 80016b0:	2101      	movs	r1, #1
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff ff82 	bl	80015bc <lcd_set_cursor>
	char remaining[] = "Remaining: ";
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <displayLives+0x58>)
 80016ba:	463b      	mov	r3, r7
 80016bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	lcd_transmit_string(remaining);
 80016c2:	463b      	mov	r3, r7
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffcd 	bl	8001664 <lcd_transmit_string>

	lcd_set_cursor(11, 1);
 80016ca:	2101      	movs	r1, #1
 80016cc:	200b      	movs	r0, #11
 80016ce:	f7ff ff75 	bl	80015bc <lcd_set_cursor>
	lcd_transmit_char(livesRemaining);
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <displayLives+0x5c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff94 	bl	8001604 <lcd_transmit_char>
}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	08008020 	.word	0x08008020
 80016e8:	0800802c 	.word	0x0800802c
 80016ec:	20000008 	.word	0x20000008

080016f0 <displayHit>:

// Displays "HIT" on LCD
void displayHit() {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
	lcd_clear();
 80016f6:	f7ff ff7e 	bl	80015f6 <lcd_clear>

	char firstLine[] = "...  You've been";
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <displayHit+0x4c>)
 80016fc:	f107 040c 	add.w	r4, r7, #12
 8001700:	461d      	mov	r5, r3
 8001702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	7023      	strb	r3, [r4, #0]
	lcd_transmit_string(firstLine);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ffa8 	bl	8001664 <lcd_transmit_string>

	lcd_set_cursor(6, 1);
 8001714:	2101      	movs	r1, #1
 8001716:	2006      	movs	r0, #6
 8001718:	f7ff ff50 	bl	80015bc <lcd_set_cursor>
	char remaining[] = "hit!";
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <displayHit+0x50>)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001724:	6018      	str	r0, [r3, #0]
 8001726:	3304      	adds	r3, #4
 8001728:	7019      	strb	r1, [r3, #0]
	lcd_transmit_string(remaining);
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff99 	bl	8001664 <lcd_transmit_string>
}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bdb0      	pop	{r4, r5, r7, pc}
 800173a:	bf00      	nop
 800173c:	08008038 	.word	0x08008038
 8001740:	0800804c 	.word	0x0800804c

08001744 <displayGameOver>:

// Displays "GAME OVER" on LCD
void displayGameOver() {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
	lcd_clear();
 800174a:	f7ff ff54 	bl	80015f6 <lcd_clear>

	char firstLine[] = "...      GAME";
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <displayGameOver+0x48>)
 8001750:	f107 0408 	add.w	r4, r7, #8
 8001754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001756:	c407      	stmia	r4!, {r0, r1, r2}
 8001758:	8023      	strh	r3, [r4, #0]
	lcd_transmit_string(firstLine);
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff80 	bl	8001664 <lcd_transmit_string>

	lcd_set_cursor(6, 1);
 8001764:	2101      	movs	r1, #1
 8001766:	2006      	movs	r0, #6
 8001768:	f7ff ff28 	bl	80015bc <lcd_set_cursor>
	char remaining[] = "OVER!";
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <displayGameOver+0x4c>)
 800176e:	463b      	mov	r3, r7
 8001770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001774:	6018      	str	r0, [r3, #0]
 8001776:	3304      	adds	r3, #4
 8001778:	8019      	strh	r1, [r3, #0]
	lcd_transmit_string(remaining);
 800177a:	463b      	mov	r3, r7
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff71 	bl	8001664 <lcd_transmit_string>
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	08008054 	.word	0x08008054
 8001790:	08008064 	.word	0x08008064

08001794 <HAL_GPIO_EXTI_Callback>:

// Joystick Button Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_3 && !cooldown && !gameOver) {
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d10c      	bne.n	80017be <HAL_GPIO_EXTI_Callback+0x2a>
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d108      	bne.n	80017be <HAL_GPIO_EXTI_Callback+0x2a>
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x50>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d104      	bne.n	80017be <HAL_GPIO_EXTI_Callback+0x2a>
		button_val = 1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
		playFireSound();
 80017ba:	f000 fdc3 	bl	8002344 <playFireSound>
	}
	// Blue Button For Testing
	if (pin == GPIO_PIN_13) {
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c4:	d107      	bne.n	80017d6 <HAL_GPIO_EXTI_Callback+0x42>
		//playVictors();
		gameOver = 0;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
		livesRemaining = '3';
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_GPIO_EXTI_Callback+0x58>)
 80017ce:	2233      	movs	r2, #51	; 0x33
 80017d0:	701a      	strb	r2, [r3, #0]
		displayLives();
 80017d2:	f7ff ff5d 	bl	8001690 <displayLives>
	}
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200000cc 	.word	0x200000cc
 80017e4:	200000cd 	.word	0x200000cd
 80017e8:	200000ce 	.word	0x200000ce
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1, Rx_data, 1);

	// Send to terminal for debugging
	char buf[2];
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\r\n", Rx_data[0]), HAL_MAX_DELAY);
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_UART_RxCpltCallback+0x80>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	491c      	ldr	r1, [pc, #112]	; (8001874 <HAL_UART_RxCpltCallback+0x84>)
 8001804:	4618      	mov	r0, r3
 8001806:	f004 ff6f 	bl	80066e8 <siprintf>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	f107 010c 	add.w	r1, r7, #12
 8001812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001816:	4818      	ldr	r0, [pc, #96]	; (8001878 <HAL_UART_RxCpltCallback+0x88>)
 8001818:	f004 f815 	bl	8005846 <HAL_UART_Transmit>

	// HIT ON ROBOT
	if(Rx_data[0] && !gameOver){
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_RxCpltCallback+0x80>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d021      	beq.n	8001868 <HAL_UART_RxCpltCallback+0x78>
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_UART_RxCpltCallback+0x8c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11d      	bne.n	8001868 <HAL_UART_RxCpltCallback+0x78>
		// What happens when robot gets hit?

		// 0) Set cooldown bit (start TIMER)
		cooldown = 1;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_UART_RxCpltCallback+0x90>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <HAL_UART_RxCpltCallback+0x94>)
 8001834:	f003 f8a4 	bl	8004980 <HAL_TIM_Base_Start_IT>

		// 1) Change LCD screen to say "HIT"
		displayHit();
 8001838:	f7ff ff5a 	bl	80016f0 <displayHit>
		--livesRemaining;
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_UART_RxCpltCallback+0x98>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_UART_RxCpltCallback+0x98>)
 8001846:	701a      	strb	r2, [r3, #0]

		// 2) Play hit sound
		playHitSound();
 8001848:	f000 fd52 	bl	80022f0 <playHitSound>

		// Check to see if game over
		if (livesRemaining == '0') {
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_UART_RxCpltCallback+0x98>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b30      	cmp	r3, #48	; 0x30
 8001852:	d107      	bne.n	8001864 <HAL_UART_RxCpltCallback+0x74>
			// Death sequence
			displayGameOver();
 8001854:	f7ff ff76 	bl	8001744 <displayGameOver>
			playDeathSound();
 8001858:	f000 fd1a 	bl	8002290 <playDeathSound>
			gameOver = 1;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_UART_RxCpltCallback+0x8c>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
		else {
			// Display lives remaining
			displayLives();
		}
	}
}
 8001862:	e001      	b.n	8001868 <HAL_UART_RxCpltCallback+0x78>
			displayLives();
 8001864:	f7ff ff14 	bl	8001690 <displayLives>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200001d0 	.word	0x200001d0
 8001874:	0800806c 	.word	0x0800806c
 8001878:	200002f0 	.word	0x200002f0
 800187c:	200000cd 	.word	0x200000cd
 8001880:	200000cc 	.word	0x200000cc
 8001884:	200001d4 	.word	0x200001d4
 8001888:	20000008 	.word	0x20000008

0800188c <HAL_TIM_PeriodElapsedCallback>:

// TIM11 CALLBACK -- for sending data
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	// What to do when we want to send a message
	if(htim == &htim11){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a40      	ldr	r2, [pc, #256]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d171      	bne.n	8001980 <HAL_TIM_PeriodElapsedCallback+0xf4>
		imu_read_accel(&imu);
 800189c:	483f      	ldr	r0, [pc, #252]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800189e:	f7ff fd89 	bl	80013b4 <imu_read_accel>

		int16_t x = imu.ax_raw;
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	83fb      	strh	r3, [r7, #30]
		int16_t y = imu.ay_raw;
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80018aa:	885b      	ldrh	r3, [r3, #2]
 80018ac:	83bb      	strh	r3, [r7, #28]
		int16_t z = imu.az_raw;
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	837b      	strh	r3, [r7, #26]

		uint8_t magnitude = getMagnitude(x, y, z);
 80018b4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80018b8:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80018bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb3d 	bl	8000f40 <getMagnitude>
 80018c6:	4603      	mov	r3, r0
 80018c8:	767b      	strb	r3, [r7, #25]
		float *direction = getDirection(x, y);
 80018ca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80018ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fb5b 	bl	8000f90 <getDirection>
 80018da:	6178      	str	r0, [r7, #20]

		int8_t *motor_cmds = getMotorVels(magnitude, direction);
 80018dc:	7e7b      	ldrb	r3, [r7, #25]
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fb61 	bl	8001fa8 <getMotorVels>
 80018e6:	4603      	mov	r3, r0
 80018e8:	613b      	str	r3, [r7, #16]

		int8_t buf[6];

		buf[0] = button_val;
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018ec:	f993 3000 	ldrsb.w	r3, [r3]
 80018f0:	723b      	strb	r3, [r7, #8]
		buf[1] = motor_cmds[0] + 10;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	f993 3000 	ldrsb.w	r3, [r3]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	330a      	adds	r3, #10
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	727b      	strb	r3, [r7, #9]
		buf[2] = motor_cmds[1] + 10;
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3301      	adds	r3, #1
 8001906:	f993 3000 	ldrsb.w	r3, [r3]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	330a      	adds	r3, #10
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b25b      	sxtb	r3, r3
 8001912:	72bb      	strb	r3, [r7, #10]
		buf[3] = motor_cmds[2] + 10;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	3302      	adds	r3, #2
 8001918:	f993 3000 	ldrsb.w	r3, [r3]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	330a      	adds	r3, #10
 8001920:	b2db      	uxtb	r3, r3
 8001922:	b25b      	sxtb	r3, r3
 8001924:	72fb      	strb	r3, [r7, #11]
		buf[4] = motor_cmds[3] + 10;
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	3303      	adds	r3, #3
 800192a:	f993 3000 	ldrsb.w	r3, [r3]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	330a      	adds	r3, #10
 8001932:	b2db      	uxtb	r3, r3
 8001934:	b25b      	sxtb	r3, r3
 8001936:	733b      	strb	r3, [r7, #12]
		buf[5] = cooldown;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	737b      	strb	r3, [r7, #13]

		if (gameOver) {
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00b      	beq.n	8001960 <HAL_TIM_PeriodElapsedCallback+0xd4>
			buf[0] = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	723b      	strb	r3, [r7, #8]
			buf[1] = 10;
 800194c:	230a      	movs	r3, #10
 800194e:	727b      	strb	r3, [r7, #9]
			buf[2] = 10;
 8001950:	230a      	movs	r3, #10
 8001952:	72bb      	strb	r3, [r7, #10]
			buf[3] = 10;
 8001954:	230a      	movs	r3, #10
 8001956:	72fb      	strb	r3, [r7, #11]
			buf[4] = 10;
 8001958:	230a      	movs	r3, #10
 800195a:	733b      	strb	r3, [r7, #12]
			buf[5] = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	737b      	strb	r3, [r7, #13]
		}

		button_val = 0;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
		//HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart2, (uint8_t*)buf, 6, HAL_MAX_DELAY);
		HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart1, (uint8_t *)buf, 6, HAL_MAX_DELAY);
 8001966:	f107 0108 	add.w	r1, r7, #8
 800196a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800196e:	2206      	movs	r2, #6
 8001970:	480e      	ldr	r0, [pc, #56]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001972:	f003 ff68 	bl	8005846 <HAL_UART_Transmit>
 8001976:	4603      	mov	r3, r0
 8001978:	73fb      	strb	r3, [r7, #15]
		uint8_t x2 = 10;
 800197a:	230a      	movs	r3, #10
 800197c:	73bb      	strb	r3, [r7, #14]

	}
	else if (htim == &htim5) {
		cooldown = 0;
	}
}
 800197e:	e006      	b.n	800198e <HAL_TIM_PeriodElapsedCallback+0x102>
	else if (htim == &htim5) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d102      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x102>
		cooldown = 0;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000260 	.word	0x20000260
 800199c:	20000168 	.word	0x20000168
 80019a0:	200000ce 	.word	0x200000ce
 80019a4:	200000cc 	.word	0x200000cc
 80019a8:	200000cd 	.word	0x200000cd
 80019ac:	2000021c 	.word	0x2000021c
 80019b0:	200001d4 	.word	0x200001d4

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b09a      	sub	sp, #104	; 0x68
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f000 ff7f 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f84d 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f000 fa3b 	bl	8001e3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019c6:	f000 fa0f 	bl	8001de8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019ca:	f000 f8b3 	bl	8001b34 <MX_I2C1_Init>
  MX_TIM11_Init();
 80019ce:	f000 f9bd 	bl	8001d4c <MX_TIM11_Init>
  MX_USART1_UART_Init();
 80019d2:	f000 f9df 	bl	8001d94 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80019d6:	f000 f909 	bl	8001bec <MX_TIM2_Init>
  MX_I2C3_Init();
 80019da:	f000 f8d9 	bl	8001b90 <MX_I2C3_Init>
  MX_TIM5_Init();
 80019de:	f000 f95d 	bl	8001c9c <MX_TIM5_Init>

  // Start UART Receiving interrupt
  //HAL_UART_Receive_IT(&huart1, Rx_data, 1);

  I2C_Module i2c_mod;
  i2c_mod.instance = hi2c1;
 80019e2:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <main+0x94>)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4611      	mov	r1, r2
 80019e8:	2254      	movs	r2, #84	; 0x54
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fe66 	bl	80066bc <memcpy>
  i2c_mod.sdaPin = GPIO_PIN_9;
 80019f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  i2c_mod.sdaPort = GPIOB;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <main+0x98>)
 80019fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  i2c_mod.sclPin = GPIO_PIN_8;
 80019fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a00:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  i2c_mod.sclPort = GPIOB;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <main+0x98>)
 8001a06:	667b      	str	r3, [r7, #100]	; 0x64
  while (imu_init(&hi2c1) == 1) {
 8001a08:	e003      	b.n	8001a12 <main+0x5e>
    I2C_ClearBusyFlagErratum(&i2c_mod);
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb25 	bl	800105c <I2C_ClearBusyFlagErratum>
  while (imu_init(&hi2c1) == 1) {
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <main+0x94>)
 8001a14:	f7ff fc16 	bl	8001244 <imu_init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d0f5      	beq.n	8001a0a <main+0x56>
  }
  //pass pre-calculated offsets to imu

  //imu_calibrate(503, 582, 2049); // TAPE IMU OFFSETS
  imu_calibrate(182, 2834, 851); // NON-TAPE OFFSETS
 8001a1e:	f240 3253 	movw	r2, #851	; 0x353
 8001a22:	f640 3112 	movw	r1, #2834	; 0xb12
 8001a26:	20b6      	movs	r0, #182	; 0xb6
 8001a28:	f7ff fc8a 	bl	8001340 <imu_calibrate>

  //initialize lcd
  lcd_init(&hi2c3);
 8001a2c:	4808      	ldr	r0, [pc, #32]	; (8001a50 <main+0x9c>)
 8001a2e:	f7ff fd6d 	bl	800150c <lcd_init>
  displayLives();
 8001a32:	f7ff fe2d 	bl	8001690 <displayLives>

  // initialize piezo buzzer
  piezo_init(&htim2);
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <main+0xa0>)
 8001a38:	f000 fb96 	bl	8002168 <piezo_init>

  // Start xbee sending timer
  HAL_TIM_Base_Start_IT(&htim11);
 8001a3c:	4806      	ldr	r0, [pc, #24]	; (8001a58 <main+0xa4>)
 8001a3e:	f002 ff9f 	bl	8004980 <HAL_TIM_Base_Start_IT>
  omni_init();
 8001a42:	f000 fa77 	bl	8001f34 <omni_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <main+0x92>
 8001a48:	2000017c 	.word	0x2000017c
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	20000114 	.word	0x20000114
 8001a54:	200002a8 	.word	0x200002a8
 8001a58:	20000260 	.word	0x20000260

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	; 0x50
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	2230      	movs	r2, #48	; 0x30
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fe34 	bl	80066d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <SystemClock_Config+0xd4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa8:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <SystemClock_Config+0xd4>)
 8001aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <SystemClock_Config+0xd4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ad4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ada:	2304      	movs	r3, #4
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fa86 	bl	8003ff8 <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001af2:	f000 fa19 	bl	8001f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	230f      	movs	r3, #15
 8001af8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2302      	movs	r3, #2
 8001afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2102      	movs	r1, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 fce8 	bl	80044e8 <HAL_RCC_ClockConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b1e:	f000 fa03 	bl	8001f28 <Error_Handler>
  }
}
 8001b22:	bf00      	nop
 8001b24:	3750      	adds	r7, #80	; 0x50
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000

08001b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_I2C1_Init+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x58>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b72:	f001 faab 	bl	80030cc <HAL_I2C_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b7c:	f000 f9d4 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000017c 	.word	0x2000017c
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MX_I2C3_Init+0x54>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_I2C3_Init+0x58>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bce:	f001 fa7d 	bl	80030cc <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 f9a6 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000114 	.word	0x20000114
 8001be4:	40005c00 	.word	0x40005c00
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c18:	2253      	movs	r2, #83	; 0x53
 8001c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c24:	22f9      	movs	r2, #249	; 0xf9
 8001c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c36:	f002 ff54 	bl	8004ae2 <HAL_TIM_PWM_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c40:	f000 f972 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	4619      	mov	r1, r3
 8001c52:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c54:	f003 fd28 	bl	80056a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001c5e:	f000 f963 	bl	8001f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	; 0x60
 8001c64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2200      	movs	r2, #0
 8001c76:	4619      	mov	r1, r3
 8001c78:	4807      	ldr	r0, [pc, #28]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c7a:	f003 f9f9 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001c84:	f000 f950 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <MX_TIM2_Init+0xac>)
 8001c8a:	f000 fca3 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002a8 	.word	0x200002a8

08001c9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
 8001cba:	615a      	str	r2, [r3, #20]
 8001cbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <MX_TIM5_Init+0xa8>)
 8001cc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001cc6:	2253      	movs	r2, #83	; 0x53
 8001cc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999999;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <MX_TIM5_Init+0xac>)
 8001cd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001ce4:	f002 feae 	bl	8004a44 <HAL_TIM_OC_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001cee:	f000 f91b 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480f      	ldr	r0, [pc, #60]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001d02:	f003 fcd1 	bl	80056a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001d0c:	f000 f90c 	bl	8001f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2204      	movs	r2, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <MX_TIM5_Init+0xa4>)
 8001d28:	f003 f946 	bl	8004fb8 <HAL_TIM_OC_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001d32:	f000 f8f9 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200001d4 	.word	0x200001d4
 8001d44:	40000c00 	.word	0x40000c00
 8001d48:	001e847f 	.word	0x001e847f

08001d4c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_TIM11_Init+0x40>)
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <MX_TIM11_Init+0x44>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <MX_TIM11_Init+0x40>)
 8001d58:	f240 3247 	movw	r2, #839	; 0x347
 8001d5c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_TIM11_Init+0x40>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_TIM11_Init+0x40>)
 8001d66:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d6a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <MX_TIM11_Init+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_TIM11_Init+0x40>)
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_TIM11_Init+0x40>)
 8001d7a:	f002 fdb1 	bl	80048e0 <HAL_TIM_Base_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001d84:	f000 f8d0 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000260 	.word	0x20000260
 8001d90:	40014800 	.word	0x40014800

08001d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_USART1_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f003 fcee 	bl	80057ac <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f8a7 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000021c 	.word	0x2000021c
 8001de4:	40011000 	.word	0x40011000

08001de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_USART2_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f003 fcc4 	bl	80057ac <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f000 f87d 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002f0 	.word	0x200002f0
 8001e38:	40004400 	.word	0x40004400

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a30      	ldr	r2, [pc, #192]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <MX_GPIO_Init+0xe0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	4816      	ldr	r0, [pc, #88]	; (8001f20 <MX_GPIO_Init+0xe4>)
 8001ec8:	f001 f8ce 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4810      	ldr	r0, [pc, #64]	; (8001f24 <MX_GPIO_Init+0xe8>)
 8001ee4:	f000 ff24 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4808      	ldr	r0, [pc, #32]	; (8001f20 <MX_GPIO_Init+0xe4>)
 8001f00:	f000 ff16 	bl	8002d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	2028      	movs	r0, #40	; 0x28
 8001f0a:	f000 fe48 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f0e:	2028      	movs	r0, #40	; 0x28
 8001f10:	f000 fe61 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020800 	.word	0x40020800

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <Error_Handler+0x8>
	...

08001f34 <omni_init>:
#include "motor_control.h"
#include "math.h"

static float params[12];

uint8_t omni_init(){
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

	// Wheel 1 -- front left
	params[0] = 0;
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <omni_init+0x6c>)
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
	params[1] = -1;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <omni_init+0x6c>)
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <omni_init+0x70>)
 8001f44:	605a      	str	r2, [r3, #4]
	params[2] = 1;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <omni_init+0x6c>)
 8001f48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f4c:	609a      	str	r2, [r3, #8]

	// Wheel 2 -- front right
	params[3] = 0;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <omni_init+0x6c>)
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
	params[4] = 1;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <omni_init+0x6c>)
 8001f58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f5c:	611a      	str	r2, [r3, #16]
	params[5] = 1;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <omni_init+0x6c>)
 8001f60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f64:	615a      	str	r2, [r3, #20]

	// Wheel 3 -- back right
	params[6] = 0;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <omni_init+0x6c>)
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
	params[7] = -1;
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <omni_init+0x6c>)
 8001f70:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <omni_init+0x70>)
 8001f72:	61da      	str	r2, [r3, #28]
	params[8] = 1;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <omni_init+0x6c>)
 8001f76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f7a:	621a      	str	r2, [r3, #32]

	// Wheel 4 -- back left
	params[9] = 0;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <omni_init+0x6c>)
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
	params[10] = 1;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <omni_init+0x6c>)
 8001f86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
	params[11] = 1;
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <omni_init+0x6c>)
 8001f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c

	return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	200000d0 	.word	0x200000d0
 8001fa4:	bf800000 	.word	0xbf800000

08001fa8 <getMotorVels>:

int8_t * getMotorVels(uint8_t magnitude, float * direction){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
	static int8_t motor_cmds[4];
	matrixMult(magnitude, direction, motor_cmds);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <getMotorVels+0x24>)
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f808 	bl	8001fd0 <matrixMult>
	return motor_cmds;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <getMotorVels+0x24>)
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000100 	.word	0x20000100

08001fd0 <matrixMult>:

void matrixMult(uint8_t magnitude, float *direction, int8_t *motor_cmds){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	73fb      	strb	r3, [r7, #15]
	float motor1;
	float motor2;
	float motor3;
	float motor4;

	float xv = direction[0] * magnitude;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	ed93 7a00 	vldr	s14, [r3]
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff2:	edc7 7a07 	vstr	s15, [r7, #28]
	int8_t x_vel = ceil(xv);
 8001ff6:	69f8      	ldr	r0, [r7, #28]
 8001ff8:	f7fe faa6 	bl	8000548 <__aeabi_f2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	ec43 2b10 	vmov	d0, r2, r3
 8002004:	f004 ff90 	bl	8006f28 <ceil>
 8002008:	ec53 2b10 	vmov	r2, r3, d0
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fda2 	bl	8000b58 <__aeabi_d2iz>
 8002014:	4603      	mov	r3, r0
 8002016:	76fb      	strb	r3, [r7, #27]


	float yv = direction[1] * magnitude;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	3304      	adds	r3, #4
 800201c:	ed93 7a00 	vldr	s14, [r3]
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	edc7 7a05 	vstr	s15, [r7, #20]
	int8_t y_vel = ceil(yv);
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7fe fa88 	bl	8000548 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	ec43 2b10 	vmov	d0, r2, r3
 8002040:	f004 ff72 	bl	8006f28 <ceil>
 8002044:	ec53 2b10 	vmov	r2, r3, d0
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fd84 	bl	8000b58 <__aeabi_d2iz>
 8002050:	4603      	mov	r3, r0
 8002052:	74fb      	strb	r3, [r7, #19]


	motor_cmds[0] = params[1] * x_vel + params[2] * y_vel;
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <matrixMult+0x194>)
 8002056:	ed93 7a01 	vldr	s14, [r3, #4]
 800205a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <matrixMult+0x194>)
 800206c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002070:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002088:	edc7 7a00 	vstr	s15, [r7]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b25a      	sxtb	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	701a      	strb	r2, [r3, #0]
	motor_cmds[1] = params[4] * x_vel + params[5] * y_vel;
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <matrixMult+0x194>)
 8002096:	ed93 7a04 	vldr	s14, [r3, #16]
 800209a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <matrixMult+0x194>)
 80020ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80020b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020cc:	edc7 7a00 	vstr	s15, [r7]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	b252      	sxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]
	motor_cmds[2] = params[7] * x_vel + params[8] * y_vel;
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <matrixMult+0x194>)
 80020d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80020dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <matrixMult+0x194>)
 80020ee:	edd3 6a08 	vldr	s13, [r3, #32]
 80020f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3302      	adds	r3, #2
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	edc7 7a00 	vstr	s15, [r7]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	b252      	sxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
	motor_cmds[3] = params[10] * x_vel + params[11] * y_vel;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <matrixMult+0x194>)
 800211a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800211e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <matrixMult+0x194>)
 8002130:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3303      	adds	r3, #3
 800214c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002150:	edc7 7a00 	vstr	s15, [r7]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	b252      	sxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200000d0 	.word	0x200000d0

08002168 <piezo_init>:

#include "piezo.h"

static TIM_HandleTypeDef* htim;

void piezo_init(TIM_HandleTypeDef* htim_in) {
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	htim = htim_in;
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <piezo_init+0x1c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000104 	.word	0x20000104

08002188 <changeFrequency>:

void changeFrequency(int note /* Hz */) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	int arr = 1000000/noteArray[note];
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <changeFrequency+0x80>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	ed93 7a00 	vldr	s14, [r3]
 800219c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800220c <changeFrequency+0x84>
 80021a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a8:	ee17 3a90 	vmov	r3, s15
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <changeFrequency+0x88>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fd93 	bl	8004ce0 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	htim->Init.Period = arr - 1;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <changeFrequency+0x88>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(htim);
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <changeFrequency+0x88>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fc8a 	bl	8004ae2 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ce:	2360      	movs	r3, #96	; 0x60
 80021d0:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = arr/2;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	0fda      	lsrs	r2, r3, #31
 80021d6:	4413      	add	r3, r2
 80021d8:	105b      	asrs	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
	HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <changeFrequency+0x88>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f107 0108 	add.w	r1, r7, #8
 80021ec:	2200      	movs	r2, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 ff3e 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <changeFrequency+0x88>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fcc0 	bl	8004b80 <HAL_TIM_PWM_Start>
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000000c 	.word	0x2000000c
 800220c:	49742400 	.word	0x49742400
 8002210:	20000104 	.word	0x20000104

08002214 <delay>:

void delay(int len) {
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < len; ++i) {}
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e002      	b.n	8002228 <delay+0x14>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	dbf8      	blt.n	8002222 <delay+0xe>
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <rest>:

void rest(int len) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <rest+0x24>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fd46 	bl	8004ce0 <HAL_TIM_PWM_Stop>
	delay(len);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffdd 	bl	8002214 <delay>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000104 	.word	0x20000104

08002268 <playNote>:

void playNote(int len, int note, int restLen) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	changeFrequency(note);
 8002274:	68b8      	ldr	r0, [r7, #8]
 8002276:	f7ff ff87 	bl	8002188 <changeFrequency>
	delay(len);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff ffca 	bl	8002214 <delay>
	rest(restLen);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ffdd 	bl	8002240 <rest>
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <playDeathSound>:

void playDeathSound() {
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	playNote(HALF, D, BURST);
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <playDeathSound+0x50>)
 8002296:	2101      	movs	r1, #1
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <playDeathSound+0x54>)
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ffe4 	bl	8002268 <playNote>
	playNote(QUARTER, D, BURST);
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <playDeathSound+0x58>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <playDeathSound+0x54>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ffde 	bl	8002268 <playNote>
	playNote(FULL, G, BURST);
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <playDeathSound+0x5c>)
 80022ae:	2104      	movs	r1, #4
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <playDeathSound+0x54>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ffd8 	bl	8002268 <playNote>
	playNote(HALF, D, BURST);
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <playDeathSound+0x50>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <playDeathSound+0x54>)
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ffd2 	bl	8002268 <playNote>
	playNote(QUARTER, G, BURST);
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <playDeathSound+0x58>)
 80022c6:	2104      	movs	r1, #4
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <playDeathSound+0x54>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ffcc 	bl	8002268 <playNote>
	playNote(FULL, B, BURST);
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <playDeathSound+0x5c>)
 80022d2:	2106      	movs	r1, #6
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <playDeathSound+0x54>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ffc6 	bl	8002268 <playNote>
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	004c4b40 	.word	0x004c4b40
 80022e4:	000493e0 	.word	0x000493e0
 80022e8:	002dc6c0 	.word	0x002dc6c0
 80022ec:	00989680 	.word	0x00989680

080022f0 <playHitSound>:

void playHitSound() {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	playNote(QUARTER, C_HIGH, 1);
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <playHitSound+0x50>)
 80022f6:	2107      	movs	r1, #7
 80022f8:	2201      	movs	r2, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ffb4 	bl	8002268 <playNote>
	playNote(QUARTER, F, 1);
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <playHitSound+0x50>)
 8002302:	2103      	movs	r1, #3
 8002304:	2201      	movs	r2, #1
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ffae 	bl	8002268 <playNote>
	playNote(QUARTER, C_HIGH, 1);
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <playHitSound+0x50>)
 800230e:	2107      	movs	r1, #7
 8002310:	2201      	movs	r2, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffa8 	bl	8002268 <playNote>
	playNote(QUARTER, F, 1);
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <playHitSound+0x50>)
 800231a:	2103      	movs	r1, #3
 800231c:	2201      	movs	r2, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffa2 	bl	8002268 <playNote>
	playNote(QUARTER, C_HIGH, 1);
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <playHitSound+0x50>)
 8002326:	2107      	movs	r1, #7
 8002328:	2201      	movs	r2, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff9c 	bl	8002268 <playNote>
	playNote(QUARTER, F, 1);
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <playHitSound+0x50>)
 8002332:	2103      	movs	r1, #3
 8002334:	2201      	movs	r2, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff96 	bl	8002268 <playNote>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	002dc6c0 	.word	0x002dc6c0

08002344 <playFireSound>:

void playFireSound() {
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	playNote(BURST, C_HIGH, 1);
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <playFireSound+0x2c>)
 800234a:	2107      	movs	r1, #7
 800234c:	2201      	movs	r2, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff8a 	bl	8002268 <playNote>
	playNote(BURST, F, 1);
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <playFireSound+0x2c>)
 8002356:	2103      	movs	r1, #3
 8002358:	2201      	movs	r2, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff84 	bl	8002268 <playNote>
	playNote(BURST, C_LOW, 1);
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <playFireSound+0x2c>)
 8002362:	2100      	movs	r1, #0
 8002364:	2201      	movs	r2, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff7e 	bl	8002268 <playNote>
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	000493e0 	.word	0x000493e0

08002374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_MspInit+0x4c>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_MspInit+0x4c>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_MspInit+0x4c>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_MspInit+0x4c>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <HAL_MspInit+0x4c>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_MspInit+0x4c>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023b2:	2007      	movs	r0, #7
 80023b4:	f000 fbe8 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a42      	ldr	r2, [pc, #264]	; (80024ec <HAL_I2C_MspInit+0x128>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d12d      	bne.n	8002442 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002408:	2312      	movs	r3, #18
 800240a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002414:	2304      	movs	r3, #4
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	4835      	ldr	r0, [pc, #212]	; (80024f4 <HAL_I2C_MspInit+0x130>)
 8002420:	f000 fc86 	bl	8002d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 800242e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002432:	6413      	str	r3, [r2, #64]	; 0x40
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002440:	e04f      	b.n	80024e2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2c      	ldr	r2, [pc, #176]	; (80024f8 <HAL_I2C_MspInit+0x134>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d14a      	bne.n	80024e2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248a:	2312      	movs	r3, #18
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002496:	2304      	movs	r3, #4
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 031c 	add.w	r3, r7, #28
 800249e:	4619      	mov	r1, r3
 80024a0:	4816      	ldr	r0, [pc, #88]	; (80024fc <HAL_I2C_MspInit+0x138>)
 80024a2:	f000 fc45 	bl	8002d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024a6:	2310      	movs	r3, #16
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024aa:	2312      	movs	r3, #18
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80024b6:	2309      	movs	r3, #9
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <HAL_I2C_MspInit+0x130>)
 80024c2:	f000 fc35 	bl	8002d30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 80024d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_I2C_MspInit+0x12c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
}
 80024e2:	bf00      	nop
 80024e4:	3730      	adds	r7, #48	; 0x30
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40005400 	.word	0x40005400
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40005c00 	.word	0x40005c00
 80024fc:	40020000 	.word	0x40020000

08002500 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d10d      	bne.n	800252e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_TIM_PWM_MspInit+0x3c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_TIM_PWM_MspInit+0x3c>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_TIM_PWM_MspInit+0x3c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_TIM_OC_MspInit+0x3c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10d      	bne.n	800256e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_TIM_OC_MspInit+0x40>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_TIM_OC_MspInit+0x40>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_TIM_OC_MspInit+0x40>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40000c00 	.word	0x40000c00
 8002580:	40023800 	.word	0x40023800

08002584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_TIM_Base_MspInit+0x48>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d115      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_TIM_Base_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <HAL_TIM_Base_MspInit+0x4c>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	201a      	movs	r0, #26
 80025b8:	f000 faf1 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80025bc:	201a      	movs	r0, #26
 80025be:	f000 fb0a 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40014800 	.word	0x40014800
 80025d0:	40023800 	.word	0x40023800

080025d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d11d      	bne.n	8002632 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002612:	2301      	movs	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002622:	2301      	movs	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4619      	mov	r1, r3
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 800262e:	f000 fb7f 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a36      	ldr	r2, [pc, #216]	; (800273c <HAL_UART_MspInit+0xf8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d135      	bne.n	80026d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_UART_MspInit+0xfc>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a34      	ldr	r2, [pc, #208]	; (8002740 <HAL_UART_MspInit+0xfc>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_UART_MspInit+0xfc>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <HAL_UART_MspInit+0xfc>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <HAL_UART_MspInit+0xfc>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_UART_MspInit+0xfc>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800269e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b0:	2307      	movs	r3, #7
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4619      	mov	r1, r3
 80026ba:	4822      	ldr	r0, [pc, #136]	; (8002744 <HAL_UART_MspInit+0x100>)
 80026bc:	f000 fb38 	bl	8002d30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2100      	movs	r1, #0
 80026c4:	2025      	movs	r0, #37	; 0x25
 80026c6:	f000 fa6a 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026ca:	2025      	movs	r0, #37	; 0x25
 80026cc:	f000 fa83 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026d0:	e030      	b.n	8002734 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_UART_MspInit+0x104>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d12b      	bne.n	8002734 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_UART_MspInit+0xfc>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <HAL_UART_MspInit+0xfc>)
 80026e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_UART_MspInit+0xfc>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_UART_MspInit+0xfc>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_UART_MspInit+0xfc>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6313      	str	r3, [r2, #48]	; 0x30
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_UART_MspInit+0xfc>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002714:	230c      	movs	r3, #12
 8002716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002724:	2307      	movs	r3, #7
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	4619      	mov	r1, r3
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_UART_MspInit+0x100>)
 8002730:	f000 fafe 	bl	8002d30 <HAL_GPIO_Init>
}
 8002734:	bf00      	nop
 8002736:	3730      	adds	r7, #48	; 0x30
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40011000 	.word	0x40011000
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000
 8002748:	40004400 	.word	0x40004400

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002798:	f000 f8e2 	bl	8002960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80027a6:	f002 faff 	bl	8004da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000260 	.word	0x20000260

080027b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <USART1_IRQHandler+0x10>)
 80027ba:	f003 f8d7 	bl	800596c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000021c 	.word	0x2000021c

080027c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027d0:	f000 fc64 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f003 ff2e 	bl	8006668 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20018000 	.word	0x20018000
 8002838:	00000400 	.word	0x00000400
 800283c:	20000108 	.word	0x20000108
 8002840:	20000348 	.word	0x20000348

08002844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <SystemInit+0x20>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	4a05      	ldr	r2, [pc, #20]	; (8002864 <SystemInit+0x20>)
 8002850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800286e:	490e      	ldr	r1, [pc, #56]	; (80028a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002874:	e002      	b.n	800287c <LoopCopyDataInit>

08002876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287a:	3304      	adds	r3, #4

0800287c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800287c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002880:	d3f9      	bcc.n	8002876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002884:	4c0b      	ldr	r4, [pc, #44]	; (80028b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002888:	e001      	b.n	800288e <LoopFillZerobss>

0800288a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800288c:	3204      	adds	r2, #4

0800288e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002890:	d3fb      	bcc.n	800288a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002892:	f7ff ffd7 	bl	8002844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002896:	f003 feed 	bl	8006674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7ff f88b 	bl	80019b4 <main>
  bx  lr    
 800289e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80028ac:	08008110 	.word	0x08008110
  ldr r2, =_sbss
 80028b0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80028b4:	20000348 	.word	0x20000348

080028b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC_IRQHandler>
	...

080028bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <HAL_Init+0x40>)
 80028c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_Init+0x40>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_Init+0x40>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f000 f94f 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f808 	bl	8002900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f0:	f7ff fd40 	bl	8002374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00

08002900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_InitTick+0x54>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_InitTick+0x58>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002916:	fbb3 f3f1 	udiv	r3, r3, r1
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f967 	bl	8002bf2 <HAL_SYSTICK_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e00e      	b.n	800294c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d80a      	bhi.n	800294a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800293c:	f000 f92f 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002940:	4a06      	ldr	r2, [pc, #24]	; (800295c <HAL_InitTick+0x5c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000002c 	.word	0x2000002c
 8002958:	20000034 	.word	0x20000034
 800295c:	20000030 	.word	0x20000030

08002960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_IncTick+0x20>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_IncTick+0x24>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4413      	add	r3, r2
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_IncTick+0x24>)
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000034 	.word	0x20000034
 8002984:	20000334 	.word	0x20000334

08002988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_GetTick+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000334 	.word	0x20000334

080029a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff ffee 	bl	8002988 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b8:	d005      	beq.n	80029c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_Delay+0x44>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029c6:	bf00      	nop
 80029c8:	f7ff ffde 	bl	8002988 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d8f7      	bhi.n	80029c8 <HAL_Delay+0x28>
  {
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000034 	.word	0x20000034

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff feb6 	bl	8002988 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d008      	beq.n	8002c3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e052      	b.n	8002ce2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0216 	bic.w	r2, r2, #22
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <HAL_DMA_Abort+0x62>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0208 	bic.w	r2, r2, #8
 8002c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8c:	e013      	b.n	8002cb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c8e:	f7ff fe7b 	bl	8002988 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d90c      	bls.n	8002cb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e015      	b.n	8002ce2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e4      	bne.n	8002c8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	223f      	movs	r2, #63	; 0x3f
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e00c      	b.n	8002d22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e159      	b.n	8003000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8148 	bne.w	8002ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a2 	beq.w	8002ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a56      	ldr	r2, [pc, #344]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_GPIO_Init+0x2ec>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a49      	ldr	r2, [pc, #292]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x202>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a48      	ldr	r2, [pc, #288]	; (8003024 <HAL_GPIO_Init+0x2f4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x1fe>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a47      	ldr	r2, [pc, #284]	; (8003028 <HAL_GPIO_Init+0x2f8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x1fa>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a46      	ldr	r2, [pc, #280]	; (800302c <HAL_GPIO_Init+0x2fc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x1f6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a45      	ldr	r2, [pc, #276]	; (8003030 <HAL_GPIO_Init+0x300>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x1f2>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	; (800301c <HAL_GPIO_Init+0x2ec>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f76:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa0:	4a24      	ldr	r2, [pc, #144]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f aea2 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e001      	b.n	800305a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b2:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fb6a 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e12b      	b.n	8003336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff f966 	bl	80023c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003130:	f001 fbae 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a81      	ldr	r2, [pc, #516]	; (8003340 <HAL_I2C_Init+0x274>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d807      	bhi.n	8003150 <HAL_I2C_Init+0x84>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a80      	ldr	r2, [pc, #512]	; (8003344 <HAL_I2C_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e006      	b.n	800315e <HAL_I2C_Init+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a7d      	ldr	r2, [pc, #500]	; (8003348 <HAL_I2C_Init+0x27c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e7      	b.n	8003336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a78      	ldr	r2, [pc, #480]	; (800334c <HAL_I2C_Init+0x280>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a6a      	ldr	r2, [pc, #424]	; (8003340 <HAL_I2C_Init+0x274>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d802      	bhi.n	80031a0 <HAL_I2C_Init+0xd4>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	e009      	b.n	80031b4 <HAL_I2C_Init+0xe8>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	4a69      	ldr	r2, [pc, #420]	; (8003350 <HAL_I2C_Init+0x284>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	3301      	adds	r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	495c      	ldr	r1, [pc, #368]	; (8003340 <HAL_I2C_Init+0x274>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d819      	bhi.n	8003208 <HAL_I2C_Init+0x13c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e59      	subs	r1, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_I2C_Init+0x138>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e59      	subs	r1, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	e051      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003204:	2304      	movs	r3, #4
 8003206:	e04f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_I2C_Init+0x168>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_I2C_Init+0x18e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x196>
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_I2C_Init+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e58      	subs	r0, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	440b      	add	r3, r1
 8003278:	fbb0 f3f3 	udiv	r3, r0, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6911      	ldr	r1, [r2, #16]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	000186a0 	.word	0x000186a0
 8003344:	001e847f 	.word	0x001e847f
 8003348:	003d08ff 	.word	0x003d08ff
 800334c:	431bde83 	.word	0x431bde83
 8003350:	10624dd3 	.word	0x10624dd3

08003354 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	460b      	mov	r3, r1
 8003362:	817b      	strh	r3, [r7, #10]
 8003364:	4613      	mov	r3, r2
 8003366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff fb0e 	bl	8002988 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	f040 80e0 	bne.w	800353c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	4970      	ldr	r1, [pc, #448]	; (8003548 <HAL_I2C_Master_Transmit+0x1f4>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fc58 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	e0d3      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x50>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0cc      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d007      	beq.n	80033ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2221      	movs	r2, #33	; 0x21
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2210      	movs	r2, #16
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a50      	ldr	r2, [pc, #320]	; (800354c <HAL_I2C_Master_Transmit+0x1f8>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800340c:	8979      	ldrh	r1, [r7, #10]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fac2 	bl	800399c <I2C_MasterRequestWrite>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e08d      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003438:	e066      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fcd2 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06b      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d11b      	bne.n	80034dc <HAL_I2C_Master_Transmit+0x188>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d017      	beq.n	80034dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6a39      	ldr	r1, [r7, #32]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fcc2 	bl	8003e6a <I2C_WaitOnBTFFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d107      	bne.n	8003504 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e01a      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d194      	bne.n	800343a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	00100002 	.word	0x00100002
 800354c:	ffff0000 	.word	0xffff0000

08003550 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	461a      	mov	r2, r3
 800355c:	460b      	mov	r3, r1
 800355e:	817b      	strh	r3, [r7, #10]
 8003560:	4613      	mov	r3, r2
 8003562:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003564:	f7ff fa10 	bl	8002988 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	f040 820b 	bne.w	800398e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2319      	movs	r3, #25
 800357e:	2201      	movs	r2, #1
 8003580:	497c      	ldr	r1, [pc, #496]	; (8003774 <HAL_I2C_Master_Receive+0x224>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fb5a 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	e1fe      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_I2C_Master_Receive+0x50>
 800359c:	2302      	movs	r3, #2
 800359e:	e1f7      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d007      	beq.n	80035c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2222      	movs	r2, #34	; 0x22
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2210      	movs	r2, #16
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	893a      	ldrh	r2, [r7, #8]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a5c      	ldr	r2, [pc, #368]	; (8003778 <HAL_I2C_Master_Receive+0x228>)
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003608:	8979      	ldrh	r1, [r7, #10]
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa46 	bl	8003aa0 <I2C_MasterRequestRead>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1b8      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	d113      	bne.n	800364e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e18c      	b.n	8003968 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	2b01      	cmp	r3, #1
 8003654:	d11b      	bne.n	800368e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e16c      	b.n	8003968 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	2b02      	cmp	r3, #2
 8003694:	d11b      	bne.n	80036ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	e14c      	b.n	8003968 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036f4:	e138      	b.n	8003968 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	f200 80f1 	bhi.w	80038e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003704:	2b01      	cmp	r3, #1
 8003706:	d123      	bne.n	8003750 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fbed 	bl	8003eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e139      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800374e:	e10b      	b.n	8003968 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	2b02      	cmp	r3, #2
 8003756:	d14e      	bne.n	80037f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	2200      	movs	r2, #0
 8003760:	4906      	ldr	r1, [pc, #24]	; (800377c <HAL_I2C_Master_Receive+0x22c>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fa6a 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e10e      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
 8003772:	bf00      	nop
 8003774:	00100002 	.word	0x00100002
 8003778:	ffff0000 	.word	0xffff0000
 800377c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f4:	e0b8      	b.n	8003968 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	4966      	ldr	r1, [pc, #408]	; (8003998 <HAL_I2C_Master_Receive+0x448>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fa1b 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0bf      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	2200      	movs	r2, #0
 800385a:	494f      	ldr	r1, [pc, #316]	; (8003998 <HAL_I2C_Master_Receive+0x448>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9ed 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e091      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e0:	e042      	b.n	8003968 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fb00 	bl	8003eec <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e04c      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d118      	bne.n	8003968 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f aec2 	bne.w	80036f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3728      	adds	r7, #40	; 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00010004 	.word	0x00010004

0800399c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	460b      	mov	r3, r1
 80039aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d006      	beq.n	80039c6 <I2C_MasterRequestWrite+0x2a>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d003      	beq.n	80039c6 <I2C_MasterRequestWrite+0x2a>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039c4:	d108      	bne.n	80039d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e00b      	b.n	80039f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	2b12      	cmp	r3, #18
 80039de:	d107      	bne.n	80039f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f91d 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d103      	bne.n	8003a20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e035      	b.n	8003a90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2c:	d108      	bne.n	8003a40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a3c:	611a      	str	r2, [r3, #16]
 8003a3e:	e01b      	b.n	8003a78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	11db      	asrs	r3, r3, #7
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 0306 	and.w	r3, r3, #6
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f063 030f 	orn	r3, r3, #15
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	490e      	ldr	r1, [pc, #56]	; (8003a98 <I2C_MasterRequestWrite+0xfc>)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f943 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e010      	b.n	8003a90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4907      	ldr	r1, [pc, #28]	; (8003a9c <I2C_MasterRequestWrite+0x100>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f933 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	00010008 	.word	0x00010008
 8003a9c:	00010002 	.word	0x00010002

08003aa0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d006      	beq.n	8003ada <I2C_MasterRequestRead+0x3a>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d003      	beq.n	8003ada <I2C_MasterRequestRead+0x3a>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad8:	d108      	bne.n	8003aec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e00b      	b.n	8003b04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	2b11      	cmp	r3, #17
 8003af2:	d107      	bne.n	8003b04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f893 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2a:	d103      	bne.n	8003b34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e079      	b.n	8003c2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b40:	d108      	bne.n	8003b54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b42:	897b      	ldrh	r3, [r7, #10]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	611a      	str	r2, [r3, #16]
 8003b52:	e05f      	b.n	8003c14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b54:	897b      	ldrh	r3, [r7, #10]
 8003b56:	11db      	asrs	r3, r3, #7
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 0306 	and.w	r3, r3, #6
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f063 030f 	orn	r3, r3, #15
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4930      	ldr	r1, [pc, #192]	; (8003c34 <I2C_MasterRequestRead+0x194>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f8b9 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e054      	b.n	8003c2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4929      	ldr	r1, [pc, #164]	; (8003c38 <I2C_MasterRequestRead+0x198>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f8a9 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e044      	b.n	8003c2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f831 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bee:	d103      	bne.n	8003bf8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e017      	b.n	8003c2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bfc:	897b      	ldrh	r3, [r7, #10]
 8003bfe:	11db      	asrs	r3, r3, #7
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0306 	and.w	r3, r3, #6
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f063 030e 	orn	r3, r3, #14
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4907      	ldr	r1, [pc, #28]	; (8003c38 <I2C_MasterRequestRead+0x198>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f865 	bl	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	00010008 	.word	0x00010008
 8003c38:	00010002 	.word	0x00010002

08003c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c4c:	e025      	b.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c54:	d021      	beq.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fe fe97 	bl	8002988 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d116      	bne.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e023      	b.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10d      	bne.n	8003cc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	e00c      	b.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf0c      	ite	eq
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	2300      	movne	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d0b6      	beq.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cf8:	e051      	b.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d08:	d123      	bne.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f043 0204 	orr.w	r2, r3, #4
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e046      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d58:	d021      	beq.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe fe15 	bl	8002988 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e020      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d10c      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	43da      	mvns	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4013      	ands	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	e00b      	b.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d18d      	bne.n	8003cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df4:	e02d      	b.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8ce 	bl	8003f98 <I2C_IsAcknowledgeFailed>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e02d      	b.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0c:	d021      	beq.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fe fdbb 	bl	8002988 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d116      	bne.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e007      	b.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d1ca      	bne.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e76:	e02d      	b.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f88d 	bl	8003f98 <I2C_IsAcknowledgeFailed>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e02d      	b.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e8e:	d021      	beq.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fe fd7a 	bl	8002988 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d116      	bne.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e007      	b.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d1ca      	bne.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef8:	e042      	b.n	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d119      	bne.n	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0210 	mvn.w	r2, #16
 8003f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e029      	b.n	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3c:	f7fe fd24 	bl	8002988 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d302      	bcc.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e007      	b.n	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d1b5      	bne.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d11b      	bne.n	8003fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	f043 0204 	orr.w	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e264      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d075      	beq.n	8004102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004016:	4ba3      	ldr	r3, [pc, #652]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d00c      	beq.n	800403c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402a:	2b08      	cmp	r3, #8
 800402c:	d112      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402e:	4b9d      	ldr	r3, [pc, #628]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403a:	d10b      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	4b99      	ldr	r3, [pc, #612]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05b      	beq.n	8004100 <HAL_RCC_OscConfig+0x108>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d157      	bne.n	8004100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e23f      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d106      	bne.n	800406c <HAL_RCC_OscConfig+0x74>
 800405e:	4b91      	ldr	r3, [pc, #580]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a90      	ldr	r2, [pc, #576]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x98>
 8004076:	4b8b      	ldr	r3, [pc, #556]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a8a      	ldr	r2, [pc, #552]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b88      	ldr	r3, [pc, #544]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a87      	ldr	r2, [pc, #540]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 8004090:	4b84      	ldr	r3, [pc, #528]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a83      	ldr	r2, [pc, #524]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b81      	ldr	r3, [pc, #516]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a80      	ldr	r2, [pc, #512]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe fc6a 	bl	8002988 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fc66 	bl	8002988 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e204      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xc0>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe fc56 	bl	8002988 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe fc52 	bl	8002988 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1f0      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	4b6c      	ldr	r3, [pc, #432]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0xe8>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d063      	beq.n	80041d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410e:	4b65      	ldr	r3, [pc, #404]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b62      	ldr	r3, [pc, #392]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004122:	2b08      	cmp	r3, #8
 8004124:	d11c      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004126:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	4b5c      	ldr	r3, [pc, #368]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e1c4      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b56      	ldr	r3, [pc, #344]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4952      	ldr	r1, [pc, #328]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	e03a      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	4b4f      	ldr	r3, [pc, #316]	; (80042a8 <HAL_RCC_OscConfig+0x2b0>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fe fc0b 	bl	8002988 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004176:	f7fe fc07 	bl	8002988 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1a5      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4940      	ldr	r1, [pc, #256]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	e015      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041aa:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCC_OscConfig+0x2b0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fe fbea 	bl	8002988 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b8:	f7fe fbe6 	bl	8002988 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e184      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d030      	beq.n	8004244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ea:	4b30      	ldr	r3, [pc, #192]	; (80042ac <HAL_RCC_OscConfig+0x2b4>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe fbca 	bl	8002988 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f8:	f7fe fbc6 	bl	8002988 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e164      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x200>
 8004216:	e015      	b.n	8004244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_OscConfig+0x2b4>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fe fbb3 	bl	8002988 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004226:	f7fe fbaf 	bl	8002988 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e14d      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800423a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80a0 	beq.w	8004392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_OscConfig+0x2b8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d121      	bne.n	80042d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_RCC_OscConfig+0x2b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <HAL_RCC_OscConfig+0x2b8>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429a:	f7fe fb75 	bl	8002988 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	e011      	b.n	80042c6 <HAL_RCC_OscConfig+0x2ce>
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	42470000 	.word	0x42470000
 80042ac:	42470e80 	.word	0x42470e80
 80042b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b4:	f7fe fb68 	bl	8002988 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e106      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	4b85      	ldr	r3, [pc, #532]	; (80044dc <HAL_RCC_OscConfig+0x4e4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d106      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
 80042da:	4b81      	ldr	r3, [pc, #516]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6713      	str	r3, [r2, #112]	; 0x70
 80042e6:	e01c      	b.n	8004322 <HAL_RCC_OscConfig+0x32a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d10c      	bne.n	800430a <HAL_RCC_OscConfig+0x312>
 80042f0:	4b7b      	ldr	r3, [pc, #492]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a7a      	ldr	r2, [pc, #488]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
 80042fc:	4b78      	ldr	r3, [pc, #480]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	4a77      	ldr	r2, [pc, #476]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6713      	str	r3, [r2, #112]	; 0x70
 8004308:	e00b      	b.n	8004322 <HAL_RCC_OscConfig+0x32a>
 800430a:	4b75      	ldr	r3, [pc, #468]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a74      	ldr	r2, [pc, #464]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
 8004316:	4b72      	ldr	r3, [pc, #456]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	4a71      	ldr	r2, [pc, #452]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 800431c:	f023 0304 	bic.w	r3, r3, #4
 8004320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d015      	beq.n	8004356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7fe fb2d 	bl	8002988 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fe fb29 	bl	8002988 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0c5      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004348:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ee      	beq.n	8004332 <HAL_RCC_OscConfig+0x33a>
 8004354:	e014      	b.n	8004380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004356:	f7fe fb17 	bl	8002988 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435c:	e00a      	b.n	8004374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435e:	f7fe fb13 	bl	8002988 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f241 3288 	movw	r2, #5000	; 0x1388
 800436c:	4293      	cmp	r3, r2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e0af      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004374:	4b5a      	ldr	r3, [pc, #360]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ee      	bne.n	800435e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d105      	bne.n	8004392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004386:	4b56      	ldr	r3, [pc, #344]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a55      	ldr	r2, [pc, #340]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 800438c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 809b 	beq.w	80044d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800439c:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d05c      	beq.n	8004462 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d141      	bne.n	8004434 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b0:	4b4c      	ldr	r3, [pc, #304]	; (80044e4 <HAL_RCC_OscConfig+0x4ec>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fe fae7 	bl	8002988 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043be:	f7fe fae3 	bl	8002988 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e081      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d0:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	019b      	lsls	r3, r3, #6
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	3b01      	subs	r3, #1
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	4937      	ldr	r1, [pc, #220]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCC_OscConfig+0x4ec>)
 8004408:	2201      	movs	r2, #1
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fabc 	bl	8002988 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe fab8 	bl	8002988 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e056      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004426:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x41c>
 8004432:	e04e      	b.n	80044d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCC_OscConfig+0x4ec>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe faa5 	bl	8002988 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe faa1 	bl	8002988 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e03f      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004454:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x44a>
 8004460:	e037      	b.n	80044d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e032      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800446e:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <HAL_RCC_OscConfig+0x4e8>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d028      	beq.n	80044ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d121      	bne.n	80044ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d11a      	bne.n	80044ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800449e:	4013      	ands	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d111      	bne.n	80044ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d001      	beq.n	80044d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40007000 	.word	0x40007000
 80044e0:	40023800 	.word	0x40023800
 80044e4:	42470060 	.word	0x42470060

080044e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0cc      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d90c      	bls.n	8004524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b8      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800455e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	494d      	ldr	r1, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d044      	beq.n	8004608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d119      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e067      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4934      	ldr	r1, [pc, #208]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d8:	f7fe f9d6 	bl	8002988 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fe f9d2 	bl	8002988 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d20c      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e032      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4916      	ldr	r1, [pc, #88]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800466e:	f000 f821 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490a      	ldr	r1, [pc, #40]	; (80046a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe f936 	bl	8002900 <HAL_InitTick>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023c00 	.word	0x40023c00
 80046a4:	40023800 	.word	0x40023800
 80046a8:	08008074 	.word	0x08008074
 80046ac:	2000002c 	.word	0x2000002c
 80046b0:	20000030 	.word	0x20000030

080046b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	2300      	movs	r3, #0
 80046c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046cc:	4b67      	ldr	r3, [pc, #412]	; (800486c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d00d      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x40>
 80046d8:	2b08      	cmp	r3, #8
 80046da:	f200 80bd 	bhi.w	8004858 <HAL_RCC_GetSysClockFreq+0x1a4>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x34>
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x3a>
 80046e6:	e0b7      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b61      	ldr	r3, [pc, #388]	; (8004870 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046ea:	60bb      	str	r3, [r7, #8]
       break;
 80046ec:	e0b7      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ee:	4b61      	ldr	r3, [pc, #388]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046f0:	60bb      	str	r3, [r7, #8]
      break;
 80046f2:	e0b4      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f4:	4b5d      	ldr	r3, [pc, #372]	; (800486c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046fe:	4b5b      	ldr	r3, [pc, #364]	; (800486c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04d      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b58      	ldr	r3, [pc, #352]	; (800486c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	461a      	mov	r2, r3
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	ea02 0800 	and.w	r8, r2, r0
 8004722:	ea03 0901 	and.w	r9, r3, r1
 8004726:	4640      	mov	r0, r8
 8004728:	4649      	mov	r1, r9
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	014b      	lsls	r3, r1, #5
 8004734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004738:	0142      	lsls	r2, r0, #5
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	ebb0 0008 	subs.w	r0, r0, r8
 8004742:	eb61 0109 	sbc.w	r1, r1, r9
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	018b      	lsls	r3, r1, #6
 8004750:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004754:	0182      	lsls	r2, r0, #6
 8004756:	1a12      	subs	r2, r2, r0
 8004758:	eb63 0301 	sbc.w	r3, r3, r1
 800475c:	f04f 0000 	mov.w	r0, #0
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	00d9      	lsls	r1, r3, #3
 8004766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476a:	00d0      	lsls	r0, r2, #3
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	eb12 0208 	adds.w	r2, r2, r8
 8004774:	eb43 0309 	adc.w	r3, r3, r9
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	0259      	lsls	r1, r3, #9
 8004782:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004786:	0250      	lsls	r0, r2, #9
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f7fc fa56 	bl	8000c48 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e04a      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	099b      	lsrs	r3, r3, #6
 80047ac:	461a      	mov	r2, r3
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	ea02 0400 	and.w	r4, r2, r0
 80047be:	ea03 0501 	and.w	r5, r3, r1
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	014b      	lsls	r3, r1, #5
 80047d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047d4:	0142      	lsls	r2, r0, #5
 80047d6:	4610      	mov	r0, r2
 80047d8:	4619      	mov	r1, r3
 80047da:	1b00      	subs	r0, r0, r4
 80047dc:	eb61 0105 	sbc.w	r1, r1, r5
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	018b      	lsls	r3, r1, #6
 80047ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047ee:	0182      	lsls	r2, r0, #6
 80047f0:	1a12      	subs	r2, r2, r0
 80047f2:	eb63 0301 	sbc.w	r3, r3, r1
 80047f6:	f04f 0000 	mov.w	r0, #0
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	00d9      	lsls	r1, r3, #3
 8004800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004804:	00d0      	lsls	r0, r2, #3
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	1912      	adds	r2, r2, r4
 800480c:	eb45 0303 	adc.w	r3, r5, r3
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	0299      	lsls	r1, r3, #10
 800481a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800481e:	0290      	lsls	r0, r2, #10
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	461a      	mov	r2, r3
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	f7fc fa0a 	bl	8000c48 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	3301      	adds	r3, #1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	60bb      	str	r3, [r7, #8]
      break;
 8004856:	e002      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800485a:	60bb      	str	r3, [r7, #8]
      break;
 800485c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485e:	68bb      	ldr	r3, [r7, #8]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	007a1200 	.word	0x007a1200

08004878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	2000002c 	.word	0x2000002c

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004894:	f7ff fff0 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	08008084 	.word	0x08008084

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048bc:	f7ff ffdc 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0b5b      	lsrs	r3, r3, #13
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	08008084 	.word	0x08008084

080048e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e041      	b.n	8004976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd fe3c 	bl	8002584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 fc90 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d001      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e044      	b.n	8004a22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <HAL_TIM_Base_Start_IT+0xb0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x6c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c2:	d013      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x6c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1a      	ldr	r2, [pc, #104]	; (8004a34 <HAL_TIM_Base_Start_IT+0xb4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x6c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <HAL_TIM_Base_Start_IT+0xb8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x6c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <HAL_TIM_Base_Start_IT+0xbc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x6c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_TIM_Base_Start_IT+0xc0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40014000 	.word	0x40014000

08004a44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e041      	b.n	8004ada <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fd fd68 	bl	8002540 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 fbde 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e041      	b.n	8004b78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fd fcf9 	bl	8002500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 fb8f 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_TIM_PWM_Start+0x24>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e022      	b.n	8004bea <HAL_TIM_PWM_Start+0x6a>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d109      	bne.n	8004bbe <HAL_TIM_PWM_Start+0x3e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e015      	b.n	8004bea <HAL_TIM_PWM_Start+0x6a>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d109      	bne.n	8004bd8 <HAL_TIM_PWM_Start+0x58>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e008      	b.n	8004bea <HAL_TIM_PWM_Start+0x6a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e068      	b.n	8004cc4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_PWM_Start+0x82>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c00:	e013      	b.n	8004c2a <HAL_TIM_PWM_Start+0xaa>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x92>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c10:	e00b      	b.n	8004c2a <HAL_TIM_PWM_Start+0xaa>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Start+0xa2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c20:	e003      	b.n	8004c2a <HAL_TIM_PWM_Start+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fd12 	bl	800565c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a23      	ldr	r2, [pc, #140]	; (8004ccc <HAL_TIM_PWM_Start+0x14c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d107      	bne.n	8004c52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <HAL_TIM_PWM_Start+0x14c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x10e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d013      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x10e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_TIM_PWM_Start+0x150>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x10e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <HAL_TIM_PWM_Start+0x154>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x10e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <HAL_TIM_PWM_Start+0x158>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x10e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <HAL_TIM_PWM_Start+0x15c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d111      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b06      	cmp	r3, #6
 8004c9e:	d010      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb0:	e007      	b.n	8004cc2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40014000 	.word	0x40014000

08004ce0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fcb2 	bl	800565c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <HAL_TIM_PWM_Stop+0xc4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d117      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a1a      	ldr	r2, [r3, #32]
 8004d08:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x52>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	f240 4344 	movw	r3, #1092	; 0x444
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x52>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_TIM_PWM_Stop+0x82>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	f240 4344 	movw	r3, #1092	; 0x444
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_PWM_Stop+0x82>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_PWM_Stop+0x92>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	e013      	b.n	8004d9a <HAL_TIM_PWM_Stop+0xba>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Stop+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	e00b      	b.n	8004d9a <HAL_TIM_PWM_Stop+0xba>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Stop+0xb2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	e003      	b.n	8004d9a <HAL_TIM_PWM_Stop+0xba>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40010000 	.word	0x40010000

08004da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d122      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d11b      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0202 	mvn.w	r2, #2
 8004dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fa0c 	bl	8005208 <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f9fe 	bl	80051f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa0f 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d122      	bne.n	8004e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d11b      	bne.n	8004e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0204 	mvn.w	r2, #4
 8004e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f9e2 	bl	8005208 <HAL_TIM_IC_CaptureCallback>
 8004e44:	e005      	b.n	8004e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9d4 	bl	80051f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f9e5 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d122      	bne.n	8004eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d11b      	bne.n	8004eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0208 	mvn.w	r2, #8
 8004e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2204      	movs	r2, #4
 8004e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9b8 	bl	8005208 <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9aa 	bl	80051f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f9bb 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d122      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d11b      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0210 	mvn.w	r2, #16
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f98e 	bl	8005208 <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f980 	bl	80051f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f991 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d10e      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d107      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0201 	mvn.w	r2, #1
 8004f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fc fcb0 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	2b80      	cmp	r3, #128	; 0x80
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fc20 	bl	8005798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f956 	bl	8005230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0220 	mvn.w	r2, #32
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fbea 	bl	8005784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e048      	b.n	8005068 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d839      	bhi.n	8005058 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <HAL_TIM_OC_ConfigChannel+0x34>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08005059 	.word	0x08005059
 8004ff8:	08005059 	.word	0x08005059
 8004ffc:	0800502f 	.word	0x0800502f
 8005000:	08005059 	.word	0x08005059
 8005004:	08005059 	.word	0x08005059
 8005008:	08005059 	.word	0x08005059
 800500c:	0800503d 	.word	0x0800503d
 8005010:	08005059 	.word	0x08005059
 8005014:	08005059 	.word	0x08005059
 8005018:	08005059 	.word	0x08005059
 800501c:	0800504b 	.word	0x0800504b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f98c 	bl	8005344 <TIM_OC1_SetConfig>
      break;
 800502c:	e017      	b.n	800505e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f9eb 	bl	8005410 <TIM_OC2_SetConfig>
      break;
 800503a:	e010      	b.n	800505e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fa50 	bl	80054e8 <TIM_OC3_SetConfig>
      break;
 8005048:	e009      	b.n	800505e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fab3 	bl	80055bc <TIM_OC4_SetConfig>
      break;
 8005056:	e002      	b.n	800505e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
      break;
 800505c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800508a:	2302      	movs	r3, #2
 800508c:	e0ae      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	f200 809f 	bhi.w	80051dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080051dd 	.word	0x080051dd
 80050ac:	080051dd 	.word	0x080051dd
 80050b0:	080051dd 	.word	0x080051dd
 80050b4:	08005119 	.word	0x08005119
 80050b8:	080051dd 	.word	0x080051dd
 80050bc:	080051dd 	.word	0x080051dd
 80050c0:	080051dd 	.word	0x080051dd
 80050c4:	0800515b 	.word	0x0800515b
 80050c8:	080051dd 	.word	0x080051dd
 80050cc:	080051dd 	.word	0x080051dd
 80050d0:	080051dd 	.word	0x080051dd
 80050d4:	0800519b 	.word	0x0800519b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f930 	bl	8005344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6999      	ldr	r1, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	619a      	str	r2, [r3, #24]
      break;
 8005116:	e064      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f976 	bl	8005410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6999      	ldr	r1, [r3, #24]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	619a      	str	r2, [r3, #24]
      break;
 8005158:	e043      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 f9c1 	bl	80054e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0208 	orr.w	r2, r2, #8
 8005174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0204 	bic.w	r2, r2, #4
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
      break;
 8005198:	e023      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fa0b 	bl	80055bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	61da      	str	r2, [r3, #28]
      break;
 80051da:	e002      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
      break;
 80051e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a34      	ldr	r2, [pc, #208]	; (8005328 <TIM_Base_SetConfig+0xe4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00f      	beq.n	800527c <TIM_Base_SetConfig+0x38>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d00b      	beq.n	800527c <TIM_Base_SetConfig+0x38>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a31      	ldr	r2, [pc, #196]	; (800532c <TIM_Base_SetConfig+0xe8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_Base_SetConfig+0x38>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a30      	ldr	r2, [pc, #192]	; (8005330 <TIM_Base_SetConfig+0xec>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_Base_SetConfig+0x38>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a2f      	ldr	r2, [pc, #188]	; (8005334 <TIM_Base_SetConfig+0xf0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d108      	bne.n	800528e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a25      	ldr	r2, [pc, #148]	; (8005328 <TIM_Base_SetConfig+0xe4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01b      	beq.n	80052ce <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529c:	d017      	beq.n	80052ce <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a22      	ldr	r2, [pc, #136]	; (800532c <TIM_Base_SetConfig+0xe8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a21      	ldr	r2, [pc, #132]	; (8005330 <TIM_Base_SetConfig+0xec>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00f      	beq.n	80052ce <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a20      	ldr	r2, [pc, #128]	; (8005334 <TIM_Base_SetConfig+0xf0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00b      	beq.n	80052ce <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <TIM_Base_SetConfig+0xf4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d007      	beq.n	80052ce <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <TIM_Base_SetConfig+0xf8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <TIM_Base_SetConfig+0xfc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d108      	bne.n	80052e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a08      	ldr	r2, [pc, #32]	; (8005328 <TIM_Base_SetConfig+0xe4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d103      	bne.n	8005314 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	615a      	str	r2, [r3, #20]
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0201 	bic.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 0302 	bic.w	r3, r3, #2
 800538c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a1c      	ldr	r2, [pc, #112]	; (800540c <TIM_OC1_SetConfig+0xc8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10c      	bne.n	80053ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0308 	bic.w	r3, r3, #8
 80053a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 0304 	bic.w	r3, r3, #4
 80053b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <TIM_OC1_SetConfig+0xc8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d111      	bne.n	80053e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	621a      	str	r2, [r3, #32]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40010000 	.word	0x40010000

08005410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0210 	bic.w	r2, r3, #16
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0320 	bic.w	r3, r3, #32
 800545a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <TIM_OC2_SetConfig+0xd4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d10d      	bne.n	800548c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800548a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <TIM_OC2_SetConfig+0xd4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d113      	bne.n	80054bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800549a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000

080054e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <TIM_OC3_SetConfig+0xd0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10d      	bne.n	8005562 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800554c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <TIM_OC3_SetConfig+0xd0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d113      	bne.n	8005592 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40010000 	.word	0x40010000

080055bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a10      	ldr	r2, [pc, #64]	; (8005658 <TIM_OC4_SetConfig+0x9c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d109      	bne.n	8005630 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	019b      	lsls	r3, r3, #6
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000

0800565c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	2201      	movs	r2, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1a      	ldr	r2, [r3, #32]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	43db      	mvns	r3, r3
 800567e:	401a      	ands	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056bc:	2302      	movs	r3, #2
 80056be:	e050      	b.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570c:	d013      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a18      	ldr	r2, [pc, #96]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a16      	ldr	r2, [pc, #88]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10c      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40014000 	.word	0x40014000

08005784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e03f      	b.n	800583e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc ff36 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fd71 	bl	80062d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b08a      	sub	sp, #40	; 0x28
 800584a:	af02      	add	r7, sp, #8
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b20      	cmp	r3, #32
 8005864:	d17c      	bne.n	8005960 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_UART_Transmit+0x2c>
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e075      	b.n	8005962 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_UART_Transmit+0x3e>
 8005880:	2302      	movs	r3, #2
 8005882:	e06e      	b.n	8005962 <HAL_UART_Transmit+0x11c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589a:	f7fd f875 	bl	8002988 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d108      	bne.n	80058c8 <HAL_UART_Transmit+0x82>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e003      	b.n	80058d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058d8:	e02a      	b.n	8005930 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 faef 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e036      	b.n	8005962 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1cf      	bne.n	80058da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fabf 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e006      	b.n	8005962 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b0ba      	sub	sp, #232	; 0xe8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_UART_IRQHandler+0x66>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fbc9 	bl	8006162 <UART_Receive_IT>
      return;
 80059d0:	e256      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80de 	beq.w	8005b98 <HAL_UART_IRQHandler+0x22c>
 80059dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80d1 	beq.w	8005b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_UART_IRQHandler+0xae>
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_UART_IRQHandler+0xd2>
 8005a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0202 	orr.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_UART_IRQHandler+0xf6>
 8005a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0204 	orr.w	r2, r3, #4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <HAL_UART_IRQHandler+0x126>
 8005a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f043 0208 	orr.w	r2, r3, #8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 81ed 	beq.w	8005e76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_UART_IRQHandler+0x14e>
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fb54 	bl	8006162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x17a>
 8005ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04f      	beq.n	8005b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa5c 	bl	8005fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d141      	bne.n	8005b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3314      	adds	r3, #20
 8005b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1d9      	bne.n	8005afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d013      	beq.n	8005b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	4a7d      	ldr	r2, [pc, #500]	; (8005d48 <HAL_UART_IRQHandler+0x3dc>)
 8005b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd f8c5 	bl	8002cea <HAL_DMA_Abort_IT>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	e00e      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f990 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e00a      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f98c 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e006      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f988 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b92:	e170      	b.n	8005e76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	bf00      	nop
    return;
 8005b96:	e16e      	b.n	8005e76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f040 814a 	bne.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8143 	beq.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 813c 	beq.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	f040 80b4 	bne.w	8005d4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8140 	beq.w	8005e7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c02:	429a      	cmp	r2, r3
 8005c04:	f080 8139 	bcs.w	8005e7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1a:	f000 8088 	beq.w	8005d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1d9      	bne.n	8005c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e1      	bne.n	8005c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e3      	bne.n	8005cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fc ff6e 	bl	8002c0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8b6 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d44:	e099      	b.n	8005e7a <HAL_UART_IRQHandler+0x50e>
 8005d46:	bf00      	nop
 8005d48:	0800606b 	.word	0x0800606b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 808b 	beq.w	8005e7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8086 	beq.w	8005e7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d96:	647a      	str	r2, [r7, #68]	; 0x44
 8005d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dce:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e3      	bne.n	8005daa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e3      	bne.n	8005df0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f83e 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e34:	e023      	b.n	8005e7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_UART_IRQHandler+0x4ea>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f91f 	bl	8006092 <UART_Transmit_IT>
    return;
 8005e54:	e014      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <HAL_UART_IRQHandler+0x514>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f95f 	bl	8006132 <UART_EndTransmit_IT>
    return;
 8005e74:	e004      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
    return;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7e:	bf00      	nop
  }
}
 8005e80:	37e8      	adds	r7, #232	; 0xe8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop

08005e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b090      	sub	sp, #64	; 0x40
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed8:	e050      	b.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee0:	d04c      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ee8:	f7fc fd4e 	bl	8002988 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d241      	bcs.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f18:	637a      	str	r2, [r7, #52]	; 0x34
 8005f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e5      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f4c:	623a      	str	r2, [r7, #32]
 8005f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e5      	bne.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e00f      	b.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4013      	ands	r3, r2
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d09f      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3740      	adds	r7, #64	; 0x40
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b095      	sub	sp, #84	; 0x54
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fcc:	643a      	str	r2, [r7, #64]	; 0x40
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3314      	adds	r3, #20
 8005fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3314      	adds	r3, #20
 8005ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	2b01      	cmp	r3, #1
 800601a:	d119      	bne.n	8006050 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	60bb      	str	r3, [r7, #8]
   return(result);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f023 0310 	bic.w	r3, r3, #16
 8006032:	647b      	str	r3, [r7, #68]	; 0x44
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800603c:	61ba      	str	r2, [r7, #24]
 800603e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6979      	ldr	r1, [r7, #20]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	613b      	str	r3, [r7, #16]
   return(result);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800605e:	bf00      	nop
 8006060:	3754      	adds	r7, #84	; 0x54
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff ff09 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b21      	cmp	r3, #33	; 0x21
 80060a4:	d13e      	bne.n	8006124 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ae:	d114      	bne.n	80060da <UART_Transmit_IT+0x48>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d110      	bne.n	80060da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]
 80060d8:	e008      	b.n	80060ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6211      	str	r1, [r2, #32]
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4619      	mov	r1, r3
 80060fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10f      	bne.n	8006120 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800610e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff fe98 	bl	8005e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b08c      	sub	sp, #48	; 0x30
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b22      	cmp	r3, #34	; 0x22
 8006174:	f040 80ab 	bne.w	80062ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006180:	d117      	bne.n	80061b2 <UART_Receive_IT+0x50>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d113      	bne.n	80061b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	1c9a      	adds	r2, r3, #2
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
 80061b0:	e026      	b.n	8006200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c4:	d007      	beq.n	80061d6 <UART_Receive_IT+0x74>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <UART_Receive_IT+0x82>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e008      	b.n	80061f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29b      	uxth	r3, r3
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	4619      	mov	r1, r3
 800620e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006210:	2b00      	cmp	r3, #0
 8006212:	d15a      	bne.n	80062ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0220 	bic.w	r2, r2, #32
 8006222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	2b01      	cmp	r3, #1
 8006252:	d135      	bne.n	80062c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	613b      	str	r3, [r7, #16]
   return(result);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f023 0310 	bic.w	r3, r3, #16
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	623a      	str	r2, [r7, #32]
 800627c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	69f9      	ldr	r1, [r7, #28]
 8006280:	6a3a      	ldr	r2, [r7, #32]
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	61bb      	str	r3, [r7, #24]
   return(result);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b10      	cmp	r3, #16
 800629a:	d10a      	bne.n	80062b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff fdf9 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
 80062be:	e002      	b.n	80062c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fb fa95 	bl	80017f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e002      	b.n	80062d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e000      	b.n	80062d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062ce:	2302      	movs	r3, #2
  }
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3730      	adds	r7, #48	; 0x30
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	b09f      	sub	sp, #124	; 0x7c
 80062de:	af00      	add	r7, sp, #0
 80062e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	68d9      	ldr	r1, [r3, #12]
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	ea40 0301 	orr.w	r3, r0, r1
 80062f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	431a      	orrs	r2, r3
 8006304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	431a      	orrs	r2, r3
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	4313      	orrs	r3, r2
 8006310:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800631c:	f021 010c 	bic.w	r1, r1, #12
 8006320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006326:	430b      	orrs	r3, r1
 8006328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800632a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006336:	6999      	ldr	r1, [r3, #24]
 8006338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	ea40 0301 	orr.w	r3, r0, r1
 8006340:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4bc5      	ldr	r3, [pc, #788]	; (800665c <UART_SetConfig+0x384>)
 8006348:	429a      	cmp	r2, r3
 800634a:	d004      	beq.n	8006356 <UART_SetConfig+0x7e>
 800634c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4bc3      	ldr	r3, [pc, #780]	; (8006660 <UART_SetConfig+0x388>)
 8006352:	429a      	cmp	r2, r3
 8006354:	d103      	bne.n	800635e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006356:	f7fe faaf 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 800635a:	6778      	str	r0, [r7, #116]	; 0x74
 800635c:	e002      	b.n	8006364 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800635e:	f7fe fa97 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8006362:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636c:	f040 80b6 	bne.w	80064dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006372:	461c      	mov	r4, r3
 8006374:	f04f 0500 	mov.w	r5, #0
 8006378:	4622      	mov	r2, r4
 800637a:	462b      	mov	r3, r5
 800637c:	1891      	adds	r1, r2, r2
 800637e:	6439      	str	r1, [r7, #64]	; 0x40
 8006380:	415b      	adcs	r3, r3
 8006382:	647b      	str	r3, [r7, #68]	; 0x44
 8006384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006388:	1912      	adds	r2, r2, r4
 800638a:	eb45 0303 	adc.w	r3, r5, r3
 800638e:	f04f 0000 	mov.w	r0, #0
 8006392:	f04f 0100 	mov.w	r1, #0
 8006396:	00d9      	lsls	r1, r3, #3
 8006398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800639c:	00d0      	lsls	r0, r2, #3
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	1911      	adds	r1, r2, r4
 80063a4:	6639      	str	r1, [r7, #96]	; 0x60
 80063a6:	416b      	adcs	r3, r5
 80063a8:	667b      	str	r3, [r7, #100]	; 0x64
 80063aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	1891      	adds	r1, r2, r2
 80063b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80063b8:	415b      	adcs	r3, r3
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80063c4:	f7fa fc40 	bl	8000c48 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4ba5      	ldr	r3, [pc, #660]	; (8006664 <UART_SetConfig+0x38c>)
 80063ce:	fba3 2302 	umull	r2, r3, r3, r2
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	011e      	lsls	r6, r3, #4
 80063d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d8:	461c      	mov	r4, r3
 80063da:	f04f 0500 	mov.w	r5, #0
 80063de:	4622      	mov	r2, r4
 80063e0:	462b      	mov	r3, r5
 80063e2:	1891      	adds	r1, r2, r2
 80063e4:	6339      	str	r1, [r7, #48]	; 0x30
 80063e6:	415b      	adcs	r3, r3
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063ee:	1912      	adds	r2, r2, r4
 80063f0:	eb45 0303 	adc.w	r3, r5, r3
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	f04f 0100 	mov.w	r1, #0
 80063fc:	00d9      	lsls	r1, r3, #3
 80063fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006402:	00d0      	lsls	r0, r2, #3
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	1911      	adds	r1, r2, r4
 800640a:	65b9      	str	r1, [r7, #88]	; 0x58
 800640c:	416b      	adcs	r3, r5
 800640e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	461a      	mov	r2, r3
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	1891      	adds	r1, r2, r2
 800641c:	62b9      	str	r1, [r7, #40]	; 0x28
 800641e:	415b      	adcs	r3, r3
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006426:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800642a:	f7fa fc0d 	bl	8000c48 <__aeabi_uldivmod>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4b8c      	ldr	r3, [pc, #560]	; (8006664 <UART_SetConfig+0x38c>)
 8006434:	fba3 1302 	umull	r1, r3, r3, r2
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	2164      	movs	r1, #100	; 0x64
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	3332      	adds	r3, #50	; 0x32
 8006446:	4a87      	ldr	r2, [pc, #540]	; (8006664 <UART_SetConfig+0x38c>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006454:	441e      	add	r6, r3
 8006456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006458:	4618      	mov	r0, r3
 800645a:	f04f 0100 	mov.w	r1, #0
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	1894      	adds	r4, r2, r2
 8006464:	623c      	str	r4, [r7, #32]
 8006466:	415b      	adcs	r3, r3
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800646e:	1812      	adds	r2, r2, r0
 8006470:	eb41 0303 	adc.w	r3, r1, r3
 8006474:	f04f 0400 	mov.w	r4, #0
 8006478:	f04f 0500 	mov.w	r5, #0
 800647c:	00dd      	lsls	r5, r3, #3
 800647e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006482:	00d4      	lsls	r4, r2, #3
 8006484:	4622      	mov	r2, r4
 8006486:	462b      	mov	r3, r5
 8006488:	1814      	adds	r4, r2, r0
 800648a:	653c      	str	r4, [r7, #80]	; 0x50
 800648c:	414b      	adcs	r3, r1
 800648e:	657b      	str	r3, [r7, #84]	; 0x54
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	461a      	mov	r2, r3
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	1891      	adds	r1, r2, r2
 800649c:	61b9      	str	r1, [r7, #24]
 800649e:	415b      	adcs	r3, r3
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80064aa:	f7fa fbcd 	bl	8000c48 <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4b6c      	ldr	r3, [pc, #432]	; (8006664 <UART_SetConfig+0x38c>)
 80064b4:	fba3 1302 	umull	r1, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	2164      	movs	r1, #100	; 0x64
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	3332      	adds	r3, #50	; 0x32
 80064c6:	4a67      	ldr	r2, [pc, #412]	; (8006664 <UART_SetConfig+0x38c>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f003 0207 	and.w	r2, r3, #7
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4432      	add	r2, r6
 80064d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064da:	e0b9      	b.n	8006650 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064de:	461c      	mov	r4, r3
 80064e0:	f04f 0500 	mov.w	r5, #0
 80064e4:	4622      	mov	r2, r4
 80064e6:	462b      	mov	r3, r5
 80064e8:	1891      	adds	r1, r2, r2
 80064ea:	6139      	str	r1, [r7, #16]
 80064ec:	415b      	adcs	r3, r3
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064f4:	1912      	adds	r2, r2, r4
 80064f6:	eb45 0303 	adc.w	r3, r5, r3
 80064fa:	f04f 0000 	mov.w	r0, #0
 80064fe:	f04f 0100 	mov.w	r1, #0
 8006502:	00d9      	lsls	r1, r3, #3
 8006504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006508:	00d0      	lsls	r0, r2, #3
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	eb12 0804 	adds.w	r8, r2, r4
 8006512:	eb43 0905 	adc.w	r9, r3, r5
 8006516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	f04f 0100 	mov.w	r1, #0
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	008b      	lsls	r3, r1, #2
 800652a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800652e:	0082      	lsls	r2, r0, #2
 8006530:	4640      	mov	r0, r8
 8006532:	4649      	mov	r1, r9
 8006534:	f7fa fb88 	bl	8000c48 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4b49      	ldr	r3, [pc, #292]	; (8006664 <UART_SetConfig+0x38c>)
 800653e:	fba3 2302 	umull	r2, r3, r3, r2
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	011e      	lsls	r6, r3, #4
 8006546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006548:	4618      	mov	r0, r3
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	1894      	adds	r4, r2, r2
 8006554:	60bc      	str	r4, [r7, #8]
 8006556:	415b      	adcs	r3, r3
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800655e:	1812      	adds	r2, r2, r0
 8006560:	eb41 0303 	adc.w	r3, r1, r3
 8006564:	f04f 0400 	mov.w	r4, #0
 8006568:	f04f 0500 	mov.w	r5, #0
 800656c:	00dd      	lsls	r5, r3, #3
 800656e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006572:	00d4      	lsls	r4, r2, #3
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	1814      	adds	r4, r2, r0
 800657a:	64bc      	str	r4, [r7, #72]	; 0x48
 800657c:	414b      	adcs	r3, r1
 800657e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4618      	mov	r0, r3
 8006586:	f04f 0100 	mov.w	r1, #0
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	008b      	lsls	r3, r1, #2
 8006594:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006598:	0082      	lsls	r2, r0, #2
 800659a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800659e:	f7fa fb53 	bl	8000c48 <__aeabi_uldivmod>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <UART_SetConfig+0x38c>)
 80065a8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	2164      	movs	r1, #100	; 0x64
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	3332      	adds	r3, #50	; 0x32
 80065ba:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <UART_SetConfig+0x38c>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c6:	441e      	add	r6, r3
 80065c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ca:	4618      	mov	r0, r3
 80065cc:	f04f 0100 	mov.w	r1, #0
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	1894      	adds	r4, r2, r2
 80065d6:	603c      	str	r4, [r7, #0]
 80065d8:	415b      	adcs	r3, r3
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e0:	1812      	adds	r2, r2, r0
 80065e2:	eb41 0303 	adc.w	r3, r1, r3
 80065e6:	f04f 0400 	mov.w	r4, #0
 80065ea:	f04f 0500 	mov.w	r5, #0
 80065ee:	00dd      	lsls	r5, r3, #3
 80065f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065f4:	00d4      	lsls	r4, r2, #3
 80065f6:	4622      	mov	r2, r4
 80065f8:	462b      	mov	r3, r5
 80065fa:	eb12 0a00 	adds.w	sl, r2, r0
 80065fe:	eb43 0b01 	adc.w	fp, r3, r1
 8006602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	4618      	mov	r0, r3
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	008b      	lsls	r3, r1, #2
 8006616:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800661a:	0082      	lsls	r2, r0, #2
 800661c:	4650      	mov	r0, sl
 800661e:	4659      	mov	r1, fp
 8006620:	f7fa fb12 	bl	8000c48 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4b0e      	ldr	r3, [pc, #56]	; (8006664 <UART_SetConfig+0x38c>)
 800662a:	fba3 1302 	umull	r1, r3, r3, r2
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	2164      	movs	r1, #100	; 0x64
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	3332      	adds	r3, #50	; 0x32
 800663c:	4a09      	ldr	r2, [pc, #36]	; (8006664 <UART_SetConfig+0x38c>)
 800663e:	fba2 2303 	umull	r2, r3, r2, r3
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	f003 020f 	and.w	r2, r3, #15
 8006648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4432      	add	r2, r6
 800664e:	609a      	str	r2, [r3, #8]
}
 8006650:	bf00      	nop
 8006652:	377c      	adds	r7, #124	; 0x7c
 8006654:	46bd      	mov	sp, r7
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665a:	bf00      	nop
 800665c:	40011000 	.word	0x40011000
 8006660:	40011400 	.word	0x40011400
 8006664:	51eb851f 	.word	0x51eb851f

08006668 <__errno>:
 8006668:	4b01      	ldr	r3, [pc, #4]	; (8006670 <__errno+0x8>)
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20000038 	.word	0x20000038

08006674 <__libc_init_array>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4d0d      	ldr	r5, [pc, #52]	; (80066ac <__libc_init_array+0x38>)
 8006678:	4c0d      	ldr	r4, [pc, #52]	; (80066b0 <__libc_init_array+0x3c>)
 800667a:	1b64      	subs	r4, r4, r5
 800667c:	10a4      	asrs	r4, r4, #2
 800667e:	2600      	movs	r6, #0
 8006680:	42a6      	cmp	r6, r4
 8006682:	d109      	bne.n	8006698 <__libc_init_array+0x24>
 8006684:	4d0b      	ldr	r5, [pc, #44]	; (80066b4 <__libc_init_array+0x40>)
 8006686:	4c0c      	ldr	r4, [pc, #48]	; (80066b8 <__libc_init_array+0x44>)
 8006688:	f001 fcbc 	bl	8008004 <_init>
 800668c:	1b64      	subs	r4, r4, r5
 800668e:	10a4      	asrs	r4, r4, #2
 8006690:	2600      	movs	r6, #0
 8006692:	42a6      	cmp	r6, r4
 8006694:	d105      	bne.n	80066a2 <__libc_init_array+0x2e>
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f855 3b04 	ldr.w	r3, [r5], #4
 800669c:	4798      	blx	r3
 800669e:	3601      	adds	r6, #1
 80066a0:	e7ee      	b.n	8006680 <__libc_init_array+0xc>
 80066a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a6:	4798      	blx	r3
 80066a8:	3601      	adds	r6, #1
 80066aa:	e7f2      	b.n	8006692 <__libc_init_array+0x1e>
 80066ac:	08008108 	.word	0x08008108
 80066b0:	08008108 	.word	0x08008108
 80066b4:	08008108 	.word	0x08008108
 80066b8:	0800810c 	.word	0x0800810c

080066bc <memcpy>:
 80066bc:	440a      	add	r2, r1
 80066be:	4291      	cmp	r1, r2
 80066c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80066c4:	d100      	bne.n	80066c8 <memcpy+0xc>
 80066c6:	4770      	bx	lr
 80066c8:	b510      	push	{r4, lr}
 80066ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d2:	4291      	cmp	r1, r2
 80066d4:	d1f9      	bne.n	80066ca <memcpy+0xe>
 80066d6:	bd10      	pop	{r4, pc}

080066d8 <memset>:
 80066d8:	4402      	add	r2, r0
 80066da:	4603      	mov	r3, r0
 80066dc:	4293      	cmp	r3, r2
 80066de:	d100      	bne.n	80066e2 <memset+0xa>
 80066e0:	4770      	bx	lr
 80066e2:	f803 1b01 	strb.w	r1, [r3], #1
 80066e6:	e7f9      	b.n	80066dc <memset+0x4>

080066e8 <siprintf>:
 80066e8:	b40e      	push	{r1, r2, r3}
 80066ea:	b500      	push	{lr}
 80066ec:	b09c      	sub	sp, #112	; 0x70
 80066ee:	ab1d      	add	r3, sp, #116	; 0x74
 80066f0:	9002      	str	r0, [sp, #8]
 80066f2:	9006      	str	r0, [sp, #24]
 80066f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066f8:	4809      	ldr	r0, [pc, #36]	; (8006720 <siprintf+0x38>)
 80066fa:	9107      	str	r1, [sp, #28]
 80066fc:	9104      	str	r1, [sp, #16]
 80066fe:	4909      	ldr	r1, [pc, #36]	; (8006724 <siprintf+0x3c>)
 8006700:	f853 2b04 	ldr.w	r2, [r3], #4
 8006704:	9105      	str	r1, [sp, #20]
 8006706:	6800      	ldr	r0, [r0, #0]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	a902      	add	r1, sp, #8
 800670c:	f000 f868 	bl	80067e0 <_svfiprintf_r>
 8006710:	9b02      	ldr	r3, [sp, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	b01c      	add	sp, #112	; 0x70
 8006718:	f85d eb04 	ldr.w	lr, [sp], #4
 800671c:	b003      	add	sp, #12
 800671e:	4770      	bx	lr
 8006720:	20000038 	.word	0x20000038
 8006724:	ffff0208 	.word	0xffff0208

08006728 <__ssputs_r>:
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	688e      	ldr	r6, [r1, #8]
 800672e:	429e      	cmp	r6, r3
 8006730:	4682      	mov	sl, r0
 8006732:	460c      	mov	r4, r1
 8006734:	4690      	mov	r8, r2
 8006736:	461f      	mov	r7, r3
 8006738:	d838      	bhi.n	80067ac <__ssputs_r+0x84>
 800673a:	898a      	ldrh	r2, [r1, #12]
 800673c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006740:	d032      	beq.n	80067a8 <__ssputs_r+0x80>
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	6909      	ldr	r1, [r1, #16]
 8006746:	eba5 0901 	sub.w	r9, r5, r1
 800674a:	6965      	ldr	r5, [r4, #20]
 800674c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006754:	3301      	adds	r3, #1
 8006756:	444b      	add	r3, r9
 8006758:	106d      	asrs	r5, r5, #1
 800675a:	429d      	cmp	r5, r3
 800675c:	bf38      	it	cc
 800675e:	461d      	movcc	r5, r3
 8006760:	0553      	lsls	r3, r2, #21
 8006762:	d531      	bpl.n	80067c8 <__ssputs_r+0xa0>
 8006764:	4629      	mov	r1, r5
 8006766:	f000 fb39 	bl	8006ddc <_malloc_r>
 800676a:	4606      	mov	r6, r0
 800676c:	b950      	cbnz	r0, 8006784 <__ssputs_r+0x5c>
 800676e:	230c      	movs	r3, #12
 8006770:	f8ca 3000 	str.w	r3, [sl]
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006784:	6921      	ldr	r1, [r4, #16]
 8006786:	464a      	mov	r2, r9
 8006788:	f7ff ff98 	bl	80066bc <memcpy>
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	6126      	str	r6, [r4, #16]
 800679a:	6165      	str	r5, [r4, #20]
 800679c:	444e      	add	r6, r9
 800679e:	eba5 0509 	sub.w	r5, r5, r9
 80067a2:	6026      	str	r6, [r4, #0]
 80067a4:	60a5      	str	r5, [r4, #8]
 80067a6:	463e      	mov	r6, r7
 80067a8:	42be      	cmp	r6, r7
 80067aa:	d900      	bls.n	80067ae <__ssputs_r+0x86>
 80067ac:	463e      	mov	r6, r7
 80067ae:	4632      	mov	r2, r6
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	4641      	mov	r1, r8
 80067b4:	f000 faa8 	bl	8006d08 <memmove>
 80067b8:	68a3      	ldr	r3, [r4, #8]
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	4432      	add	r2, r6
 80067c0:	60a3      	str	r3, [r4, #8]
 80067c2:	6022      	str	r2, [r4, #0]
 80067c4:	2000      	movs	r0, #0
 80067c6:	e7db      	b.n	8006780 <__ssputs_r+0x58>
 80067c8:	462a      	mov	r2, r5
 80067ca:	f000 fb61 	bl	8006e90 <_realloc_r>
 80067ce:	4606      	mov	r6, r0
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d1e1      	bne.n	8006798 <__ssputs_r+0x70>
 80067d4:	6921      	ldr	r1, [r4, #16]
 80067d6:	4650      	mov	r0, sl
 80067d8:	f000 fab0 	bl	8006d3c <_free_r>
 80067dc:	e7c7      	b.n	800676e <__ssputs_r+0x46>
	...

080067e0 <_svfiprintf_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	4698      	mov	r8, r3
 80067e6:	898b      	ldrh	r3, [r1, #12]
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	b09d      	sub	sp, #116	; 0x74
 80067ec:	4607      	mov	r7, r0
 80067ee:	460d      	mov	r5, r1
 80067f0:	4614      	mov	r4, r2
 80067f2:	d50e      	bpl.n	8006812 <_svfiprintf_r+0x32>
 80067f4:	690b      	ldr	r3, [r1, #16]
 80067f6:	b963      	cbnz	r3, 8006812 <_svfiprintf_r+0x32>
 80067f8:	2140      	movs	r1, #64	; 0x40
 80067fa:	f000 faef 	bl	8006ddc <_malloc_r>
 80067fe:	6028      	str	r0, [r5, #0]
 8006800:	6128      	str	r0, [r5, #16]
 8006802:	b920      	cbnz	r0, 800680e <_svfiprintf_r+0x2e>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800680c:	e0d1      	b.n	80069b2 <_svfiprintf_r+0x1d2>
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	616b      	str	r3, [r5, #20]
 8006812:	2300      	movs	r3, #0
 8006814:	9309      	str	r3, [sp, #36]	; 0x24
 8006816:	2320      	movs	r3, #32
 8006818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800681c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006820:	2330      	movs	r3, #48	; 0x30
 8006822:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069cc <_svfiprintf_r+0x1ec>
 8006826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800682a:	f04f 0901 	mov.w	r9, #1
 800682e:	4623      	mov	r3, r4
 8006830:	469a      	mov	sl, r3
 8006832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006836:	b10a      	cbz	r2, 800683c <_svfiprintf_r+0x5c>
 8006838:	2a25      	cmp	r2, #37	; 0x25
 800683a:	d1f9      	bne.n	8006830 <_svfiprintf_r+0x50>
 800683c:	ebba 0b04 	subs.w	fp, sl, r4
 8006840:	d00b      	beq.n	800685a <_svfiprintf_r+0x7a>
 8006842:	465b      	mov	r3, fp
 8006844:	4622      	mov	r2, r4
 8006846:	4629      	mov	r1, r5
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff ff6d 	bl	8006728 <__ssputs_r>
 800684e:	3001      	adds	r0, #1
 8006850:	f000 80aa 	beq.w	80069a8 <_svfiprintf_r+0x1c8>
 8006854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006856:	445a      	add	r2, fp
 8006858:	9209      	str	r2, [sp, #36]	; 0x24
 800685a:	f89a 3000 	ldrb.w	r3, [sl]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a2 	beq.w	80069a8 <_svfiprintf_r+0x1c8>
 8006864:	2300      	movs	r3, #0
 8006866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800686a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800686e:	f10a 0a01 	add.w	sl, sl, #1
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	9307      	str	r3, [sp, #28]
 8006876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800687a:	931a      	str	r3, [sp, #104]	; 0x68
 800687c:	4654      	mov	r4, sl
 800687e:	2205      	movs	r2, #5
 8006880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006884:	4851      	ldr	r0, [pc, #324]	; (80069cc <_svfiprintf_r+0x1ec>)
 8006886:	f7f9 fcab 	bl	80001e0 <memchr>
 800688a:	9a04      	ldr	r2, [sp, #16]
 800688c:	b9d8      	cbnz	r0, 80068c6 <_svfiprintf_r+0xe6>
 800688e:	06d0      	lsls	r0, r2, #27
 8006890:	bf44      	itt	mi
 8006892:	2320      	movmi	r3, #32
 8006894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006898:	0711      	lsls	r1, r2, #28
 800689a:	bf44      	itt	mi
 800689c:	232b      	movmi	r3, #43	; 0x2b
 800689e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a2:	f89a 3000 	ldrb.w	r3, [sl]
 80068a6:	2b2a      	cmp	r3, #42	; 0x2a
 80068a8:	d015      	beq.n	80068d6 <_svfiprintf_r+0xf6>
 80068aa:	9a07      	ldr	r2, [sp, #28]
 80068ac:	4654      	mov	r4, sl
 80068ae:	2000      	movs	r0, #0
 80068b0:	f04f 0c0a 	mov.w	ip, #10
 80068b4:	4621      	mov	r1, r4
 80068b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ba:	3b30      	subs	r3, #48	; 0x30
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d94e      	bls.n	800695e <_svfiprintf_r+0x17e>
 80068c0:	b1b0      	cbz	r0, 80068f0 <_svfiprintf_r+0x110>
 80068c2:	9207      	str	r2, [sp, #28]
 80068c4:	e014      	b.n	80068f0 <_svfiprintf_r+0x110>
 80068c6:	eba0 0308 	sub.w	r3, r0, r8
 80068ca:	fa09 f303 	lsl.w	r3, r9, r3
 80068ce:	4313      	orrs	r3, r2
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	46a2      	mov	sl, r4
 80068d4:	e7d2      	b.n	800687c <_svfiprintf_r+0x9c>
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	1d19      	adds	r1, r3, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	9103      	str	r1, [sp, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bfbb      	ittet	lt
 80068e2:	425b      	neglt	r3, r3
 80068e4:	f042 0202 	orrlt.w	r2, r2, #2
 80068e8:	9307      	strge	r3, [sp, #28]
 80068ea:	9307      	strlt	r3, [sp, #28]
 80068ec:	bfb8      	it	lt
 80068ee:	9204      	strlt	r2, [sp, #16]
 80068f0:	7823      	ldrb	r3, [r4, #0]
 80068f2:	2b2e      	cmp	r3, #46	; 0x2e
 80068f4:	d10c      	bne.n	8006910 <_svfiprintf_r+0x130>
 80068f6:	7863      	ldrb	r3, [r4, #1]
 80068f8:	2b2a      	cmp	r3, #42	; 0x2a
 80068fa:	d135      	bne.n	8006968 <_svfiprintf_r+0x188>
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	1d1a      	adds	r2, r3, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	9203      	str	r2, [sp, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	bfb8      	it	lt
 8006908:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800690c:	3402      	adds	r4, #2
 800690e:	9305      	str	r3, [sp, #20]
 8006910:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069dc <_svfiprintf_r+0x1fc>
 8006914:	7821      	ldrb	r1, [r4, #0]
 8006916:	2203      	movs	r2, #3
 8006918:	4650      	mov	r0, sl
 800691a:	f7f9 fc61 	bl	80001e0 <memchr>
 800691e:	b140      	cbz	r0, 8006932 <_svfiprintf_r+0x152>
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	eba0 000a 	sub.w	r0, r0, sl
 8006926:	fa03 f000 	lsl.w	r0, r3, r0
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	4303      	orrs	r3, r0
 800692e:	3401      	adds	r4, #1
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006936:	4826      	ldr	r0, [pc, #152]	; (80069d0 <_svfiprintf_r+0x1f0>)
 8006938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800693c:	2206      	movs	r2, #6
 800693e:	f7f9 fc4f 	bl	80001e0 <memchr>
 8006942:	2800      	cmp	r0, #0
 8006944:	d038      	beq.n	80069b8 <_svfiprintf_r+0x1d8>
 8006946:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <_svfiprintf_r+0x1f4>)
 8006948:	bb1b      	cbnz	r3, 8006992 <_svfiprintf_r+0x1b2>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	3307      	adds	r3, #7
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	3308      	adds	r3, #8
 8006954:	9303      	str	r3, [sp, #12]
 8006956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006958:	4433      	add	r3, r6
 800695a:	9309      	str	r3, [sp, #36]	; 0x24
 800695c:	e767      	b.n	800682e <_svfiprintf_r+0x4e>
 800695e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006962:	460c      	mov	r4, r1
 8006964:	2001      	movs	r0, #1
 8006966:	e7a5      	b.n	80068b4 <_svfiprintf_r+0xd4>
 8006968:	2300      	movs	r3, #0
 800696a:	3401      	adds	r4, #1
 800696c:	9305      	str	r3, [sp, #20]
 800696e:	4619      	mov	r1, r3
 8006970:	f04f 0c0a 	mov.w	ip, #10
 8006974:	4620      	mov	r0, r4
 8006976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800697a:	3a30      	subs	r2, #48	; 0x30
 800697c:	2a09      	cmp	r2, #9
 800697e:	d903      	bls.n	8006988 <_svfiprintf_r+0x1a8>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0c5      	beq.n	8006910 <_svfiprintf_r+0x130>
 8006984:	9105      	str	r1, [sp, #20]
 8006986:	e7c3      	b.n	8006910 <_svfiprintf_r+0x130>
 8006988:	fb0c 2101 	mla	r1, ip, r1, r2
 800698c:	4604      	mov	r4, r0
 800698e:	2301      	movs	r3, #1
 8006990:	e7f0      	b.n	8006974 <_svfiprintf_r+0x194>
 8006992:	ab03      	add	r3, sp, #12
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	462a      	mov	r2, r5
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <_svfiprintf_r+0x1f8>)
 800699a:	a904      	add	r1, sp, #16
 800699c:	4638      	mov	r0, r7
 800699e:	f3af 8000 	nop.w
 80069a2:	1c42      	adds	r2, r0, #1
 80069a4:	4606      	mov	r6, r0
 80069a6:	d1d6      	bne.n	8006956 <_svfiprintf_r+0x176>
 80069a8:	89ab      	ldrh	r3, [r5, #12]
 80069aa:	065b      	lsls	r3, r3, #25
 80069ac:	f53f af2c 	bmi.w	8006808 <_svfiprintf_r+0x28>
 80069b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b2:	b01d      	add	sp, #116	; 0x74
 80069b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b8:	ab03      	add	r3, sp, #12
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	462a      	mov	r2, r5
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <_svfiprintf_r+0x1f8>)
 80069c0:	a904      	add	r1, sp, #16
 80069c2:	4638      	mov	r0, r7
 80069c4:	f000 f87a 	bl	8006abc <_printf_i>
 80069c8:	e7eb      	b.n	80069a2 <_svfiprintf_r+0x1c2>
 80069ca:	bf00      	nop
 80069cc:	0800808c 	.word	0x0800808c
 80069d0:	08008096 	.word	0x08008096
 80069d4:	00000000 	.word	0x00000000
 80069d8:	08006729 	.word	0x08006729
 80069dc:	08008092 	.word	0x08008092

080069e0 <_printf_common>:
 80069e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e4:	4616      	mov	r6, r2
 80069e6:	4699      	mov	r9, r3
 80069e8:	688a      	ldr	r2, [r1, #8]
 80069ea:	690b      	ldr	r3, [r1, #16]
 80069ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f0:	4293      	cmp	r3, r2
 80069f2:	bfb8      	it	lt
 80069f4:	4613      	movlt	r3, r2
 80069f6:	6033      	str	r3, [r6, #0]
 80069f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069fc:	4607      	mov	r7, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	b10a      	cbz	r2, 8006a06 <_printf_common+0x26>
 8006a02:	3301      	adds	r3, #1
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	0699      	lsls	r1, r3, #26
 8006a0a:	bf42      	ittt	mi
 8006a0c:	6833      	ldrmi	r3, [r6, #0]
 8006a0e:	3302      	addmi	r3, #2
 8006a10:	6033      	strmi	r3, [r6, #0]
 8006a12:	6825      	ldr	r5, [r4, #0]
 8006a14:	f015 0506 	ands.w	r5, r5, #6
 8006a18:	d106      	bne.n	8006a28 <_printf_common+0x48>
 8006a1a:	f104 0a19 	add.w	sl, r4, #25
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	6832      	ldr	r2, [r6, #0]
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dc26      	bgt.n	8006a76 <_printf_common+0x96>
 8006a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a2c:	1e13      	subs	r3, r2, #0
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	bf18      	it	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	0692      	lsls	r2, r2, #26
 8006a36:	d42b      	bmi.n	8006a90 <_printf_common+0xb0>
 8006a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4638      	mov	r0, r7
 8006a40:	47c0      	blx	r8
 8006a42:	3001      	adds	r0, #1
 8006a44:	d01e      	beq.n	8006a84 <_printf_common+0xa4>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	68e5      	ldr	r5, [r4, #12]
 8006a4a:	6832      	ldr	r2, [r6, #0]
 8006a4c:	f003 0306 	and.w	r3, r3, #6
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	bf08      	it	eq
 8006a54:	1aad      	subeq	r5, r5, r2
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	6922      	ldr	r2, [r4, #16]
 8006a5a:	bf0c      	ite	eq
 8006a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a60:	2500      	movne	r5, #0
 8006a62:	4293      	cmp	r3, r2
 8006a64:	bfc4      	itt	gt
 8006a66:	1a9b      	subgt	r3, r3, r2
 8006a68:	18ed      	addgt	r5, r5, r3
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	341a      	adds	r4, #26
 8006a6e:	42b5      	cmp	r5, r6
 8006a70:	d11a      	bne.n	8006aa8 <_printf_common+0xc8>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e008      	b.n	8006a88 <_printf_common+0xa8>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4652      	mov	r2, sl
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	47c0      	blx	r8
 8006a80:	3001      	adds	r0, #1
 8006a82:	d103      	bne.n	8006a8c <_printf_common+0xac>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	e7c6      	b.n	8006a1e <_printf_common+0x3e>
 8006a90:	18e1      	adds	r1, r4, r3
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	2030      	movs	r0, #48	; 0x30
 8006a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a9a:	4422      	add	r2, r4
 8006a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	e7c7      	b.n	8006a38 <_printf_common+0x58>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4622      	mov	r2, r4
 8006aac:	4649      	mov	r1, r9
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d0e6      	beq.n	8006a84 <_printf_common+0xa4>
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7d9      	b.n	8006a6e <_printf_common+0x8e>
	...

08006abc <_printf_i>:
 8006abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	4691      	mov	r9, r2
 8006ac4:	7e27      	ldrb	r7, [r4, #24]
 8006ac6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ac8:	2f78      	cmp	r7, #120	; 0x78
 8006aca:	4680      	mov	r8, r0
 8006acc:	469a      	mov	sl, r3
 8006ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ad2:	d807      	bhi.n	8006ae4 <_printf_i+0x28>
 8006ad4:	2f62      	cmp	r7, #98	; 0x62
 8006ad6:	d80a      	bhi.n	8006aee <_printf_i+0x32>
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	f000 80d8 	beq.w	8006c8e <_printf_i+0x1d2>
 8006ade:	2f58      	cmp	r7, #88	; 0x58
 8006ae0:	f000 80a3 	beq.w	8006c2a <_printf_i+0x16e>
 8006ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006aec:	e03a      	b.n	8006b64 <_printf_i+0xa8>
 8006aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006af2:	2b15      	cmp	r3, #21
 8006af4:	d8f6      	bhi.n	8006ae4 <_printf_i+0x28>
 8006af6:	a001      	add	r0, pc, #4	; (adr r0, 8006afc <_printf_i+0x40>)
 8006af8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006afc:	08006b55 	.word	0x08006b55
 8006b00:	08006b69 	.word	0x08006b69
 8006b04:	08006ae5 	.word	0x08006ae5
 8006b08:	08006ae5 	.word	0x08006ae5
 8006b0c:	08006ae5 	.word	0x08006ae5
 8006b10:	08006ae5 	.word	0x08006ae5
 8006b14:	08006b69 	.word	0x08006b69
 8006b18:	08006ae5 	.word	0x08006ae5
 8006b1c:	08006ae5 	.word	0x08006ae5
 8006b20:	08006ae5 	.word	0x08006ae5
 8006b24:	08006ae5 	.word	0x08006ae5
 8006b28:	08006c75 	.word	0x08006c75
 8006b2c:	08006b99 	.word	0x08006b99
 8006b30:	08006c57 	.word	0x08006c57
 8006b34:	08006ae5 	.word	0x08006ae5
 8006b38:	08006ae5 	.word	0x08006ae5
 8006b3c:	08006c97 	.word	0x08006c97
 8006b40:	08006ae5 	.word	0x08006ae5
 8006b44:	08006b99 	.word	0x08006b99
 8006b48:	08006ae5 	.word	0x08006ae5
 8006b4c:	08006ae5 	.word	0x08006ae5
 8006b50:	08006c5f 	.word	0x08006c5f
 8006b54:	680b      	ldr	r3, [r1, #0]
 8006b56:	1d1a      	adds	r2, r3, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	600a      	str	r2, [r1, #0]
 8006b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0a3      	b.n	8006cb0 <_printf_i+0x1f4>
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	6808      	ldr	r0, [r1, #0]
 8006b6c:	062e      	lsls	r6, r5, #24
 8006b6e:	f100 0304 	add.w	r3, r0, #4
 8006b72:	d50a      	bpl.n	8006b8a <_printf_i+0xce>
 8006b74:	6805      	ldr	r5, [r0, #0]
 8006b76:	600b      	str	r3, [r1, #0]
 8006b78:	2d00      	cmp	r5, #0
 8006b7a:	da03      	bge.n	8006b84 <_printf_i+0xc8>
 8006b7c:	232d      	movs	r3, #45	; 0x2d
 8006b7e:	426d      	negs	r5, r5
 8006b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b84:	485e      	ldr	r0, [pc, #376]	; (8006d00 <_printf_i+0x244>)
 8006b86:	230a      	movs	r3, #10
 8006b88:	e019      	b.n	8006bbe <_printf_i+0x102>
 8006b8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b8e:	6805      	ldr	r5, [r0, #0]
 8006b90:	600b      	str	r3, [r1, #0]
 8006b92:	bf18      	it	ne
 8006b94:	b22d      	sxthne	r5, r5
 8006b96:	e7ef      	b.n	8006b78 <_printf_i+0xbc>
 8006b98:	680b      	ldr	r3, [r1, #0]
 8006b9a:	6825      	ldr	r5, [r4, #0]
 8006b9c:	1d18      	adds	r0, r3, #4
 8006b9e:	6008      	str	r0, [r1, #0]
 8006ba0:	0628      	lsls	r0, r5, #24
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_i+0xec>
 8006ba4:	681d      	ldr	r5, [r3, #0]
 8006ba6:	e002      	b.n	8006bae <_printf_i+0xf2>
 8006ba8:	0669      	lsls	r1, r5, #25
 8006baa:	d5fb      	bpl.n	8006ba4 <_printf_i+0xe8>
 8006bac:	881d      	ldrh	r5, [r3, #0]
 8006bae:	4854      	ldr	r0, [pc, #336]	; (8006d00 <_printf_i+0x244>)
 8006bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8006bb2:	bf0c      	ite	eq
 8006bb4:	2308      	moveq	r3, #8
 8006bb6:	230a      	movne	r3, #10
 8006bb8:	2100      	movs	r1, #0
 8006bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bbe:	6866      	ldr	r6, [r4, #4]
 8006bc0:	60a6      	str	r6, [r4, #8]
 8006bc2:	2e00      	cmp	r6, #0
 8006bc4:	bfa2      	ittt	ge
 8006bc6:	6821      	ldrge	r1, [r4, #0]
 8006bc8:	f021 0104 	bicge.w	r1, r1, #4
 8006bcc:	6021      	strge	r1, [r4, #0]
 8006bce:	b90d      	cbnz	r5, 8006bd4 <_printf_i+0x118>
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	d04d      	beq.n	8006c70 <_printf_i+0x1b4>
 8006bd4:	4616      	mov	r6, r2
 8006bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bda:	fb03 5711 	mls	r7, r3, r1, r5
 8006bde:	5dc7      	ldrb	r7, [r0, r7]
 8006be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006be4:	462f      	mov	r7, r5
 8006be6:	42bb      	cmp	r3, r7
 8006be8:	460d      	mov	r5, r1
 8006bea:	d9f4      	bls.n	8006bd6 <_printf_i+0x11a>
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d10b      	bne.n	8006c08 <_printf_i+0x14c>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	07df      	lsls	r7, r3, #31
 8006bf4:	d508      	bpl.n	8006c08 <_printf_i+0x14c>
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	6861      	ldr	r1, [r4, #4]
 8006bfa:	4299      	cmp	r1, r3
 8006bfc:	bfde      	ittt	le
 8006bfe:	2330      	movle	r3, #48	; 0x30
 8006c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c04:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006c08:	1b92      	subs	r2, r2, r6
 8006c0a:	6122      	str	r2, [r4, #16]
 8006c0c:	f8cd a000 	str.w	sl, [sp]
 8006c10:	464b      	mov	r3, r9
 8006c12:	aa03      	add	r2, sp, #12
 8006c14:	4621      	mov	r1, r4
 8006c16:	4640      	mov	r0, r8
 8006c18:	f7ff fee2 	bl	80069e0 <_printf_common>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d14c      	bne.n	8006cba <_printf_i+0x1fe>
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c24:	b004      	add	sp, #16
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	4835      	ldr	r0, [pc, #212]	; (8006d00 <_printf_i+0x244>)
 8006c2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	680e      	ldr	r6, [r1, #0]
 8006c34:	061f      	lsls	r7, r3, #24
 8006c36:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c3a:	600e      	str	r6, [r1, #0]
 8006c3c:	d514      	bpl.n	8006c68 <_printf_i+0x1ac>
 8006c3e:	07d9      	lsls	r1, r3, #31
 8006c40:	bf44      	itt	mi
 8006c42:	f043 0320 	orrmi.w	r3, r3, #32
 8006c46:	6023      	strmi	r3, [r4, #0]
 8006c48:	b91d      	cbnz	r5, 8006c52 <_printf_i+0x196>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	f023 0320 	bic.w	r3, r3, #32
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	2310      	movs	r3, #16
 8006c54:	e7b0      	b.n	8006bb8 <_printf_i+0xfc>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	f043 0320 	orr.w	r3, r3, #32
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	2378      	movs	r3, #120	; 0x78
 8006c60:	4828      	ldr	r0, [pc, #160]	; (8006d04 <_printf_i+0x248>)
 8006c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c66:	e7e3      	b.n	8006c30 <_printf_i+0x174>
 8006c68:	065e      	lsls	r6, r3, #25
 8006c6a:	bf48      	it	mi
 8006c6c:	b2ad      	uxthmi	r5, r5
 8006c6e:	e7e6      	b.n	8006c3e <_printf_i+0x182>
 8006c70:	4616      	mov	r6, r2
 8006c72:	e7bb      	b.n	8006bec <_printf_i+0x130>
 8006c74:	680b      	ldr	r3, [r1, #0]
 8006c76:	6826      	ldr	r6, [r4, #0]
 8006c78:	6960      	ldr	r0, [r4, #20]
 8006c7a:	1d1d      	adds	r5, r3, #4
 8006c7c:	600d      	str	r5, [r1, #0]
 8006c7e:	0635      	lsls	r5, r6, #24
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	d501      	bpl.n	8006c88 <_printf_i+0x1cc>
 8006c84:	6018      	str	r0, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <_printf_i+0x1d2>
 8006c88:	0671      	lsls	r1, r6, #25
 8006c8a:	d5fb      	bpl.n	8006c84 <_printf_i+0x1c8>
 8006c8c:	8018      	strh	r0, [r3, #0]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	4616      	mov	r6, r2
 8006c94:	e7ba      	b.n	8006c0c <_printf_i+0x150>
 8006c96:	680b      	ldr	r3, [r1, #0]
 8006c98:	1d1a      	adds	r2, r3, #4
 8006c9a:	600a      	str	r2, [r1, #0]
 8006c9c:	681e      	ldr	r6, [r3, #0]
 8006c9e:	6862      	ldr	r2, [r4, #4]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7f9 fa9c 	bl	80001e0 <memchr>
 8006ca8:	b108      	cbz	r0, 8006cae <_printf_i+0x1f2>
 8006caa:	1b80      	subs	r0, r0, r6
 8006cac:	6060      	str	r0, [r4, #4]
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb8:	e7a8      	b.n	8006c0c <_printf_i+0x150>
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	47d0      	blx	sl
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d0ab      	beq.n	8006c20 <_printf_i+0x164>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	079b      	lsls	r3, r3, #30
 8006ccc:	d413      	bmi.n	8006cf6 <_printf_i+0x23a>
 8006cce:	68e0      	ldr	r0, [r4, #12]
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	4298      	cmp	r0, r3
 8006cd4:	bfb8      	it	lt
 8006cd6:	4618      	movlt	r0, r3
 8006cd8:	e7a4      	b.n	8006c24 <_printf_i+0x168>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4632      	mov	r2, r6
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	47d0      	blx	sl
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d09b      	beq.n	8006c20 <_printf_i+0x164>
 8006ce8:	3501      	adds	r5, #1
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	9903      	ldr	r1, [sp, #12]
 8006cee:	1a5b      	subs	r3, r3, r1
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dcf2      	bgt.n	8006cda <_printf_i+0x21e>
 8006cf4:	e7eb      	b.n	8006cce <_printf_i+0x212>
 8006cf6:	2500      	movs	r5, #0
 8006cf8:	f104 0619 	add.w	r6, r4, #25
 8006cfc:	e7f5      	b.n	8006cea <_printf_i+0x22e>
 8006cfe:	bf00      	nop
 8006d00:	0800809d 	.word	0x0800809d
 8006d04:	080080ae 	.word	0x080080ae

08006d08 <memmove>:
 8006d08:	4288      	cmp	r0, r1
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	eb01 0402 	add.w	r4, r1, r2
 8006d10:	d902      	bls.n	8006d18 <memmove+0x10>
 8006d12:	4284      	cmp	r4, r0
 8006d14:	4623      	mov	r3, r4
 8006d16:	d807      	bhi.n	8006d28 <memmove+0x20>
 8006d18:	1e43      	subs	r3, r0, #1
 8006d1a:	42a1      	cmp	r1, r4
 8006d1c:	d008      	beq.n	8006d30 <memmove+0x28>
 8006d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d26:	e7f8      	b.n	8006d1a <memmove+0x12>
 8006d28:	4402      	add	r2, r0
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	428a      	cmp	r2, r1
 8006d2e:	d100      	bne.n	8006d32 <memmove+0x2a>
 8006d30:	bd10      	pop	{r4, pc}
 8006d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d3a:	e7f7      	b.n	8006d2c <memmove+0x24>

08006d3c <_free_r>:
 8006d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d3e:	2900      	cmp	r1, #0
 8006d40:	d048      	beq.n	8006dd4 <_free_r+0x98>
 8006d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d46:	9001      	str	r0, [sp, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d4e:	bfb8      	it	lt
 8006d50:	18e4      	addlt	r4, r4, r3
 8006d52:	f000 f8d3 	bl	8006efc <__malloc_lock>
 8006d56:	4a20      	ldr	r2, [pc, #128]	; (8006dd8 <_free_r+0x9c>)
 8006d58:	9801      	ldr	r0, [sp, #4]
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	4615      	mov	r5, r2
 8006d5e:	b933      	cbnz	r3, 8006d6e <_free_r+0x32>
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	6014      	str	r4, [r2, #0]
 8006d64:	b003      	add	sp, #12
 8006d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6a:	f000 b8cd 	b.w	8006f08 <__malloc_unlock>
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	d90b      	bls.n	8006d8a <_free_r+0x4e>
 8006d72:	6821      	ldr	r1, [r4, #0]
 8006d74:	1862      	adds	r2, r4, r1
 8006d76:	4293      	cmp	r3, r2
 8006d78:	bf04      	itt	eq
 8006d7a:	681a      	ldreq	r2, [r3, #0]
 8006d7c:	685b      	ldreq	r3, [r3, #4]
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	bf04      	itt	eq
 8006d82:	1852      	addeq	r2, r2, r1
 8006d84:	6022      	streq	r2, [r4, #0]
 8006d86:	602c      	str	r4, [r5, #0]
 8006d88:	e7ec      	b.n	8006d64 <_free_r+0x28>
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	b10b      	cbz	r3, 8006d94 <_free_r+0x58>
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d9fa      	bls.n	8006d8a <_free_r+0x4e>
 8006d94:	6811      	ldr	r1, [r2, #0]
 8006d96:	1855      	adds	r5, r2, r1
 8006d98:	42a5      	cmp	r5, r4
 8006d9a:	d10b      	bne.n	8006db4 <_free_r+0x78>
 8006d9c:	6824      	ldr	r4, [r4, #0]
 8006d9e:	4421      	add	r1, r4
 8006da0:	1854      	adds	r4, r2, r1
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	d1dd      	bne.n	8006d64 <_free_r+0x28>
 8006da8:	681c      	ldr	r4, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	6053      	str	r3, [r2, #4]
 8006dae:	4421      	add	r1, r4
 8006db0:	6011      	str	r1, [r2, #0]
 8006db2:	e7d7      	b.n	8006d64 <_free_r+0x28>
 8006db4:	d902      	bls.n	8006dbc <_free_r+0x80>
 8006db6:	230c      	movs	r3, #12
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	e7d3      	b.n	8006d64 <_free_r+0x28>
 8006dbc:	6825      	ldr	r5, [r4, #0]
 8006dbe:	1961      	adds	r1, r4, r5
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	bf04      	itt	eq
 8006dc4:	6819      	ldreq	r1, [r3, #0]
 8006dc6:	685b      	ldreq	r3, [r3, #4]
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	bf04      	itt	eq
 8006dcc:	1949      	addeq	r1, r1, r5
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	6054      	str	r4, [r2, #4]
 8006dd2:	e7c7      	b.n	8006d64 <_free_r+0x28>
 8006dd4:	b003      	add	sp, #12
 8006dd6:	bd30      	pop	{r4, r5, pc}
 8006dd8:	2000010c 	.word	0x2000010c

08006ddc <_malloc_r>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	1ccd      	adds	r5, r1, #3
 8006de0:	f025 0503 	bic.w	r5, r5, #3
 8006de4:	3508      	adds	r5, #8
 8006de6:	2d0c      	cmp	r5, #12
 8006de8:	bf38      	it	cc
 8006dea:	250c      	movcc	r5, #12
 8006dec:	2d00      	cmp	r5, #0
 8006dee:	4606      	mov	r6, r0
 8006df0:	db01      	blt.n	8006df6 <_malloc_r+0x1a>
 8006df2:	42a9      	cmp	r1, r5
 8006df4:	d903      	bls.n	8006dfe <_malloc_r+0x22>
 8006df6:	230c      	movs	r3, #12
 8006df8:	6033      	str	r3, [r6, #0]
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dfe:	f000 f87d 	bl	8006efc <__malloc_lock>
 8006e02:	4921      	ldr	r1, [pc, #132]	; (8006e88 <_malloc_r+0xac>)
 8006e04:	680a      	ldr	r2, [r1, #0]
 8006e06:	4614      	mov	r4, r2
 8006e08:	b99c      	cbnz	r4, 8006e32 <_malloc_r+0x56>
 8006e0a:	4f20      	ldr	r7, [pc, #128]	; (8006e8c <_malloc_r+0xb0>)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	b923      	cbnz	r3, 8006e1a <_malloc_r+0x3e>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 f862 	bl	8006edc <_sbrk_r>
 8006e18:	6038      	str	r0, [r7, #0]
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f000 f85d 	bl	8006edc <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d123      	bne.n	8006e6e <_malloc_r+0x92>
 8006e26:	230c      	movs	r3, #12
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f000 f86c 	bl	8006f08 <__malloc_unlock>
 8006e30:	e7e3      	b.n	8006dfa <_malloc_r+0x1e>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	1b5b      	subs	r3, r3, r5
 8006e36:	d417      	bmi.n	8006e68 <_malloc_r+0x8c>
 8006e38:	2b0b      	cmp	r3, #11
 8006e3a:	d903      	bls.n	8006e44 <_malloc_r+0x68>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	441c      	add	r4, r3
 8006e40:	6025      	str	r5, [r4, #0]
 8006e42:	e004      	b.n	8006e4e <_malloc_r+0x72>
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	42a2      	cmp	r2, r4
 8006e48:	bf0c      	ite	eq
 8006e4a:	600b      	streq	r3, [r1, #0]
 8006e4c:	6053      	strne	r3, [r2, #4]
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f000 f85a 	bl	8006f08 <__malloc_unlock>
 8006e54:	f104 000b 	add.w	r0, r4, #11
 8006e58:	1d23      	adds	r3, r4, #4
 8006e5a:	f020 0007 	bic.w	r0, r0, #7
 8006e5e:	1ac2      	subs	r2, r0, r3
 8006e60:	d0cc      	beq.n	8006dfc <_malloc_r+0x20>
 8006e62:	1a1b      	subs	r3, r3, r0
 8006e64:	50a3      	str	r3, [r4, r2]
 8006e66:	e7c9      	b.n	8006dfc <_malloc_r+0x20>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	6864      	ldr	r4, [r4, #4]
 8006e6c:	e7cc      	b.n	8006e08 <_malloc_r+0x2c>
 8006e6e:	1cc4      	adds	r4, r0, #3
 8006e70:	f024 0403 	bic.w	r4, r4, #3
 8006e74:	42a0      	cmp	r0, r4
 8006e76:	d0e3      	beq.n	8006e40 <_malloc_r+0x64>
 8006e78:	1a21      	subs	r1, r4, r0
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f000 f82e 	bl	8006edc <_sbrk_r>
 8006e80:	3001      	adds	r0, #1
 8006e82:	d1dd      	bne.n	8006e40 <_malloc_r+0x64>
 8006e84:	e7cf      	b.n	8006e26 <_malloc_r+0x4a>
 8006e86:	bf00      	nop
 8006e88:	2000010c 	.word	0x2000010c
 8006e8c:	20000110 	.word	0x20000110

08006e90 <_realloc_r>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	4607      	mov	r7, r0
 8006e94:	4614      	mov	r4, r2
 8006e96:	460e      	mov	r6, r1
 8006e98:	b921      	cbnz	r1, 8006ea4 <_realloc_r+0x14>
 8006e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	f7ff bf9c 	b.w	8006ddc <_malloc_r>
 8006ea4:	b922      	cbnz	r2, 8006eb0 <_realloc_r+0x20>
 8006ea6:	f7ff ff49 	bl	8006d3c <_free_r>
 8006eaa:	4625      	mov	r5, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb0:	f000 f830 	bl	8006f14 <_malloc_usable_size_r>
 8006eb4:	42a0      	cmp	r0, r4
 8006eb6:	d20f      	bcs.n	8006ed8 <_realloc_r+0x48>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4638      	mov	r0, r7
 8006ebc:	f7ff ff8e 	bl	8006ddc <_malloc_r>
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d0f2      	beq.n	8006eac <_realloc_r+0x1c>
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4622      	mov	r2, r4
 8006eca:	f7ff fbf7 	bl	80066bc <memcpy>
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7ff ff33 	bl	8006d3c <_free_r>
 8006ed6:	e7e9      	b.n	8006eac <_realloc_r+0x1c>
 8006ed8:	4635      	mov	r5, r6
 8006eda:	e7e7      	b.n	8006eac <_realloc_r+0x1c>

08006edc <_sbrk_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	; (8006ef8 <_sbrk_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7fb fc76 	bl	80027d8 <_sbrk>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_sbrk_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_sbrk_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20000338 	.word	0x20000338

08006efc <__malloc_lock>:
 8006efc:	4801      	ldr	r0, [pc, #4]	; (8006f04 <__malloc_lock+0x8>)
 8006efe:	f000 b811 	b.w	8006f24 <__retarget_lock_acquire_recursive>
 8006f02:	bf00      	nop
 8006f04:	20000340 	.word	0x20000340

08006f08 <__malloc_unlock>:
 8006f08:	4801      	ldr	r0, [pc, #4]	; (8006f10 <__malloc_unlock+0x8>)
 8006f0a:	f000 b80c 	b.w	8006f26 <__retarget_lock_release_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000340 	.word	0x20000340

08006f14 <_malloc_usable_size_r>:
 8006f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f18:	1f18      	subs	r0, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfbc      	itt	lt
 8006f1e:	580b      	ldrlt	r3, [r1, r0]
 8006f20:	18c0      	addlt	r0, r0, r3
 8006f22:	4770      	bx	lr

08006f24 <__retarget_lock_acquire_recursive>:
 8006f24:	4770      	bx	lr

08006f26 <__retarget_lock_release_recursive>:
 8006f26:	4770      	bx	lr

08006f28 <ceil>:
 8006f28:	ec51 0b10 	vmov	r0, r1, d0
 8006f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f30:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006f34:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006f38:	2e13      	cmp	r6, #19
 8006f3a:	ee10 5a10 	vmov	r5, s0
 8006f3e:	ee10 8a10 	vmov	r8, s0
 8006f42:	460c      	mov	r4, r1
 8006f44:	dc30      	bgt.n	8006fa8 <ceil+0x80>
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	da12      	bge.n	8006f70 <ceil+0x48>
 8006f4a:	a335      	add	r3, pc, #212	; (adr r3, 8007020 <ceil+0xf8>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f7f9 f99c 	bl	800028c <__adddf3>
 8006f54:	2200      	movs	r2, #0
 8006f56:	2300      	movs	r3, #0
 8006f58:	f7f9 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 8006f5c:	b128      	cbz	r0, 8006f6a <ceil+0x42>
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	db55      	blt.n	800700e <ceil+0xe6>
 8006f62:	432c      	orrs	r4, r5
 8006f64:	d057      	beq.n	8007016 <ceil+0xee>
 8006f66:	4c30      	ldr	r4, [pc, #192]	; (8007028 <ceil+0x100>)
 8006f68:	2500      	movs	r5, #0
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	e025      	b.n	8006fbc <ceil+0x94>
 8006f70:	4f2e      	ldr	r7, [pc, #184]	; (800702c <ceil+0x104>)
 8006f72:	4137      	asrs	r7, r6
 8006f74:	ea01 0307 	and.w	r3, r1, r7
 8006f78:	4303      	orrs	r3, r0
 8006f7a:	d01f      	beq.n	8006fbc <ceil+0x94>
 8006f7c:	a328      	add	r3, pc, #160	; (adr r3, 8007020 <ceil+0xf8>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f983 	bl	800028c <__adddf3>
 8006f86:	2200      	movs	r2, #0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f7f9 fdc5 	bl	8000b18 <__aeabi_dcmpgt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d0eb      	beq.n	8006f6a <ceil+0x42>
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	bfc2      	ittt	gt
 8006f96:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006f9a:	fa43 f606 	asrgt.w	r6, r3, r6
 8006f9e:	19a4      	addgt	r4, r4, r6
 8006fa0:	ea24 0407 	bic.w	r4, r4, r7
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	e7e0      	b.n	8006f6a <ceil+0x42>
 8006fa8:	2e33      	cmp	r6, #51	; 0x33
 8006faa:	dd0b      	ble.n	8006fc4 <ceil+0x9c>
 8006fac:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006fb0:	d104      	bne.n	8006fbc <ceil+0x94>
 8006fb2:	ee10 2a10 	vmov	r2, s0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	f7f9 f968 	bl	800028c <__adddf3>
 8006fbc:	ec41 0b10 	vmov	d0, r0, r1
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fcc:	fa23 f707 	lsr.w	r7, r3, r7
 8006fd0:	4207      	tst	r7, r0
 8006fd2:	d0f3      	beq.n	8006fbc <ceil+0x94>
 8006fd4:	a312      	add	r3, pc, #72	; (adr r3, 8007020 <ceil+0xf8>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f957 	bl	800028c <__adddf3>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f7f9 fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d0bf      	beq.n	8006f6a <ceil+0x42>
 8006fea:	2c00      	cmp	r4, #0
 8006fec:	dd02      	ble.n	8006ff4 <ceil+0xcc>
 8006fee:	2e14      	cmp	r6, #20
 8006ff0:	d103      	bne.n	8006ffa <ceil+0xd2>
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	ea25 0507 	bic.w	r5, r5, r7
 8006ff8:	e7b7      	b.n	8006f6a <ceil+0x42>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007000:	fa03 f606 	lsl.w	r6, r3, r6
 8007004:	4435      	add	r5, r6
 8007006:	4545      	cmp	r5, r8
 8007008:	bf38      	it	cc
 800700a:	18e4      	addcc	r4, r4, r3
 800700c:	e7f2      	b.n	8006ff4 <ceil+0xcc>
 800700e:	2500      	movs	r5, #0
 8007010:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007014:	e7a9      	b.n	8006f6a <ceil+0x42>
 8007016:	4625      	mov	r5, r4
 8007018:	e7a7      	b.n	8006f6a <ceil+0x42>
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w
 8007020:	8800759c 	.word	0x8800759c
 8007024:	7e37e43c 	.word	0x7e37e43c
 8007028:	3ff00000 	.word	0x3ff00000
 800702c:	000fffff 	.word	0x000fffff

08007030 <pow>:
 8007030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007034:	ec59 8b10 	vmov	r8, r9, d0
 8007038:	ec57 6b11 	vmov	r6, r7, d1
 800703c:	f000 f8dc 	bl	80071f8 <__ieee754_pow>
 8007040:	4b4e      	ldr	r3, [pc, #312]	; (800717c <pow+0x14c>)
 8007042:	f993 3000 	ldrsb.w	r3, [r3]
 8007046:	3301      	adds	r3, #1
 8007048:	ec55 4b10 	vmov	r4, r5, d0
 800704c:	d015      	beq.n	800707a <pow+0x4a>
 800704e:	4632      	mov	r2, r6
 8007050:	463b      	mov	r3, r7
 8007052:	4630      	mov	r0, r6
 8007054:	4639      	mov	r1, r7
 8007056:	f7f9 fd69 	bl	8000b2c <__aeabi_dcmpun>
 800705a:	b970      	cbnz	r0, 800707a <pow+0x4a>
 800705c:	4642      	mov	r2, r8
 800705e:	464b      	mov	r3, r9
 8007060:	4640      	mov	r0, r8
 8007062:	4649      	mov	r1, r9
 8007064:	f7f9 fd62 	bl	8000b2c <__aeabi_dcmpun>
 8007068:	2200      	movs	r2, #0
 800706a:	2300      	movs	r3, #0
 800706c:	b148      	cbz	r0, 8007082 <pow+0x52>
 800706e:	4630      	mov	r0, r6
 8007070:	4639      	mov	r1, r7
 8007072:	f7f9 fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007076:	2800      	cmp	r0, #0
 8007078:	d17d      	bne.n	8007176 <pow+0x146>
 800707a:	ec45 4b10 	vmov	d0, r4, r5
 800707e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007082:	4640      	mov	r0, r8
 8007084:	4649      	mov	r1, r9
 8007086:	f7f9 fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800708a:	b1e0      	cbz	r0, 80070c6 <pow+0x96>
 800708c:	2200      	movs	r2, #0
 800708e:	2300      	movs	r3, #0
 8007090:	4630      	mov	r0, r6
 8007092:	4639      	mov	r1, r7
 8007094:	f7f9 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007098:	2800      	cmp	r0, #0
 800709a:	d16c      	bne.n	8007176 <pow+0x146>
 800709c:	ec47 6b10 	vmov	d0, r6, r7
 80070a0:	f000 fe89 	bl	8007db6 <finite>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d0e8      	beq.n	800707a <pow+0x4a>
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	4630      	mov	r0, r6
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 fd14 	bl	8000adc <__aeabi_dcmplt>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d0e0      	beq.n	800707a <pow+0x4a>
 80070b8:	f7ff fad6 	bl	8006668 <__errno>
 80070bc:	2321      	movs	r3, #33	; 0x21
 80070be:	6003      	str	r3, [r0, #0]
 80070c0:	2400      	movs	r4, #0
 80070c2:	4d2f      	ldr	r5, [pc, #188]	; (8007180 <pow+0x150>)
 80070c4:	e7d9      	b.n	800707a <pow+0x4a>
 80070c6:	ec45 4b10 	vmov	d0, r4, r5
 80070ca:	f000 fe74 	bl	8007db6 <finite>
 80070ce:	bbb8      	cbnz	r0, 8007140 <pow+0x110>
 80070d0:	ec49 8b10 	vmov	d0, r8, r9
 80070d4:	f000 fe6f 	bl	8007db6 <finite>
 80070d8:	b390      	cbz	r0, 8007140 <pow+0x110>
 80070da:	ec47 6b10 	vmov	d0, r6, r7
 80070de:	f000 fe6a 	bl	8007db6 <finite>
 80070e2:	b368      	cbz	r0, 8007140 <pow+0x110>
 80070e4:	4622      	mov	r2, r4
 80070e6:	462b      	mov	r3, r5
 80070e8:	4620      	mov	r0, r4
 80070ea:	4629      	mov	r1, r5
 80070ec:	f7f9 fd1e 	bl	8000b2c <__aeabi_dcmpun>
 80070f0:	b160      	cbz	r0, 800710c <pow+0xdc>
 80070f2:	f7ff fab9 	bl	8006668 <__errno>
 80070f6:	2321      	movs	r3, #33	; 0x21
 80070f8:	6003      	str	r3, [r0, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	2300      	movs	r3, #0
 80070fe:	4610      	mov	r0, r2
 8007100:	4619      	mov	r1, r3
 8007102:	f7f9 fba3 	bl	800084c <__aeabi_ddiv>
 8007106:	4604      	mov	r4, r0
 8007108:	460d      	mov	r5, r1
 800710a:	e7b6      	b.n	800707a <pow+0x4a>
 800710c:	f7ff faac 	bl	8006668 <__errno>
 8007110:	2322      	movs	r3, #34	; 0x22
 8007112:	6003      	str	r3, [r0, #0]
 8007114:	2200      	movs	r2, #0
 8007116:	2300      	movs	r3, #0
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 fcde 	bl	8000adc <__aeabi_dcmplt>
 8007120:	2400      	movs	r4, #0
 8007122:	b158      	cbz	r0, 800713c <pow+0x10c>
 8007124:	ec47 6b10 	vmov	d0, r6, r7
 8007128:	f000 fe5a 	bl	8007de0 <rint>
 800712c:	4632      	mov	r2, r6
 800712e:	ec51 0b10 	vmov	r0, r1, d0
 8007132:	463b      	mov	r3, r7
 8007134:	f7f9 fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007138:	2800      	cmp	r0, #0
 800713a:	d0c2      	beq.n	80070c2 <pow+0x92>
 800713c:	4d11      	ldr	r5, [pc, #68]	; (8007184 <pow+0x154>)
 800713e:	e79c      	b.n	800707a <pow+0x4a>
 8007140:	2200      	movs	r2, #0
 8007142:	2300      	movs	r3, #0
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800714c:	2800      	cmp	r0, #0
 800714e:	d094      	beq.n	800707a <pow+0x4a>
 8007150:	ec49 8b10 	vmov	d0, r8, r9
 8007154:	f000 fe2f 	bl	8007db6 <finite>
 8007158:	2800      	cmp	r0, #0
 800715a:	d08e      	beq.n	800707a <pow+0x4a>
 800715c:	ec47 6b10 	vmov	d0, r6, r7
 8007160:	f000 fe29 	bl	8007db6 <finite>
 8007164:	2800      	cmp	r0, #0
 8007166:	d088      	beq.n	800707a <pow+0x4a>
 8007168:	f7ff fa7e 	bl	8006668 <__errno>
 800716c:	2322      	movs	r3, #34	; 0x22
 800716e:	6003      	str	r3, [r0, #0]
 8007170:	2400      	movs	r4, #0
 8007172:	2500      	movs	r5, #0
 8007174:	e781      	b.n	800707a <pow+0x4a>
 8007176:	4d04      	ldr	r5, [pc, #16]	; (8007188 <pow+0x158>)
 8007178:	2400      	movs	r4, #0
 800717a:	e77e      	b.n	800707a <pow+0x4a>
 800717c:	2000009c 	.word	0x2000009c
 8007180:	fff00000 	.word	0xfff00000
 8007184:	7ff00000 	.word	0x7ff00000
 8007188:	3ff00000 	.word	0x3ff00000

0800718c <sqrt>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	ed2d 8b02 	vpush	{d8}
 8007192:	ec55 4b10 	vmov	r4, r5, d0
 8007196:	f000 fd51 	bl	8007c3c <__ieee754_sqrt>
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <sqrt+0x64>)
 800719c:	eeb0 8a40 	vmov.f32	s16, s0
 80071a0:	eef0 8a60 	vmov.f32	s17, s1
 80071a4:	f993 3000 	ldrsb.w	r3, [r3]
 80071a8:	3301      	adds	r3, #1
 80071aa:	d019      	beq.n	80071e0 <sqrt+0x54>
 80071ac:	4622      	mov	r2, r4
 80071ae:	462b      	mov	r3, r5
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7f9 fcba 	bl	8000b2c <__aeabi_dcmpun>
 80071b8:	b990      	cbnz	r0, 80071e0 <sqrt+0x54>
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80071c6:	b158      	cbz	r0, 80071e0 <sqrt+0x54>
 80071c8:	f7ff fa4e 	bl	8006668 <__errno>
 80071cc:	2321      	movs	r3, #33	; 0x21
 80071ce:	6003      	str	r3, [r0, #0]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	4610      	mov	r0, r2
 80071d6:	4619      	mov	r1, r3
 80071d8:	f7f9 fb38 	bl	800084c <__aeabi_ddiv>
 80071dc:	ec41 0b18 	vmov	d8, r0, r1
 80071e0:	eeb0 0a48 	vmov.f32	s0, s16
 80071e4:	eef0 0a68 	vmov.f32	s1, s17
 80071e8:	ecbd 8b02 	vpop	{d8}
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	bf00      	nop
 80071f0:	2000009c 	.word	0x2000009c
 80071f4:	00000000 	.word	0x00000000

080071f8 <__ieee754_pow>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	ed2d 8b06 	vpush	{d8-d10}
 8007200:	b08d      	sub	sp, #52	; 0x34
 8007202:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007206:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800720a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800720e:	ea56 0100 	orrs.w	r1, r6, r0
 8007212:	ec53 2b10 	vmov	r2, r3, d0
 8007216:	f000 84d1 	beq.w	8007bbc <__ieee754_pow+0x9c4>
 800721a:	497f      	ldr	r1, [pc, #508]	; (8007418 <__ieee754_pow+0x220>)
 800721c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007220:	428c      	cmp	r4, r1
 8007222:	ee10 8a10 	vmov	r8, s0
 8007226:	4699      	mov	r9, r3
 8007228:	dc09      	bgt.n	800723e <__ieee754_pow+0x46>
 800722a:	d103      	bne.n	8007234 <__ieee754_pow+0x3c>
 800722c:	b97a      	cbnz	r2, 800724e <__ieee754_pow+0x56>
 800722e:	42a6      	cmp	r6, r4
 8007230:	dd02      	ble.n	8007238 <__ieee754_pow+0x40>
 8007232:	e00c      	b.n	800724e <__ieee754_pow+0x56>
 8007234:	428e      	cmp	r6, r1
 8007236:	dc02      	bgt.n	800723e <__ieee754_pow+0x46>
 8007238:	428e      	cmp	r6, r1
 800723a:	d110      	bne.n	800725e <__ieee754_pow+0x66>
 800723c:	b178      	cbz	r0, 800725e <__ieee754_pow+0x66>
 800723e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007242:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007246:	ea54 0308 	orrs.w	r3, r4, r8
 800724a:	f000 84b7 	beq.w	8007bbc <__ieee754_pow+0x9c4>
 800724e:	4873      	ldr	r0, [pc, #460]	; (800741c <__ieee754_pow+0x224>)
 8007250:	b00d      	add	sp, #52	; 0x34
 8007252:	ecbd 8b06 	vpop	{d8-d10}
 8007256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	f000 bdb9 	b.w	8007dd0 <nan>
 800725e:	f1b9 0f00 	cmp.w	r9, #0
 8007262:	da36      	bge.n	80072d2 <__ieee754_pow+0xda>
 8007264:	496e      	ldr	r1, [pc, #440]	; (8007420 <__ieee754_pow+0x228>)
 8007266:	428e      	cmp	r6, r1
 8007268:	dc51      	bgt.n	800730e <__ieee754_pow+0x116>
 800726a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800726e:	428e      	cmp	r6, r1
 8007270:	f340 84af 	ble.w	8007bd2 <__ieee754_pow+0x9da>
 8007274:	1531      	asrs	r1, r6, #20
 8007276:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800727a:	2914      	cmp	r1, #20
 800727c:	dd0f      	ble.n	800729e <__ieee754_pow+0xa6>
 800727e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007282:	fa20 fc01 	lsr.w	ip, r0, r1
 8007286:	fa0c f101 	lsl.w	r1, ip, r1
 800728a:	4281      	cmp	r1, r0
 800728c:	f040 84a1 	bne.w	8007bd2 <__ieee754_pow+0x9da>
 8007290:	f00c 0c01 	and.w	ip, ip, #1
 8007294:	f1cc 0102 	rsb	r1, ip, #2
 8007298:	9100      	str	r1, [sp, #0]
 800729a:	b180      	cbz	r0, 80072be <__ieee754_pow+0xc6>
 800729c:	e059      	b.n	8007352 <__ieee754_pow+0x15a>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d155      	bne.n	800734e <__ieee754_pow+0x156>
 80072a2:	f1c1 0114 	rsb	r1, r1, #20
 80072a6:	fa46 fc01 	asr.w	ip, r6, r1
 80072aa:	fa0c f101 	lsl.w	r1, ip, r1
 80072ae:	42b1      	cmp	r1, r6
 80072b0:	f040 848c 	bne.w	8007bcc <__ieee754_pow+0x9d4>
 80072b4:	f00c 0c01 	and.w	ip, ip, #1
 80072b8:	f1cc 0102 	rsb	r1, ip, #2
 80072bc:	9100      	str	r1, [sp, #0]
 80072be:	4959      	ldr	r1, [pc, #356]	; (8007424 <__ieee754_pow+0x22c>)
 80072c0:	428e      	cmp	r6, r1
 80072c2:	d12d      	bne.n	8007320 <__ieee754_pow+0x128>
 80072c4:	2f00      	cmp	r7, #0
 80072c6:	da79      	bge.n	80073bc <__ieee754_pow+0x1c4>
 80072c8:	4956      	ldr	r1, [pc, #344]	; (8007424 <__ieee754_pow+0x22c>)
 80072ca:	2000      	movs	r0, #0
 80072cc:	f7f9 fabe 	bl	800084c <__aeabi_ddiv>
 80072d0:	e016      	b.n	8007300 <__ieee754_pow+0x108>
 80072d2:	2100      	movs	r1, #0
 80072d4:	9100      	str	r1, [sp, #0]
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d13b      	bne.n	8007352 <__ieee754_pow+0x15a>
 80072da:	494f      	ldr	r1, [pc, #316]	; (8007418 <__ieee754_pow+0x220>)
 80072dc:	428e      	cmp	r6, r1
 80072de:	d1ee      	bne.n	80072be <__ieee754_pow+0xc6>
 80072e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80072e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80072e8:	ea53 0308 	orrs.w	r3, r3, r8
 80072ec:	f000 8466 	beq.w	8007bbc <__ieee754_pow+0x9c4>
 80072f0:	4b4d      	ldr	r3, [pc, #308]	; (8007428 <__ieee754_pow+0x230>)
 80072f2:	429c      	cmp	r4, r3
 80072f4:	dd0d      	ble.n	8007312 <__ieee754_pow+0x11a>
 80072f6:	2f00      	cmp	r7, #0
 80072f8:	f280 8464 	bge.w	8007bc4 <__ieee754_pow+0x9cc>
 80072fc:	2000      	movs	r0, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	ec41 0b10 	vmov	d0, r0, r1
 8007304:	b00d      	add	sp, #52	; 0x34
 8007306:	ecbd 8b06 	vpop	{d8-d10}
 800730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730e:	2102      	movs	r1, #2
 8007310:	e7e0      	b.n	80072d4 <__ieee754_pow+0xdc>
 8007312:	2f00      	cmp	r7, #0
 8007314:	daf2      	bge.n	80072fc <__ieee754_pow+0x104>
 8007316:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800731a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800731e:	e7ef      	b.n	8007300 <__ieee754_pow+0x108>
 8007320:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007324:	d104      	bne.n	8007330 <__ieee754_pow+0x138>
 8007326:	4610      	mov	r0, r2
 8007328:	4619      	mov	r1, r3
 800732a:	f7f9 f965 	bl	80005f8 <__aeabi_dmul>
 800732e:	e7e7      	b.n	8007300 <__ieee754_pow+0x108>
 8007330:	493e      	ldr	r1, [pc, #248]	; (800742c <__ieee754_pow+0x234>)
 8007332:	428f      	cmp	r7, r1
 8007334:	d10d      	bne.n	8007352 <__ieee754_pow+0x15a>
 8007336:	f1b9 0f00 	cmp.w	r9, #0
 800733a:	db0a      	blt.n	8007352 <__ieee754_pow+0x15a>
 800733c:	ec43 2b10 	vmov	d0, r2, r3
 8007340:	b00d      	add	sp, #52	; 0x34
 8007342:	ecbd 8b06 	vpop	{d8-d10}
 8007346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	f000 bc77 	b.w	8007c3c <__ieee754_sqrt>
 800734e:	2100      	movs	r1, #0
 8007350:	9100      	str	r1, [sp, #0]
 8007352:	ec43 2b10 	vmov	d0, r2, r3
 8007356:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800735a:	f000 fd23 	bl	8007da4 <fabs>
 800735e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007362:	ec51 0b10 	vmov	r0, r1, d0
 8007366:	f1b8 0f00 	cmp.w	r8, #0
 800736a:	d12a      	bne.n	80073c2 <__ieee754_pow+0x1ca>
 800736c:	b12c      	cbz	r4, 800737a <__ieee754_pow+0x182>
 800736e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007424 <__ieee754_pow+0x22c>
 8007372:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007376:	45e6      	cmp	lr, ip
 8007378:	d123      	bne.n	80073c2 <__ieee754_pow+0x1ca>
 800737a:	2f00      	cmp	r7, #0
 800737c:	da05      	bge.n	800738a <__ieee754_pow+0x192>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	2000      	movs	r0, #0
 8007384:	4927      	ldr	r1, [pc, #156]	; (8007424 <__ieee754_pow+0x22c>)
 8007386:	f7f9 fa61 	bl	800084c <__aeabi_ddiv>
 800738a:	f1b9 0f00 	cmp.w	r9, #0
 800738e:	dab7      	bge.n	8007300 <__ieee754_pow+0x108>
 8007390:	9b00      	ldr	r3, [sp, #0]
 8007392:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007396:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800739a:	4323      	orrs	r3, r4
 800739c:	d108      	bne.n	80073b0 <__ieee754_pow+0x1b8>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	f7f8 ff6f 	bl	8000288 <__aeabi_dsub>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	e78d      	b.n	80072cc <__ieee754_pow+0xd4>
 80073b0:	9b00      	ldr	r3, [sp, #0]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d1a4      	bne.n	8007300 <__ieee754_pow+0x108>
 80073b6:	4602      	mov	r2, r0
 80073b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073bc:	4610      	mov	r0, r2
 80073be:	4619      	mov	r1, r3
 80073c0:	e79e      	b.n	8007300 <__ieee754_pow+0x108>
 80073c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80073c6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80073ca:	950a      	str	r5, [sp, #40]	; 0x28
 80073cc:	9d00      	ldr	r5, [sp, #0]
 80073ce:	46ac      	mov	ip, r5
 80073d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80073d2:	ea5c 0505 	orrs.w	r5, ip, r5
 80073d6:	d0e4      	beq.n	80073a2 <__ieee754_pow+0x1aa>
 80073d8:	4b15      	ldr	r3, [pc, #84]	; (8007430 <__ieee754_pow+0x238>)
 80073da:	429e      	cmp	r6, r3
 80073dc:	f340 80fc 	ble.w	80075d8 <__ieee754_pow+0x3e0>
 80073e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80073e4:	429e      	cmp	r6, r3
 80073e6:	4b10      	ldr	r3, [pc, #64]	; (8007428 <__ieee754_pow+0x230>)
 80073e8:	dd07      	ble.n	80073fa <__ieee754_pow+0x202>
 80073ea:	429c      	cmp	r4, r3
 80073ec:	dc0a      	bgt.n	8007404 <__ieee754_pow+0x20c>
 80073ee:	2f00      	cmp	r7, #0
 80073f0:	da84      	bge.n	80072fc <__ieee754_pow+0x104>
 80073f2:	a307      	add	r3, pc, #28	; (adr r3, 8007410 <__ieee754_pow+0x218>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	e795      	b.n	8007326 <__ieee754_pow+0x12e>
 80073fa:	429c      	cmp	r4, r3
 80073fc:	dbf7      	blt.n	80073ee <__ieee754_pow+0x1f6>
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <__ieee754_pow+0x22c>)
 8007400:	429c      	cmp	r4, r3
 8007402:	dd17      	ble.n	8007434 <__ieee754_pow+0x23c>
 8007404:	2f00      	cmp	r7, #0
 8007406:	dcf4      	bgt.n	80073f2 <__ieee754_pow+0x1fa>
 8007408:	e778      	b.n	80072fc <__ieee754_pow+0x104>
 800740a:	bf00      	nop
 800740c:	f3af 8000 	nop.w
 8007410:	8800759c 	.word	0x8800759c
 8007414:	7e37e43c 	.word	0x7e37e43c
 8007418:	7ff00000 	.word	0x7ff00000
 800741c:	08008091 	.word	0x08008091
 8007420:	433fffff 	.word	0x433fffff
 8007424:	3ff00000 	.word	0x3ff00000
 8007428:	3fefffff 	.word	0x3fefffff
 800742c:	3fe00000 	.word	0x3fe00000
 8007430:	41e00000 	.word	0x41e00000
 8007434:	4b64      	ldr	r3, [pc, #400]	; (80075c8 <__ieee754_pow+0x3d0>)
 8007436:	2200      	movs	r2, #0
 8007438:	f7f8 ff26 	bl	8000288 <__aeabi_dsub>
 800743c:	a356      	add	r3, pc, #344	; (adr r3, 8007598 <__ieee754_pow+0x3a0>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	4604      	mov	r4, r0
 8007444:	460d      	mov	r5, r1
 8007446:	f7f9 f8d7 	bl	80005f8 <__aeabi_dmul>
 800744a:	a355      	add	r3, pc, #340	; (adr r3, 80075a0 <__ieee754_pow+0x3a8>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	4606      	mov	r6, r0
 8007452:	460f      	mov	r7, r1
 8007454:	4620      	mov	r0, r4
 8007456:	4629      	mov	r1, r5
 8007458:	f7f9 f8ce 	bl	80005f8 <__aeabi_dmul>
 800745c:	4b5b      	ldr	r3, [pc, #364]	; (80075cc <__ieee754_pow+0x3d4>)
 800745e:	4682      	mov	sl, r0
 8007460:	468b      	mov	fp, r1
 8007462:	2200      	movs	r2, #0
 8007464:	4620      	mov	r0, r4
 8007466:	4629      	mov	r1, r5
 8007468:	f7f9 f8c6 	bl	80005f8 <__aeabi_dmul>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	a14d      	add	r1, pc, #308	; (adr r1, 80075a8 <__ieee754_pow+0x3b0>)
 8007472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007476:	f7f8 ff07 	bl	8000288 <__aeabi_dsub>
 800747a:	4622      	mov	r2, r4
 800747c:	462b      	mov	r3, r5
 800747e:	f7f9 f8bb 	bl	80005f8 <__aeabi_dmul>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	2000      	movs	r0, #0
 8007488:	4951      	ldr	r1, [pc, #324]	; (80075d0 <__ieee754_pow+0x3d8>)
 800748a:	f7f8 fefd 	bl	8000288 <__aeabi_dsub>
 800748e:	4622      	mov	r2, r4
 8007490:	4680      	mov	r8, r0
 8007492:	4689      	mov	r9, r1
 8007494:	462b      	mov	r3, r5
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f9 f8ad 	bl	80005f8 <__aeabi_dmul>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f9 f8a7 	bl	80005f8 <__aeabi_dmul>
 80074aa:	a341      	add	r3, pc, #260	; (adr r3, 80075b0 <__ieee754_pow+0x3b8>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f9 f8a2 	bl	80005f8 <__aeabi_dmul>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4650      	mov	r0, sl
 80074ba:	4659      	mov	r1, fp
 80074bc:	f7f8 fee4 	bl	8000288 <__aeabi_dsub>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4680      	mov	r8, r0
 80074c6:	4689      	mov	r9, r1
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f8 fede 	bl	800028c <__adddf3>
 80074d0:	2400      	movs	r4, #0
 80074d2:	4632      	mov	r2, r6
 80074d4:	463b      	mov	r3, r7
 80074d6:	4620      	mov	r0, r4
 80074d8:	460d      	mov	r5, r1
 80074da:	f7f8 fed5 	bl	8000288 <__aeabi_dsub>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4640      	mov	r0, r8
 80074e4:	4649      	mov	r1, r9
 80074e6:	f7f8 fecf 	bl	8000288 <__aeabi_dsub>
 80074ea:	9b00      	ldr	r3, [sp, #0]
 80074ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ee:	3b01      	subs	r3, #1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	4682      	mov	sl, r0
 80074f4:	468b      	mov	fp, r1
 80074f6:	f040 81f1 	bne.w	80078dc <__ieee754_pow+0x6e4>
 80074fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80075b8 <__ieee754_pow+0x3c0>
 80074fe:	eeb0 8a47 	vmov.f32	s16, s14
 8007502:	eef0 8a67 	vmov.f32	s17, s15
 8007506:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800750a:	2600      	movs	r6, #0
 800750c:	4632      	mov	r2, r6
 800750e:	463b      	mov	r3, r7
 8007510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007514:	f7f8 feb8 	bl	8000288 <__aeabi_dsub>
 8007518:	4622      	mov	r2, r4
 800751a:	462b      	mov	r3, r5
 800751c:	f7f9 f86c 	bl	80005f8 <__aeabi_dmul>
 8007520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007524:	4680      	mov	r8, r0
 8007526:	4689      	mov	r9, r1
 8007528:	4650      	mov	r0, sl
 800752a:	4659      	mov	r1, fp
 800752c:	f7f9 f864 	bl	80005f8 <__aeabi_dmul>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4640      	mov	r0, r8
 8007536:	4649      	mov	r1, r9
 8007538:	f7f8 fea8 	bl	800028c <__adddf3>
 800753c:	4632      	mov	r2, r6
 800753e:	463b      	mov	r3, r7
 8007540:	4680      	mov	r8, r0
 8007542:	4689      	mov	r9, r1
 8007544:	4620      	mov	r0, r4
 8007546:	4629      	mov	r1, r5
 8007548:	f7f9 f856 	bl	80005f8 <__aeabi_dmul>
 800754c:	460b      	mov	r3, r1
 800754e:	4604      	mov	r4, r0
 8007550:	460d      	mov	r5, r1
 8007552:	4602      	mov	r2, r0
 8007554:	4649      	mov	r1, r9
 8007556:	4640      	mov	r0, r8
 8007558:	f7f8 fe98 	bl	800028c <__adddf3>
 800755c:	4b1d      	ldr	r3, [pc, #116]	; (80075d4 <__ieee754_pow+0x3dc>)
 800755e:	4299      	cmp	r1, r3
 8007560:	ec45 4b19 	vmov	d9, r4, r5
 8007564:	4606      	mov	r6, r0
 8007566:	460f      	mov	r7, r1
 8007568:	468b      	mov	fp, r1
 800756a:	f340 82fe 	ble.w	8007b6a <__ieee754_pow+0x972>
 800756e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007572:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007576:	4303      	orrs	r3, r0
 8007578:	f000 81f0 	beq.w	800795c <__ieee754_pow+0x764>
 800757c:	a310      	add	r3, pc, #64	; (adr r3, 80075c0 <__ieee754_pow+0x3c8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	ec51 0b18 	vmov	r0, r1, d8
 8007586:	f7f9 f837 	bl	80005f8 <__aeabi_dmul>
 800758a:	a30d      	add	r3, pc, #52	; (adr r3, 80075c0 <__ieee754_pow+0x3c8>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	e6cb      	b.n	800732a <__ieee754_pow+0x132>
 8007592:	bf00      	nop
 8007594:	f3af 8000 	nop.w
 8007598:	60000000 	.word	0x60000000
 800759c:	3ff71547 	.word	0x3ff71547
 80075a0:	f85ddf44 	.word	0xf85ddf44
 80075a4:	3e54ae0b 	.word	0x3e54ae0b
 80075a8:	55555555 	.word	0x55555555
 80075ac:	3fd55555 	.word	0x3fd55555
 80075b0:	652b82fe 	.word	0x652b82fe
 80075b4:	3ff71547 	.word	0x3ff71547
 80075b8:	00000000 	.word	0x00000000
 80075bc:	bff00000 	.word	0xbff00000
 80075c0:	8800759c 	.word	0x8800759c
 80075c4:	7e37e43c 	.word	0x7e37e43c
 80075c8:	3ff00000 	.word	0x3ff00000
 80075cc:	3fd00000 	.word	0x3fd00000
 80075d0:	3fe00000 	.word	0x3fe00000
 80075d4:	408fffff 	.word	0x408fffff
 80075d8:	4bd7      	ldr	r3, [pc, #860]	; (8007938 <__ieee754_pow+0x740>)
 80075da:	ea03 0309 	and.w	r3, r3, r9
 80075de:	2200      	movs	r2, #0
 80075e0:	b92b      	cbnz	r3, 80075ee <__ieee754_pow+0x3f6>
 80075e2:	4bd6      	ldr	r3, [pc, #856]	; (800793c <__ieee754_pow+0x744>)
 80075e4:	f7f9 f808 	bl	80005f8 <__aeabi_dmul>
 80075e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80075ec:	460c      	mov	r4, r1
 80075ee:	1523      	asrs	r3, r4, #20
 80075f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80075f4:	4413      	add	r3, r2
 80075f6:	9309      	str	r3, [sp, #36]	; 0x24
 80075f8:	4bd1      	ldr	r3, [pc, #836]	; (8007940 <__ieee754_pow+0x748>)
 80075fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007602:	429c      	cmp	r4, r3
 8007604:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007608:	dd08      	ble.n	800761c <__ieee754_pow+0x424>
 800760a:	4bce      	ldr	r3, [pc, #824]	; (8007944 <__ieee754_pow+0x74c>)
 800760c:	429c      	cmp	r4, r3
 800760e:	f340 8163 	ble.w	80078d8 <__ieee754_pow+0x6e0>
 8007612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007614:	3301      	adds	r3, #1
 8007616:	9309      	str	r3, [sp, #36]	; 0x24
 8007618:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800761c:	2400      	movs	r4, #0
 800761e:	00e3      	lsls	r3, r4, #3
 8007620:	930b      	str	r3, [sp, #44]	; 0x2c
 8007622:	4bc9      	ldr	r3, [pc, #804]	; (8007948 <__ieee754_pow+0x750>)
 8007624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007628:	ed93 7b00 	vldr	d7, [r3]
 800762c:	4629      	mov	r1, r5
 800762e:	ec53 2b17 	vmov	r2, r3, d7
 8007632:	eeb0 8a47 	vmov.f32	s16, s14
 8007636:	eef0 8a67 	vmov.f32	s17, s15
 800763a:	4682      	mov	sl, r0
 800763c:	f7f8 fe24 	bl	8000288 <__aeabi_dsub>
 8007640:	4652      	mov	r2, sl
 8007642:	4606      	mov	r6, r0
 8007644:	460f      	mov	r7, r1
 8007646:	462b      	mov	r3, r5
 8007648:	ec51 0b18 	vmov	r0, r1, d8
 800764c:	f7f8 fe1e 	bl	800028c <__adddf3>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	2000      	movs	r0, #0
 8007656:	49bd      	ldr	r1, [pc, #756]	; (800794c <__ieee754_pow+0x754>)
 8007658:	f7f9 f8f8 	bl	800084c <__aeabi_ddiv>
 800765c:	ec41 0b19 	vmov	d9, r0, r1
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f8 ffc6 	bl	80005f8 <__aeabi_dmul>
 800766c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007674:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007678:	2300      	movs	r3, #0
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007680:	46ab      	mov	fp, r5
 8007682:	106d      	asrs	r5, r5, #1
 8007684:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007688:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800768c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007690:	2200      	movs	r2, #0
 8007692:	4640      	mov	r0, r8
 8007694:	4649      	mov	r1, r9
 8007696:	4614      	mov	r4, r2
 8007698:	461d      	mov	r5, r3
 800769a:	f7f8 ffad 	bl	80005f8 <__aeabi_dmul>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4630      	mov	r0, r6
 80076a4:	4639      	mov	r1, r7
 80076a6:	f7f8 fdef 	bl	8000288 <__aeabi_dsub>
 80076aa:	ec53 2b18 	vmov	r2, r3, d8
 80076ae:	4606      	mov	r6, r0
 80076b0:	460f      	mov	r7, r1
 80076b2:	4620      	mov	r0, r4
 80076b4:	4629      	mov	r1, r5
 80076b6:	f7f8 fde7 	bl	8000288 <__aeabi_dsub>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4650      	mov	r0, sl
 80076c0:	4659      	mov	r1, fp
 80076c2:	f7f8 fde1 	bl	8000288 <__aeabi_dsub>
 80076c6:	4642      	mov	r2, r8
 80076c8:	464b      	mov	r3, r9
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4630      	mov	r0, r6
 80076d4:	4639      	mov	r1, r7
 80076d6:	f7f8 fdd7 	bl	8000288 <__aeabi_dsub>
 80076da:	ec53 2b19 	vmov	r2, r3, d9
 80076de:	f7f8 ff8b 	bl	80005f8 <__aeabi_dmul>
 80076e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076e6:	ec41 0b18 	vmov	d8, r0, r1
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	a37d      	add	r3, pc, #500	; (adr r3, 80078e8 <__ieee754_pow+0x6f0>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	f7f8 ff7c 	bl	80005f8 <__aeabi_dmul>
 8007700:	a37b      	add	r3, pc, #492	; (adr r3, 80078f0 <__ieee754_pow+0x6f8>)
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f7f8 fdc1 	bl	800028c <__adddf3>
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	f7f8 ff73 	bl	80005f8 <__aeabi_dmul>
 8007712:	a379      	add	r3, pc, #484	; (adr r3, 80078f8 <__ieee754_pow+0x700>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f8 fdb8 	bl	800028c <__adddf3>
 800771c:	4622      	mov	r2, r4
 800771e:	462b      	mov	r3, r5
 8007720:	f7f8 ff6a 	bl	80005f8 <__aeabi_dmul>
 8007724:	a376      	add	r3, pc, #472	; (adr r3, 8007900 <__ieee754_pow+0x708>)
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f7f8 fdaf 	bl	800028c <__adddf3>
 800772e:	4622      	mov	r2, r4
 8007730:	462b      	mov	r3, r5
 8007732:	f7f8 ff61 	bl	80005f8 <__aeabi_dmul>
 8007736:	a374      	add	r3, pc, #464	; (adr r3, 8007908 <__ieee754_pow+0x710>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f7f8 fda6 	bl	800028c <__adddf3>
 8007740:	4622      	mov	r2, r4
 8007742:	462b      	mov	r3, r5
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	a371      	add	r3, pc, #452	; (adr r3, 8007910 <__ieee754_pow+0x718>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f8 fd9d 	bl	800028c <__adddf3>
 8007752:	4622      	mov	r2, r4
 8007754:	4606      	mov	r6, r0
 8007756:	460f      	mov	r7, r1
 8007758:	462b      	mov	r3, r5
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f8 ff4b 	bl	80005f8 <__aeabi_dmul>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	f7f8 ff45 	bl	80005f8 <__aeabi_dmul>
 800776e:	4642      	mov	r2, r8
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	464b      	mov	r3, r9
 8007776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800777a:	f7f8 fd87 	bl	800028c <__adddf3>
 800777e:	ec53 2b18 	vmov	r2, r3, d8
 8007782:	f7f8 ff39 	bl	80005f8 <__aeabi_dmul>
 8007786:	4622      	mov	r2, r4
 8007788:	462b      	mov	r3, r5
 800778a:	f7f8 fd7f 	bl	800028c <__adddf3>
 800778e:	4642      	mov	r2, r8
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	464b      	mov	r3, r9
 8007796:	4640      	mov	r0, r8
 8007798:	4649      	mov	r1, r9
 800779a:	f7f8 ff2d 	bl	80005f8 <__aeabi_dmul>
 800779e:	4b6c      	ldr	r3, [pc, #432]	; (8007950 <__ieee754_pow+0x758>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	4606      	mov	r6, r0
 80077a4:	460f      	mov	r7, r1
 80077a6:	f7f8 fd71 	bl	800028c <__adddf3>
 80077aa:	4652      	mov	r2, sl
 80077ac:	465b      	mov	r3, fp
 80077ae:	f7f8 fd6d 	bl	800028c <__adddf3>
 80077b2:	9c04      	ldr	r4, [sp, #16]
 80077b4:	460d      	mov	r5, r1
 80077b6:	4622      	mov	r2, r4
 80077b8:	460b      	mov	r3, r1
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f8 ff1b 	bl	80005f8 <__aeabi_dmul>
 80077c2:	4b63      	ldr	r3, [pc, #396]	; (8007950 <__ieee754_pow+0x758>)
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	2200      	movs	r2, #0
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	f7f8 fd5b 	bl	8000288 <__aeabi_dsub>
 80077d2:	4632      	mov	r2, r6
 80077d4:	463b      	mov	r3, r7
 80077d6:	f7f8 fd57 	bl	8000288 <__aeabi_dsub>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4650      	mov	r0, sl
 80077e0:	4659      	mov	r1, fp
 80077e2:	f7f8 fd51 	bl	8000288 <__aeabi_dsub>
 80077e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077ea:	f7f8 ff05 	bl	80005f8 <__aeabi_dmul>
 80077ee:	4622      	mov	r2, r4
 80077f0:	4606      	mov	r6, r0
 80077f2:	460f      	mov	r7, r1
 80077f4:	462b      	mov	r3, r5
 80077f6:	ec51 0b18 	vmov	r0, r1, d8
 80077fa:	f7f8 fefd 	bl	80005f8 <__aeabi_dmul>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4630      	mov	r0, r6
 8007804:	4639      	mov	r1, r7
 8007806:	f7f8 fd41 	bl	800028c <__adddf3>
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4640      	mov	r0, r8
 8007814:	4649      	mov	r1, r9
 8007816:	f7f8 fd39 	bl	800028c <__adddf3>
 800781a:	9c04      	ldr	r4, [sp, #16]
 800781c:	a33e      	add	r3, pc, #248	; (adr r3, 8007918 <__ieee754_pow+0x720>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	4620      	mov	r0, r4
 8007824:	460d      	mov	r5, r1
 8007826:	f7f8 fee7 	bl	80005f8 <__aeabi_dmul>
 800782a:	4642      	mov	r2, r8
 800782c:	ec41 0b18 	vmov	d8, r0, r1
 8007830:	464b      	mov	r3, r9
 8007832:	4620      	mov	r0, r4
 8007834:	4629      	mov	r1, r5
 8007836:	f7f8 fd27 	bl	8000288 <__aeabi_dsub>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f8 fd21 	bl	8000288 <__aeabi_dsub>
 8007846:	a336      	add	r3, pc, #216	; (adr r3, 8007920 <__ieee754_pow+0x728>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fed4 	bl	80005f8 <__aeabi_dmul>
 8007850:	a335      	add	r3, pc, #212	; (adr r3, 8007928 <__ieee754_pow+0x730>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	f7f8 fecb 	bl	80005f8 <__aeabi_dmul>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4630      	mov	r0, r6
 8007868:	4639      	mov	r1, r7
 800786a:	f7f8 fd0f 	bl	800028c <__adddf3>
 800786e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007870:	4b38      	ldr	r3, [pc, #224]	; (8007954 <__ieee754_pow+0x75c>)
 8007872:	4413      	add	r3, r2
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f7f8 fd08 	bl	800028c <__adddf3>
 800787c:	4682      	mov	sl, r0
 800787e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007880:	468b      	mov	fp, r1
 8007882:	f7f8 fe4f 	bl	8000524 <__aeabi_i2d>
 8007886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007888:	4b33      	ldr	r3, [pc, #204]	; (8007958 <__ieee754_pow+0x760>)
 800788a:	4413      	add	r3, r2
 800788c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007890:	4606      	mov	r6, r0
 8007892:	460f      	mov	r7, r1
 8007894:	4652      	mov	r2, sl
 8007896:	465b      	mov	r3, fp
 8007898:	ec51 0b18 	vmov	r0, r1, d8
 800789c:	f7f8 fcf6 	bl	800028c <__adddf3>
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	f7f8 fcf2 	bl	800028c <__adddf3>
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	f7f8 fcee 	bl	800028c <__adddf3>
 80078b0:	9c04      	ldr	r4, [sp, #16]
 80078b2:	4632      	mov	r2, r6
 80078b4:	463b      	mov	r3, r7
 80078b6:	4620      	mov	r0, r4
 80078b8:	460d      	mov	r5, r1
 80078ba:	f7f8 fce5 	bl	8000288 <__aeabi_dsub>
 80078be:	4642      	mov	r2, r8
 80078c0:	464b      	mov	r3, r9
 80078c2:	f7f8 fce1 	bl	8000288 <__aeabi_dsub>
 80078c6:	ec53 2b18 	vmov	r2, r3, d8
 80078ca:	f7f8 fcdd 	bl	8000288 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4650      	mov	r0, sl
 80078d4:	4659      	mov	r1, fp
 80078d6:	e606      	b.n	80074e6 <__ieee754_pow+0x2ee>
 80078d8:	2401      	movs	r4, #1
 80078da:	e6a0      	b.n	800761e <__ieee754_pow+0x426>
 80078dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007930 <__ieee754_pow+0x738>
 80078e0:	e60d      	b.n	80074fe <__ieee754_pow+0x306>
 80078e2:	bf00      	nop
 80078e4:	f3af 8000 	nop.w
 80078e8:	4a454eef 	.word	0x4a454eef
 80078ec:	3fca7e28 	.word	0x3fca7e28
 80078f0:	93c9db65 	.word	0x93c9db65
 80078f4:	3fcd864a 	.word	0x3fcd864a
 80078f8:	a91d4101 	.word	0xa91d4101
 80078fc:	3fd17460 	.word	0x3fd17460
 8007900:	518f264d 	.word	0x518f264d
 8007904:	3fd55555 	.word	0x3fd55555
 8007908:	db6fabff 	.word	0xdb6fabff
 800790c:	3fdb6db6 	.word	0x3fdb6db6
 8007910:	33333303 	.word	0x33333303
 8007914:	3fe33333 	.word	0x3fe33333
 8007918:	e0000000 	.word	0xe0000000
 800791c:	3feec709 	.word	0x3feec709
 8007920:	dc3a03fd 	.word	0xdc3a03fd
 8007924:	3feec709 	.word	0x3feec709
 8007928:	145b01f5 	.word	0x145b01f5
 800792c:	be3e2fe0 	.word	0xbe3e2fe0
 8007930:	00000000 	.word	0x00000000
 8007934:	3ff00000 	.word	0x3ff00000
 8007938:	7ff00000 	.word	0x7ff00000
 800793c:	43400000 	.word	0x43400000
 8007940:	0003988e 	.word	0x0003988e
 8007944:	000bb679 	.word	0x000bb679
 8007948:	080080c0 	.word	0x080080c0
 800794c:	3ff00000 	.word	0x3ff00000
 8007950:	40080000 	.word	0x40080000
 8007954:	080080e0 	.word	0x080080e0
 8007958:	080080d0 	.word	0x080080d0
 800795c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007c34 <__ieee754_pow+0xa3c>)
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	f7f8 fc91 	bl	800028c <__adddf3>
 800796a:	4622      	mov	r2, r4
 800796c:	ec41 0b1a 	vmov	d10, r0, r1
 8007970:	462b      	mov	r3, r5
 8007972:	4630      	mov	r0, r6
 8007974:	4639      	mov	r1, r7
 8007976:	f7f8 fc87 	bl	8000288 <__aeabi_dsub>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	ec51 0b1a 	vmov	r0, r1, d10
 8007982:	f7f9 f8c9 	bl	8000b18 <__aeabi_dcmpgt>
 8007986:	2800      	cmp	r0, #0
 8007988:	f47f adf8 	bne.w	800757c <__ieee754_pow+0x384>
 800798c:	4aa4      	ldr	r2, [pc, #656]	; (8007c20 <__ieee754_pow+0xa28>)
 800798e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007992:	4293      	cmp	r3, r2
 8007994:	f340 810b 	ble.w	8007bae <__ieee754_pow+0x9b6>
 8007998:	151b      	asrs	r3, r3, #20
 800799a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800799e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80079a2:	fa4a f303 	asr.w	r3, sl, r3
 80079a6:	445b      	add	r3, fp
 80079a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80079ac:	4e9d      	ldr	r6, [pc, #628]	; (8007c24 <__ieee754_pow+0xa2c>)
 80079ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80079b2:	4116      	asrs	r6, r2
 80079b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80079b8:	2000      	movs	r0, #0
 80079ba:	ea23 0106 	bic.w	r1, r3, r6
 80079be:	f1c2 0214 	rsb	r2, r2, #20
 80079c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80079c6:	fa4a fa02 	asr.w	sl, sl, r2
 80079ca:	f1bb 0f00 	cmp.w	fp, #0
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4620      	mov	r0, r4
 80079d4:	4629      	mov	r1, r5
 80079d6:	bfb8      	it	lt
 80079d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80079dc:	f7f8 fc54 	bl	8000288 <__aeabi_dsub>
 80079e0:	ec41 0b19 	vmov	d9, r0, r1
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	ec51 0b19 	vmov	r0, r1, d9
 80079ec:	f7f8 fc4e 	bl	800028c <__adddf3>
 80079f0:	2400      	movs	r4, #0
 80079f2:	a379      	add	r3, pc, #484	; (adr r3, 8007bd8 <__ieee754_pow+0x9e0>)
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	4620      	mov	r0, r4
 80079fa:	460d      	mov	r5, r1
 80079fc:	f7f8 fdfc 	bl	80005f8 <__aeabi_dmul>
 8007a00:	ec53 2b19 	vmov	r2, r3, d9
 8007a04:	4606      	mov	r6, r0
 8007a06:	460f      	mov	r7, r1
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 fc3c 	bl	8000288 <__aeabi_dsub>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f8 fc36 	bl	8000288 <__aeabi_dsub>
 8007a1c:	a370      	add	r3, pc, #448	; (adr r3, 8007be0 <__ieee754_pow+0x9e8>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	f7f8 fde9 	bl	80005f8 <__aeabi_dmul>
 8007a26:	a370      	add	r3, pc, #448	; (adr r3, 8007be8 <__ieee754_pow+0x9f0>)
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	4689      	mov	r9, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f8 fde0 	bl	80005f8 <__aeabi_dmul>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	4649      	mov	r1, r9
 8007a40:	f7f8 fc24 	bl	800028c <__adddf3>
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f8 fc1c 	bl	800028c <__adddf3>
 8007a54:	4632      	mov	r2, r6
 8007a56:	463b      	mov	r3, r7
 8007a58:	4680      	mov	r8, r0
 8007a5a:	4689      	mov	r9, r1
 8007a5c:	f7f8 fc14 	bl	8000288 <__aeabi_dsub>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fc0e 	bl	8000288 <__aeabi_dsub>
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460f      	mov	r7, r1
 8007a72:	464b      	mov	r3, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f8 fdbe 	bl	80005f8 <__aeabi_dmul>
 8007a7c:	a35c      	add	r3, pc, #368	; (adr r3, 8007bf0 <__ieee754_pow+0x9f8>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	4604      	mov	r4, r0
 8007a84:	460d      	mov	r5, r1
 8007a86:	f7f8 fdb7 	bl	80005f8 <__aeabi_dmul>
 8007a8a:	a35b      	add	r3, pc, #364	; (adr r3, 8007bf8 <__ieee754_pow+0xa00>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 fbfa 	bl	8000288 <__aeabi_dsub>
 8007a94:	4622      	mov	r2, r4
 8007a96:	462b      	mov	r3, r5
 8007a98:	f7f8 fdae 	bl	80005f8 <__aeabi_dmul>
 8007a9c:	a358      	add	r3, pc, #352	; (adr r3, 8007c00 <__ieee754_pow+0xa08>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7f8 fbf3 	bl	800028c <__adddf3>
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	f7f8 fda5 	bl	80005f8 <__aeabi_dmul>
 8007aae:	a356      	add	r3, pc, #344	; (adr r3, 8007c08 <__ieee754_pow+0xa10>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fbe8 	bl	8000288 <__aeabi_dsub>
 8007ab8:	4622      	mov	r2, r4
 8007aba:	462b      	mov	r3, r5
 8007abc:	f7f8 fd9c 	bl	80005f8 <__aeabi_dmul>
 8007ac0:	a353      	add	r3, pc, #332	; (adr r3, 8007c10 <__ieee754_pow+0xa18>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f7f8 fbe1 	bl	800028c <__adddf3>
 8007aca:	4622      	mov	r2, r4
 8007acc:	462b      	mov	r3, r5
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 fbd5 	bl	8000288 <__aeabi_dsub>
 8007ade:	4604      	mov	r4, r0
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	4649      	mov	r1, r9
 8007aea:	f7f8 fd85 	bl	80005f8 <__aeabi_dmul>
 8007aee:	2200      	movs	r2, #0
 8007af0:	ec41 0b19 	vmov	d9, r0, r1
 8007af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007af8:	4620      	mov	r0, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7f8 fbc4 	bl	8000288 <__aeabi_dsub>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	ec51 0b19 	vmov	r0, r1, d9
 8007b08:	f7f8 fea0 	bl	800084c <__aeabi_ddiv>
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460d      	mov	r5, r1
 8007b12:	463b      	mov	r3, r7
 8007b14:	4640      	mov	r0, r8
 8007b16:	4649      	mov	r1, r9
 8007b18:	f7f8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	463b      	mov	r3, r7
 8007b20:	f7f8 fbb4 	bl	800028c <__adddf3>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f7f8 fbac 	bl	8000288 <__aeabi_dsub>
 8007b30:	4642      	mov	r2, r8
 8007b32:	464b      	mov	r3, r9
 8007b34:	f7f8 fba8 	bl	8000288 <__aeabi_dsub>
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	493a      	ldr	r1, [pc, #232]	; (8007c28 <__ieee754_pow+0xa30>)
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f7f8 fba2 	bl	8000288 <__aeabi_dsub>
 8007b44:	e9cd 0100 	strd	r0, r1, [sp]
 8007b48:	9b01      	ldr	r3, [sp, #4]
 8007b4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b52:	da2f      	bge.n	8007bb4 <__ieee754_pow+0x9bc>
 8007b54:	4650      	mov	r0, sl
 8007b56:	ed9d 0b00 	vldr	d0, [sp]
 8007b5a:	f000 f9cd 	bl	8007ef8 <scalbn>
 8007b5e:	ec51 0b10 	vmov	r0, r1, d0
 8007b62:	ec53 2b18 	vmov	r2, r3, d8
 8007b66:	f7ff bbe0 	b.w	800732a <__ieee754_pow+0x132>
 8007b6a:	4b30      	ldr	r3, [pc, #192]	; (8007c2c <__ieee754_pow+0xa34>)
 8007b6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007b70:	429e      	cmp	r6, r3
 8007b72:	f77f af0b 	ble.w	800798c <__ieee754_pow+0x794>
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <__ieee754_pow+0xa38>)
 8007b78:	440b      	add	r3, r1
 8007b7a:	4303      	orrs	r3, r0
 8007b7c:	d00b      	beq.n	8007b96 <__ieee754_pow+0x99e>
 8007b7e:	a326      	add	r3, pc, #152	; (adr r3, 8007c18 <__ieee754_pow+0xa20>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	ec51 0b18 	vmov	r0, r1, d8
 8007b88:	f7f8 fd36 	bl	80005f8 <__aeabi_dmul>
 8007b8c:	a322      	add	r3, pc, #136	; (adr r3, 8007c18 <__ieee754_pow+0xa20>)
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	f7ff bbca 	b.w	800732a <__ieee754_pow+0x132>
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f7f8 fb75 	bl	8000288 <__aeabi_dsub>
 8007b9e:	4642      	mov	r2, r8
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	f7f8 ffaf 	bl	8000b04 <__aeabi_dcmpge>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f43f aef0 	beq.w	800798c <__ieee754_pow+0x794>
 8007bac:	e7e7      	b.n	8007b7e <__ieee754_pow+0x986>
 8007bae:	f04f 0a00 	mov.w	sl, #0
 8007bb2:	e717      	b.n	80079e4 <__ieee754_pow+0x7ec>
 8007bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	e7d2      	b.n	8007b62 <__ieee754_pow+0x96a>
 8007bbc:	491a      	ldr	r1, [pc, #104]	; (8007c28 <__ieee754_pow+0xa30>)
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	f7ff bb9e 	b.w	8007300 <__ieee754_pow+0x108>
 8007bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc8:	f7ff bb9a 	b.w	8007300 <__ieee754_pow+0x108>
 8007bcc:	9000      	str	r0, [sp, #0]
 8007bce:	f7ff bb76 	b.w	80072be <__ieee754_pow+0xc6>
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	f7ff bb60 	b.w	8007298 <__ieee754_pow+0xa0>
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	3fe62e43 	.word	0x3fe62e43
 8007be0:	fefa39ef 	.word	0xfefa39ef
 8007be4:	3fe62e42 	.word	0x3fe62e42
 8007be8:	0ca86c39 	.word	0x0ca86c39
 8007bec:	be205c61 	.word	0xbe205c61
 8007bf0:	72bea4d0 	.word	0x72bea4d0
 8007bf4:	3e663769 	.word	0x3e663769
 8007bf8:	c5d26bf1 	.word	0xc5d26bf1
 8007bfc:	3ebbbd41 	.word	0x3ebbbd41
 8007c00:	af25de2c 	.word	0xaf25de2c
 8007c04:	3f11566a 	.word	0x3f11566a
 8007c08:	16bebd93 	.word	0x16bebd93
 8007c0c:	3f66c16c 	.word	0x3f66c16c
 8007c10:	5555553e 	.word	0x5555553e
 8007c14:	3fc55555 	.word	0x3fc55555
 8007c18:	c2f8f359 	.word	0xc2f8f359
 8007c1c:	01a56e1f 	.word	0x01a56e1f
 8007c20:	3fe00000 	.word	0x3fe00000
 8007c24:	000fffff 	.word	0x000fffff
 8007c28:	3ff00000 	.word	0x3ff00000
 8007c2c:	4090cbff 	.word	0x4090cbff
 8007c30:	3f6f3400 	.word	0x3f6f3400
 8007c34:	652b82fe 	.word	0x652b82fe
 8007c38:	3c971547 	.word	0x3c971547

08007c3c <__ieee754_sqrt>:
 8007c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c40:	ec55 4b10 	vmov	r4, r5, d0
 8007c44:	4e56      	ldr	r6, [pc, #344]	; (8007da0 <__ieee754_sqrt+0x164>)
 8007c46:	43ae      	bics	r6, r5
 8007c48:	ee10 0a10 	vmov	r0, s0
 8007c4c:	ee10 3a10 	vmov	r3, s0
 8007c50:	4629      	mov	r1, r5
 8007c52:	462a      	mov	r2, r5
 8007c54:	d110      	bne.n	8007c78 <__ieee754_sqrt+0x3c>
 8007c56:	ee10 2a10 	vmov	r2, s0
 8007c5a:	462b      	mov	r3, r5
 8007c5c:	f7f8 fccc 	bl	80005f8 <__aeabi_dmul>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4620      	mov	r0, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f7f8 fb10 	bl	800028c <__adddf3>
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	ec45 4b10 	vmov	d0, r4, r5
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	dc10      	bgt.n	8007c9e <__ieee754_sqrt+0x62>
 8007c7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007c80:	4330      	orrs	r0, r6
 8007c82:	d0f5      	beq.n	8007c70 <__ieee754_sqrt+0x34>
 8007c84:	b15d      	cbz	r5, 8007c9e <__ieee754_sqrt+0x62>
 8007c86:	ee10 2a10 	vmov	r2, s0
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	ee10 0a10 	vmov	r0, s0
 8007c90:	f7f8 fafa 	bl	8000288 <__aeabi_dsub>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	f7f8 fdd8 	bl	800084c <__aeabi_ddiv>
 8007c9c:	e7e6      	b.n	8007c6c <__ieee754_sqrt+0x30>
 8007c9e:	1509      	asrs	r1, r1, #20
 8007ca0:	d076      	beq.n	8007d90 <__ieee754_sqrt+0x154>
 8007ca2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007ca6:	07ce      	lsls	r6, r1, #31
 8007ca8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007cac:	bf5e      	ittt	pl
 8007cae:	0fda      	lsrpl	r2, r3, #31
 8007cb0:	005b      	lslpl	r3, r3, #1
 8007cb2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007cb6:	0fda      	lsrs	r2, r3, #31
 8007cb8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007cbc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	106d      	asrs	r5, r5, #1
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	f04f 0e16 	mov.w	lr, #22
 8007cca:	4684      	mov	ip, r0
 8007ccc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cd0:	eb0c 0401 	add.w	r4, ip, r1
 8007cd4:	4294      	cmp	r4, r2
 8007cd6:	bfde      	ittt	le
 8007cd8:	1b12      	suble	r2, r2, r4
 8007cda:	eb04 0c01 	addle.w	ip, r4, r1
 8007cde:	1840      	addle	r0, r0, r1
 8007ce0:	0052      	lsls	r2, r2, #1
 8007ce2:	f1be 0e01 	subs.w	lr, lr, #1
 8007ce6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007cea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007cee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cf2:	d1ed      	bne.n	8007cd0 <__ieee754_sqrt+0x94>
 8007cf4:	4671      	mov	r1, lr
 8007cf6:	2720      	movs	r7, #32
 8007cf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007cfc:	4562      	cmp	r2, ip
 8007cfe:	eb04 060e 	add.w	r6, r4, lr
 8007d02:	dc02      	bgt.n	8007d0a <__ieee754_sqrt+0xce>
 8007d04:	d113      	bne.n	8007d2e <__ieee754_sqrt+0xf2>
 8007d06:	429e      	cmp	r6, r3
 8007d08:	d811      	bhi.n	8007d2e <__ieee754_sqrt+0xf2>
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	eb06 0e04 	add.w	lr, r6, r4
 8007d10:	da43      	bge.n	8007d9a <__ieee754_sqrt+0x15e>
 8007d12:	f1be 0f00 	cmp.w	lr, #0
 8007d16:	db40      	blt.n	8007d9a <__ieee754_sqrt+0x15e>
 8007d18:	f10c 0801 	add.w	r8, ip, #1
 8007d1c:	eba2 020c 	sub.w	r2, r2, ip
 8007d20:	429e      	cmp	r6, r3
 8007d22:	bf88      	it	hi
 8007d24:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007d28:	1b9b      	subs	r3, r3, r6
 8007d2a:	4421      	add	r1, r4
 8007d2c:	46c4      	mov	ip, r8
 8007d2e:	0052      	lsls	r2, r2, #1
 8007d30:	3f01      	subs	r7, #1
 8007d32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007d36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007d3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d3e:	d1dd      	bne.n	8007cfc <__ieee754_sqrt+0xc0>
 8007d40:	4313      	orrs	r3, r2
 8007d42:	d006      	beq.n	8007d52 <__ieee754_sqrt+0x116>
 8007d44:	1c4c      	adds	r4, r1, #1
 8007d46:	bf13      	iteet	ne
 8007d48:	3101      	addne	r1, #1
 8007d4a:	3001      	addeq	r0, #1
 8007d4c:	4639      	moveq	r1, r7
 8007d4e:	f021 0101 	bicne.w	r1, r1, #1
 8007d52:	1043      	asrs	r3, r0, #1
 8007d54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007d58:	0849      	lsrs	r1, r1, #1
 8007d5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007d5e:	07c2      	lsls	r2, r0, #31
 8007d60:	bf48      	it	mi
 8007d62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007d66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	463d      	mov	r5, r7
 8007d6e:	e77f      	b.n	8007c70 <__ieee754_sqrt+0x34>
 8007d70:	0ada      	lsrs	r2, r3, #11
 8007d72:	3815      	subs	r0, #21
 8007d74:	055b      	lsls	r3, r3, #21
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	d0fa      	beq.n	8007d70 <__ieee754_sqrt+0x134>
 8007d7a:	02d7      	lsls	r7, r2, #11
 8007d7c:	d50a      	bpl.n	8007d94 <__ieee754_sqrt+0x158>
 8007d7e:	f1c1 0420 	rsb	r4, r1, #32
 8007d82:	fa23 f404 	lsr.w	r4, r3, r4
 8007d86:	1e4d      	subs	r5, r1, #1
 8007d88:	408b      	lsls	r3, r1
 8007d8a:	4322      	orrs	r2, r4
 8007d8c:	1b41      	subs	r1, r0, r5
 8007d8e:	e788      	b.n	8007ca2 <__ieee754_sqrt+0x66>
 8007d90:	4608      	mov	r0, r1
 8007d92:	e7f0      	b.n	8007d76 <__ieee754_sqrt+0x13a>
 8007d94:	0052      	lsls	r2, r2, #1
 8007d96:	3101      	adds	r1, #1
 8007d98:	e7ef      	b.n	8007d7a <__ieee754_sqrt+0x13e>
 8007d9a:	46e0      	mov	r8, ip
 8007d9c:	e7be      	b.n	8007d1c <__ieee754_sqrt+0xe0>
 8007d9e:	bf00      	nop
 8007da0:	7ff00000 	.word	0x7ff00000

08007da4 <fabs>:
 8007da4:	ec51 0b10 	vmov	r0, r1, d0
 8007da8:	ee10 2a10 	vmov	r2, s0
 8007dac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007db0:	ec43 2b10 	vmov	d0, r2, r3
 8007db4:	4770      	bx	lr

08007db6 <finite>:
 8007db6:	b082      	sub	sp, #8
 8007db8:	ed8d 0b00 	vstr	d0, [sp]
 8007dbc:	9801      	ldr	r0, [sp, #4]
 8007dbe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007dc2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007dc6:	0fc0      	lsrs	r0, r0, #31
 8007dc8:	b002      	add	sp, #8
 8007dca:	4770      	bx	lr
 8007dcc:	0000      	movs	r0, r0
	...

08007dd0 <nan>:
 8007dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007dd8 <nan+0x8>
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	7ff80000 	.word	0x7ff80000

08007de0 <rint>:
 8007de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007de2:	ec51 0b10 	vmov	r0, r1, d0
 8007de6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007dea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007dee:	2e13      	cmp	r6, #19
 8007df0:	ee10 4a10 	vmov	r4, s0
 8007df4:	460b      	mov	r3, r1
 8007df6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007dfa:	dc58      	bgt.n	8007eae <rint+0xce>
 8007dfc:	2e00      	cmp	r6, #0
 8007dfe:	da2b      	bge.n	8007e58 <rint+0x78>
 8007e00:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007e04:	4302      	orrs	r2, r0
 8007e06:	d023      	beq.n	8007e50 <rint+0x70>
 8007e08:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007e0c:	4302      	orrs	r2, r0
 8007e0e:	4254      	negs	r4, r2
 8007e10:	4314      	orrs	r4, r2
 8007e12:	0c4b      	lsrs	r3, r1, #17
 8007e14:	0b24      	lsrs	r4, r4, #12
 8007e16:	045b      	lsls	r3, r3, #17
 8007e18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007e1c:	ea44 0103 	orr.w	r1, r4, r3
 8007e20:	4b32      	ldr	r3, [pc, #200]	; (8007eec <rint+0x10c>)
 8007e22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e26:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4630      	mov	r0, r6
 8007e30:	4639      	mov	r1, r7
 8007e32:	f7f8 fa2b 	bl	800028c <__adddf3>
 8007e36:	e9cd 0100 	strd	r0, r1, [sp]
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e40:	4632      	mov	r2, r6
 8007e42:	f7f8 fa21 	bl	8000288 <__aeabi_dsub>
 8007e46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e4a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007e4e:	4639      	mov	r1, r7
 8007e50:	ec41 0b10 	vmov	d0, r0, r1
 8007e54:	b003      	add	sp, #12
 8007e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e58:	4a25      	ldr	r2, [pc, #148]	; (8007ef0 <rint+0x110>)
 8007e5a:	4132      	asrs	r2, r6
 8007e5c:	ea01 0702 	and.w	r7, r1, r2
 8007e60:	4307      	orrs	r7, r0
 8007e62:	d0f5      	beq.n	8007e50 <rint+0x70>
 8007e64:	0851      	lsrs	r1, r2, #1
 8007e66:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007e6a:	4314      	orrs	r4, r2
 8007e6c:	d00c      	beq.n	8007e88 <rint+0xa8>
 8007e6e:	ea23 0201 	bic.w	r2, r3, r1
 8007e72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e76:	2e13      	cmp	r6, #19
 8007e78:	fa43 f606 	asr.w	r6, r3, r6
 8007e7c:	bf0c      	ite	eq
 8007e7e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007e82:	2400      	movne	r4, #0
 8007e84:	ea42 0306 	orr.w	r3, r2, r6
 8007e88:	4918      	ldr	r1, [pc, #96]	; (8007eec <rint+0x10c>)
 8007e8a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007e8e:	4622      	mov	r2, r4
 8007e90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 f9f8 	bl	800028c <__adddf3>
 8007e9c:	e9cd 0100 	strd	r0, r1, [sp]
 8007ea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	f7f8 f9ee 	bl	8000288 <__aeabi_dsub>
 8007eac:	e7d0      	b.n	8007e50 <rint+0x70>
 8007eae:	2e33      	cmp	r6, #51	; 0x33
 8007eb0:	dd07      	ble.n	8007ec2 <rint+0xe2>
 8007eb2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007eb6:	d1cb      	bne.n	8007e50 <rint+0x70>
 8007eb8:	ee10 2a10 	vmov	r2, s0
 8007ebc:	f7f8 f9e6 	bl	800028c <__adddf3>
 8007ec0:	e7c6      	b.n	8007e50 <rint+0x70>
 8007ec2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007ec6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007eca:	40d6      	lsrs	r6, r2
 8007ecc:	4230      	tst	r0, r6
 8007ece:	d0bf      	beq.n	8007e50 <rint+0x70>
 8007ed0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007ed4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007ed8:	bf1f      	itttt	ne
 8007eda:	ea24 0101 	bicne.w	r1, r4, r1
 8007ede:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007ee2:	fa44 f202 	asrne.w	r2, r4, r2
 8007ee6:	ea41 0402 	orrne.w	r4, r1, r2
 8007eea:	e7cd      	b.n	8007e88 <rint+0xa8>
 8007eec:	080080f0 	.word	0x080080f0
 8007ef0:	000fffff 	.word	0x000fffff
 8007ef4:	00000000 	.word	0x00000000

08007ef8 <scalbn>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	ec55 4b10 	vmov	r4, r5, d0
 8007efe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007f02:	4606      	mov	r6, r0
 8007f04:	462b      	mov	r3, r5
 8007f06:	b99a      	cbnz	r2, 8007f30 <scalbn+0x38>
 8007f08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f0c:	4323      	orrs	r3, r4
 8007f0e:	d036      	beq.n	8007f7e <scalbn+0x86>
 8007f10:	4b39      	ldr	r3, [pc, #228]	; (8007ff8 <scalbn+0x100>)
 8007f12:	4629      	mov	r1, r5
 8007f14:	ee10 0a10 	vmov	r0, s0
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f7f8 fb6d 	bl	80005f8 <__aeabi_dmul>
 8007f1e:	4b37      	ldr	r3, [pc, #220]	; (8007ffc <scalbn+0x104>)
 8007f20:	429e      	cmp	r6, r3
 8007f22:	4604      	mov	r4, r0
 8007f24:	460d      	mov	r5, r1
 8007f26:	da10      	bge.n	8007f4a <scalbn+0x52>
 8007f28:	a32b      	add	r3, pc, #172	; (adr r3, 8007fd8 <scalbn+0xe0>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	e03a      	b.n	8007fa6 <scalbn+0xae>
 8007f30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007f34:	428a      	cmp	r2, r1
 8007f36:	d10c      	bne.n	8007f52 <scalbn+0x5a>
 8007f38:	ee10 2a10 	vmov	r2, s0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 f9a4 	bl	800028c <__adddf3>
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	e019      	b.n	8007f7e <scalbn+0x86>
 8007f4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f4e:	460b      	mov	r3, r1
 8007f50:	3a36      	subs	r2, #54	; 0x36
 8007f52:	4432      	add	r2, r6
 8007f54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007f58:	428a      	cmp	r2, r1
 8007f5a:	dd08      	ble.n	8007f6e <scalbn+0x76>
 8007f5c:	2d00      	cmp	r5, #0
 8007f5e:	a120      	add	r1, pc, #128	; (adr r1, 8007fe0 <scalbn+0xe8>)
 8007f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f64:	da1c      	bge.n	8007fa0 <scalbn+0xa8>
 8007f66:	a120      	add	r1, pc, #128	; (adr r1, 8007fe8 <scalbn+0xf0>)
 8007f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f6c:	e018      	b.n	8007fa0 <scalbn+0xa8>
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	dd08      	ble.n	8007f84 <scalbn+0x8c>
 8007f72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f7e:	ec45 4b10 	vmov	d0, r4, r5
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007f88:	da19      	bge.n	8007fbe <scalbn+0xc6>
 8007f8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f8e:	429e      	cmp	r6, r3
 8007f90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007f94:	dd0a      	ble.n	8007fac <scalbn+0xb4>
 8007f96:	a112      	add	r1, pc, #72	; (adr r1, 8007fe0 <scalbn+0xe8>)
 8007f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e2      	bne.n	8007f66 <scalbn+0x6e>
 8007fa0:	a30f      	add	r3, pc, #60	; (adr r3, 8007fe0 <scalbn+0xe8>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 fb27 	bl	80005f8 <__aeabi_dmul>
 8007faa:	e7cb      	b.n	8007f44 <scalbn+0x4c>
 8007fac:	a10a      	add	r1, pc, #40	; (adr r1, 8007fd8 <scalbn+0xe0>)
 8007fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0b8      	beq.n	8007f28 <scalbn+0x30>
 8007fb6:	a10e      	add	r1, pc, #56	; (adr r1, 8007ff0 <scalbn+0xf8>)
 8007fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fbc:	e7b4      	b.n	8007f28 <scalbn+0x30>
 8007fbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007fc2:	3236      	adds	r2, #54	; 0x36
 8007fc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <scalbn+0x108>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	e7e8      	b.n	8007fa6 <scalbn+0xae>
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	c2f8f359 	.word	0xc2f8f359
 8007fdc:	01a56e1f 	.word	0x01a56e1f
 8007fe0:	8800759c 	.word	0x8800759c
 8007fe4:	7e37e43c 	.word	0x7e37e43c
 8007fe8:	8800759c 	.word	0x8800759c
 8007fec:	fe37e43c 	.word	0xfe37e43c
 8007ff0:	c2f8f359 	.word	0xc2f8f359
 8007ff4:	81a56e1f 	.word	0x81a56e1f
 8007ff8:	43500000 	.word	0x43500000
 8007ffc:	ffff3cb0 	.word	0xffff3cb0
 8008000:	3c900000 	.word	0x3c900000

08008004 <_init>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr

08008010 <_fini>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr
