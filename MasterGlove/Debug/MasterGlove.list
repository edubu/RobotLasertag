
MasterGlove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e44  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007fe0  08007fe0  00017fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008088  08008088  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008090  08008090  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200000a0  08008138  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08008138  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aaf  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0a  00000000  00000000  00035b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00038790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00039928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d9  00000000  00000000  0003a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160c9  00000000  00000000  000530c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b68f  00000000  00000000  0006918a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104819  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  0010486c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007fc4 	.word	0x08007fc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	08007fc4 	.word	0x08007fc4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468c      	mov	ip, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8083 	bne.w	8000ce6 <__udivmoddi4+0x116>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d947      	bls.n	8000c76 <__udivmoddi4+0xa6>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b142      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	f1c2 0020 	rsb	r0, r2, #32
 8000bf0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4097      	lsls	r7, r2
 8000bf8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbbc f6f8 	udiv	r6, ip, r8
 8000c08:	fa1f fe87 	uxth.w	lr, r7
 8000c0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb06 f10e 	mul.w	r1, r6, lr
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c22:	f080 8119 	bcs.w	8000e58 <__udivmoddi4+0x288>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8116 	bls.w	8000e58 <__udivmoddi4+0x288>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8105 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8102 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c60:	eba4 040e 	sub.w	r4, r4, lr
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xaa>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d150      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c82:	1bcb      	subs	r3, r1, r7
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	2601      	movs	r6, #1
 8000c8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0xe2>
 8000cac:	428b      	cmp	r3, r1
 8000cae:	f200 80e9 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc4:	fb08 f800 	mul.w	r8, r8, r0
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x10c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x10a>
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	f200 80d9 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eba4 0408 	sub.w	r4, r4, r8
 8000ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce4:	e7bf      	b.n	8000c66 <__udivmoddi4+0x96>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <__udivmoddi4+0x282>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x1cc>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b8 	bhi.w	8000e80 <__udivmoddi4+0x2b0>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0103 	sbc.w	r1, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	468c      	mov	ip, r1
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0a8      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000d1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f603 	lsr.w	r6, r0, r3
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d36:	40d9      	lsrs	r1, r3
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f108 	mul.w	r1, r6, r8
 8000d50:	4299      	cmp	r1, r3
 8000d52:	fa04 f402 	lsl.w	r4, r4, r2
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x19c>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d5e:	f080 808d 	bcs.w	8000e7c <__udivmoddi4+0x2ac>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 808a 	bls.w	8000e7c <__udivmoddi4+0x2ac>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b281      	uxth	r1, r0
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb00 f308 	mul.w	r3, r0, r8
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d8a:	d273      	bcs.n	8000e74 <__udivmoddi4+0x2a4>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d971      	bls.n	8000e74 <__udivmoddi4+0x2a4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4439      	add	r1, r7
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9a:	e778      	b.n	8000c8e <__udivmoddi4+0xbe>
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa03 f406 	lsl.w	r4, r3, r6
 8000da4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da8:	431c      	orrs	r4, r3
 8000daa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dba:	431f      	orrs	r7, r3
 8000dbc:	0c3b      	lsrs	r3, r7, #16
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fa1f f884 	uxth.w	r8, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dce:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x220>
 8000dde:	1861      	adds	r1, r4, r1
 8000de0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000de4:	d248      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000de6:	458a      	cmp	sl, r1
 8000de8:	d946      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000dea:	f1a9 0902 	sub.w	r9, r9, #2
 8000dee:	4421      	add	r1, r4
 8000df0:	eba1 010a 	sub.w	r1, r1, sl
 8000df4:	b2bf      	uxth	r7, r7
 8000df6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e02:	fb00 f808 	mul.w	r8, r0, r8
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x24a>
 8000e0a:	19e7      	adds	r7, r4, r7
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e10:	d22e      	bcs.n	8000e70 <__udivmoddi4+0x2a0>
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d92c      	bls.n	8000e70 <__udivmoddi4+0x2a0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4427      	add	r7, r4
 8000e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1e:	eba7 0708 	sub.w	r7, r7, r8
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	454f      	cmp	r7, r9
 8000e28:	46c6      	mov	lr, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	d31a      	bcc.n	8000e64 <__udivmoddi4+0x294>
 8000e2e:	d017      	beq.n	8000e60 <__udivmoddi4+0x290>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x27a>
 8000e32:	ebb3 020e 	subs.w	r2, r3, lr
 8000e36:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	ea4c 0202 	orr.w	r2, ip, r2
 8000e44:	40f7      	lsrs	r7, r6
 8000e46:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e70b      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6fd      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e60:	4543      	cmp	r3, r8
 8000e62:	d2e5      	bcs.n	8000e30 <__udivmoddi4+0x260>
 8000e64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e68:	eb69 0104 	sbc.w	r1, r9, r4
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7df      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e7d2      	b.n	8000e1a <__udivmoddi4+0x24a>
 8000e74:	4660      	mov	r0, ip
 8000e76:	e78d      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	e7b9      	b.n	8000df0 <__udivmoddi4+0x220>
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	e775      	b.n	8000d6c <__udivmoddi4+0x19c>
 8000e80:	4630      	mov	r0, r6
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	4439      	add	r1, r7
 8000e8a:	e713      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	e724      	b.n	8000cdc <__udivmoddi4+0x10c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <getMagnitude>:
 */

#include "hand_control.h"
#include "math.h"

uint8_t getMagnitude(int16_t x, int16_t y, int16_t z){
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	807b      	strh	r3, [r7, #2]
	// g_vals come in x, y, z
	uint16_t half_mag = 16384/2;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eae:	81bb      	strh	r3, [r7, #12]

	uint16_t z_offset = 16384 - z;
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8000eb6:	81fb      	strh	r3, [r7, #14]

	if(z_offset > half_mag){
 8000eb8:	89fa      	ldrh	r2, [r7, #14]
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d901      	bls.n	8000ec4 <getMagnitude+0x2c>
		z_offset = half_mag;
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	81fb      	strh	r3, [r7, #14]
	}

	//convert to range between 0 to 10
	uint8_t newValue = ((z_offset * 10)/half_mag);
 8000ec4:	89fa      	ldrh	r2, [r7, #14]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	461a      	mov	r2, r3
 8000ed0:	89bb      	ldrh	r3, [r7, #12]
 8000ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed6:	72fb      	strb	r3, [r7, #11]

	return newValue;
 8000ed8:	7afb      	ldrb	r3, [r7, #11]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <getDirection>:

float * getDirection(int16_t x, int16_t y){
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	80bb      	strh	r3, [r7, #4]
	static float direction[2];
	float magnitude = sqrt(pow(x, 2) + pow(y, 2));
 8000ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fabd 	bl	800047c <__aeabi_i2d>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8000fa8 <getDirection+0xc0>
 8000f0a:	ec43 2b10 	vmov	d0, r2, r3
 8000f0e:	f006 f86f 	bl	8006ff0 <pow>
 8000f12:	ec55 4b10 	vmov	r4, r5, d0
 8000f16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff faae 	bl	800047c <__aeabi_i2d>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8000fa8 <getDirection+0xc0>
 8000f28:	ec43 2b10 	vmov	d0, r2, r3
 8000f2c:	f006 f860 	bl	8006ff0 <pow>
 8000f30:	ec53 2b10 	vmov	r2, r3, d0
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	f7ff f954 	bl	80001e4 <__adddf3>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	ec43 2b17 	vmov	d7, r2, r3
 8000f44:	eeb0 0a47 	vmov.f32	s0, s14
 8000f48:	eef0 0a67 	vmov.f32	s1, s15
 8000f4c:	f006 f8fe 	bl	800714c <sqrt>
 8000f50:	ec53 2b10 	vmov	r2, r3, d0
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fdd2 	bl	8000b00 <__aeabi_d2f>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60fb      	str	r3, [r7, #12]

	direction[0] = -x/magnitude;
 8000f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f64:	425b      	negs	r3, r3
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <getDirection+0xc8>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
	direction[1] = -y/magnitude;
 8000f7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f80:	425b      	negs	r3, r3
 8000f82:	ee07 3a90 	vmov	s15, r3
 8000f86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <getDirection+0xc8>)
 8000f94:	edc3 7a01 	vstr	s15, [r3, #4]
//
//	if(abs(direction[1]) <= 0.1){
//		direction[1] = 0;
//	}

	return direction;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <getDirection+0xc8>)
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	40000000 	.word	0x40000000
 8000fb0:	200000bc 	.word	0x200000bc

08000fb4 <I2C_ClearBusyFlagErratum>:

static I2C_HandleTypeDef* hi2c;
static float G = 9.81;
static uint32_t timeout = 100;

void I2C_ClearBusyFlagErratum(I2C_Module* i2c) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  // 1. Clear PE bit.
  i2c->instance.Instance->CR1 &= ~(0x0001);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

  //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
  GPIO_InitStructure.Mode         = GPIO_MODE_OUTPUT_OD;
 8000fcc:	2311      	movs	r3, #17
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate    = GPIO_AF4_I2C1;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Pull         = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed        = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]

  GPIO_InitStructure.Pin          = i2c->sclPin;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000fe2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe8:	f107 020c 	add.w	r2, r7, #12
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fa9c 	bl	800352c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	f002 fc2f 	bl	8003864 <HAL_GPIO_WritePin>

  GPIO_InitStructure.Pin          = i2c->sdaPin;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800100c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f107 020c 	add.w	r2, r7, #12
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fa87 	bl	800352c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	f002 fc1a 	bl	8003864 <HAL_GPIO_WritePin>

  // 3. Check SCL and SDA High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 8001030:	e000      	b.n	8001034 <I2C_ClearBusyFlagErratum+0x80>
  {
    asm("nop");
 8001032:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f002 fbf7 	bl	8003834 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d1f2      	bne.n	8001032 <I2C_ClearBusyFlagErratum+0x7e>
  }

  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 800104c:	e000      	b.n	8001050 <I2C_ClearBusyFlagErratum+0x9c>
  {
    asm("nop");
 800104e:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f002 fbe9 	bl	8003834 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d1f2      	bne.n	800104e <I2C_ClearBusyFlagErratum+0x9a>
  }

  // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_RESET);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f002 fbf5 	bl	8003864 <HAL_GPIO_WritePin>

  //  5. Check SDA Low level in GPIOx_IDR.
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 800107a:	e000      	b.n	800107e <I2C_ClearBusyFlagErratum+0xca>
  {
    asm("nop");
 800107c:	bf00      	nop
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f002 fbd2 	bl	8003834 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f2      	bne.n	800107c <I2C_ClearBusyFlagErratum+0xc8>
  }

  // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_RESET);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	f002 fbde 	bl	8003864 <HAL_GPIO_WritePin>

  //  7. Check SCL Low level in GPIOx_IDR.
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010a8:	e000      	b.n	80010ac <I2C_ClearBusyFlagErratum+0xf8>
  {
    asm("nop");
 80010aa:	bf00      	nop
  while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f002 fbbb 	bl	8003834 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f2      	bne.n	80010aa <I2C_ClearBusyFlagErratum+0xf6>
  }

  // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	f002 fbc7 	bl	8003864 <HAL_GPIO_WritePin>

  // 9. Check SCL High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010d6:	e000      	b.n	80010da <I2C_ClearBusyFlagErratum+0x126>
  {
    asm("nop");
 80010d8:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sclPort, i2c->sclPin))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f002 fba4 	bl	8003834 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d1f2      	bne.n	80010d8 <I2C_ClearBusyFlagErratum+0x124>
  }

  // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
  HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f002 fbb0 	bl	8003864 <HAL_GPIO_WritePin>

  // 11. Check SDA High level in GPIOx_IDR.
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001104:	e000      	b.n	8001108 <I2C_ClearBusyFlagErratum+0x154>
  {
    asm("nop");
 8001106:	bf00      	nop
  while (GPIO_PIN_SET != HAL_GPIO_ReadPin(i2c->sdaPort, i2c->sdaPin))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f002 fb8d 	bl	8003834 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d1f2      	bne.n	8001106 <I2C_ClearBusyFlagErratum+0x152>
  }

  // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
  GPIO_InitStructure.Mode         = GPIO_MODE_AF_OD;
 8001120:	2312      	movs	r3, #18
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate    = GPIO_AF4_I2C1;
 8001124:	2304      	movs	r3, #4
 8001126:	61fb      	str	r3, [r7, #28]

  GPIO_InitStructure.Pin          = i2c->sclPin;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800112e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001134:	f107 020c 	add.w	r2, r7, #12
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f002 f9f6 	bl	800352c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin          = i2c->sdaPin;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001146:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f107 020c 	add.w	r2, r7, #12
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f002 f9ea 	bl	800352c <HAL_GPIO_Init>

  // 13. Set SWRST bit in I2Cx_CR1 register.
  i2c->instance.Instance->CR1 |= 0x8000;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001166:	601a      	str	r2, [r3, #0]

  asm("nop");
 8001168:	bf00      	nop

  // 14. Clear SWRST bit in I2Cx_CR1 register.
  i2c->instance.Instance->CR1 &= ~0x8000;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001178:	601a      	str	r2, [r3, #0]

  asm("nop");
 800117a:	bf00      	nop

  // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
  i2c->instance.Instance->CR1 |= 0x0001;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

  // Call initialization function.
  HAL_I2C_Init(&(i2c->instance));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fb9a 	bl	80038c8 <HAL_I2C_Init>
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <imu_init>:

uint8_t imu_init(I2C_HandleTypeDef* i2c_handle) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handle;
 80011a4:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <imu_init+0xf4>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]

	uint8_t buf[6];
	HAL_StatusTypeDef ret;

	buf[0] = WHO_AM_I;
 80011aa:	2375      	movs	r3, #117	; 0x75
 80011ac:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <imu_init+0xf4>)
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <imu_init+0xf8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f107 0208 	add.w	r2, r7, #8
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	21d0      	movs	r1, #208	; 0xd0
 80011c0:	f002 fcc6 	bl	8003b50 <HAL_I2C_Master_Transmit>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) { return 1; }
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <imu_init+0x36>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e059      	b.n	8001286 <imu_init+0xea>
	ret = HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <imu_init+0xf4>)
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <imu_init+0xf8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f107 0208 	add.w	r2, r7, #8
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	21d0      	movs	r1, #208	; 0xd0
 80011e4:	f002 fdb2 	bl	8003d4c <HAL_I2C_Master_Receive>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) { return 1; }
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <imu_init+0x5a>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e047      	b.n	8001286 <imu_init+0xea>

	if (buf[0] == 0x68) {
 80011f6:	7a3b      	ldrb	r3, [r7, #8]
 80011f8:	2b68      	cmp	r3, #104	; 0x68
 80011fa:	d141      	bne.n	8001280 <imu_init+0xe4>

		//wake device by writing 0 to PWR_MGMT_1
		buf[0] = PWR_MGMT_1;
 80011fc:	236b      	movs	r3, #107	; 0x6b
 80011fe:	723b      	strb	r3, [r7, #8]
		buf[1] = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <imu_init+0xf4>)
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <imu_init+0xf8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f107 0208 	add.w	r2, r7, #8
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2302      	movs	r3, #2
 8001214:	21d0      	movs	r1, #208	; 0xd0
 8001216:	f002 fc9b 	bl	8003b50 <HAL_I2C_Master_Transmit>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <imu_init+0x8c>
 8001224:	2301      	movs	r3, #1
 8001226:	e02e      	b.n	8001286 <imu_init+0xea>

		//divide sample rate by 8 to achieve 1khz data rate
		buf[0] = SMPRT_DIV;
 8001228:	2319      	movs	r3, #25
 800122a:	723b      	strb	r3, [r7, #8]
		buf[1] = 7;
 800122c:	2307      	movs	r3, #7
 800122e:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <imu_init+0xf4>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <imu_init+0xf8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	21d0      	movs	r1, #208	; 0xd0
 8001242:	f002 fc85 	bl	8003b50 <HAL_I2C_Master_Transmit>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <imu_init+0xb8>
 8001250:	2301      	movs	r3, #1
 8001252:	e018      	b.n	8001286 <imu_init+0xea>

		//config accelerometer
		buf[0] = ACCEL_CONFIG;
 8001254:	231c      	movs	r3, #28
 8001256:	723b      	strb	r3, [r7, #8]
		buf[1] = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	727b      	strb	r3, [r7, #9]
		ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 2, timeout);
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <imu_init+0xf4>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <imu_init+0xf8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2302      	movs	r3, #2
 800126c:	21d0      	movs	r1, #208	; 0xd0
 800126e:	f002 fc6f 	bl	8003b50 <HAL_I2C_Master_Transmit>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
		if (ret != HAL_OK) { return 1; }
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <imu_init+0xe8>
 800127c:	2301      	movs	r3, #1
 800127e:	e002      	b.n	8001286 <imu_init+0xea>
	} else {
		return 1;
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <imu_init+0xea>
	}

	return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000c4 	.word	0x200000c4
 8001294:	20000004 	.word	0x20000004

08001298 <imu_calibrate>:


void imu_calibrate(int16_t x_offset, int16_t y_offset, int16_t z_offset) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	460b      	mov	r3, r1
 80012a4:	80bb      	strh	r3, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	807b      	strh	r3, [r7, #2]
	uint8_t buf[7];
	buf[0] = ACCEL_XG_OFFS_USRH;
 80012aa:	2306      	movs	r3, #6
 80012ac:	723b      	strb	r3, [r7, #8]
	buf[1] = (x_offset >> 8) & 0xFF;
 80012ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b2:	121b      	asrs	r3, r3, #8
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	727b      	strb	r3, [r7, #9]
	buf[2] = x_offset & 0xFF;
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	72bb      	strb	r3, [r7, #10]
	buf[3] = (y_offset >> 8) & 0xFF;
 80012c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012c4:	121b      	asrs	r3, r3, #8
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	72fb      	strb	r3, [r7, #11]
	buf[4] = y_offset & 0xFF;
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	733b      	strb	r3, [r7, #12]
	buf[5] = (z_offset >> 8) & 0xFF;
 80012d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012d6:	121b      	asrs	r3, r3, #8
 80012d8:	b21b      	sxth	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	737b      	strb	r3, [r7, #13]
	buf[6] = z_offset & 0xFF;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 7, timeout);
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <imu_calibrate+0x6c>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <imu_calibrate+0x70>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f107 0208 	add.w	r2, r7, #8
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2307      	movs	r3, #7
 80012f4:	21d0      	movs	r1, #208	; 0xd0
 80012f6:	f002 fc2b 	bl	8003b50 <HAL_I2C_Master_Transmit>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000c4 	.word	0x200000c4
 8001308:	20000004 	.word	0x20000004

0800130c <imu_read_accel>:

void imu_read_accel(IMU_DATA* imu_data) {
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	6078      	str	r0, [r7, #4]

	uint8_t buf[6];

	//write subregister
	buf[0] = ACCEL_XOUT_H;
 8001314:	233b      	movs	r3, #59	; 0x3b
 8001316:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDRESS, buf, 1, timeout);
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <imu_read_accel+0x148>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <imu_read_accel+0x14c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	21d0      	movs	r1, #208	; 0xd0
 800132a:	f002 fc11 	bl	8003b50 <HAL_I2C_Master_Transmit>

	//recieve accel data
	HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDRESS, buf, 6, timeout);
 800132e:	4b49      	ldr	r3, [pc, #292]	; (8001454 <imu_read_accel+0x148>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <imu_read_accel+0x14c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f107 0208 	add.w	r2, r7, #8
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2306      	movs	r3, #6
 800133e:	21d0      	movs	r1, #208	; 0xd0
 8001340:	f002 fd04 	bl	8003d4c <HAL_I2C_Master_Receive>

	//get raw data
	imu_data->ax_raw = (int16_t)((buf[0] << 8) | buf[1]);
 8001344:	7a3b      	ldrb	r3, [r7, #8]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	7a7b      	ldrb	r3, [r7, #9]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	801a      	strh	r2, [r3, #0]
	imu_data->ay_raw = (int16_t)((buf[2] << 8) | buf[3]);
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	805a      	strh	r2, [r3, #2]
	imu_data->az_raw = (int16_t)((buf[4] << 8) | buf[5]);
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	809a      	strh	r2, [r3, #4]

	//scale raw data
	//divide by 16384 to get in Gs
	//mult by G=9.81 to get m/s^2
	imu_data->ax = imu_data->ax_raw / 16384.0 * G;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f87b 	bl	800047c <__aeabi_i2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <imu_read_accel+0x150>)
 800138c:	f7ff fa0a 	bl	80007a4 <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4614      	mov	r4, r2
 8001396:	461d      	mov	r5, r3
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <imu_read_accel+0x154>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f87f 	bl	80004a0 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7ff f8d1 	bl	8000550 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fba3 	bl	8000b00 <__aeabi_d2f>
 80013ba:	4602      	mov	r2, r0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
	imu_data->ay = imu_data->ay_raw / 16384.0 * G;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f858 	bl	800047c <__aeabi_i2d>
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <imu_read_accel+0x150>)
 80013d2:	f7ff f9e7 	bl	80007a4 <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <imu_read_accel+0x154>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f85c 	bl	80004a0 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7ff f8ae 	bl	8000550 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb80 	bl	8000b00 <__aeabi_d2f>
 8001400:	4602      	mov	r2, r0
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60da      	str	r2, [r3, #12]
	imu_data->az = imu_data->az_raw / 16384.0 * G;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f835 	bl	800047c <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <imu_read_accel+0x150>)
 8001418:	f7ff f9c4 	bl	80007a4 <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <imu_read_accel+0x154>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f839 	bl	80004a0 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff f88b 	bl	8000550 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fb5d 	bl	8000b00 <__aeabi_d2f>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	611a      	str	r2, [r3, #16]

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bdb0      	pop	{r4, r5, r7, pc}
 8001454:	200000c4 	.word	0x200000c4
 8001458:	20000004 	.word	0x20000004
 800145c:	40d00000 	.word	0x40d00000
 8001460:	20000000 	.word	0x20000000

08001464 <joystick_init>:
 *      Author: hmflynn
 */
#include "joystick.h"

// call before calling other joystick functions
void joystick_init(ADC_HandleTypeDef* hadc_in) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <joystick_init+0x1c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200000c8 	.word	0x200000c8

08001484 <get_joystick_position>:

// determine which position joystick is in (0-left, 1-middle, 2-right)
uint8_t get_joystick_position() {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	HAL_ADC_Start(hadc);
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <get_joystick_position+0x68>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f001 fb0a 	bl	8002aa8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <get_joystick_position+0x68>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fbea 	bl	8002c76 <HAL_ADC_PollForConversion>
	uint16_t data = HAL_ADC_GetValue(hadc);
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <get_joystick_position+0x68>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fc70 	bl	8002d8c <HAL_ADC_GetValue>
 80014ac:	4603      	mov	r3, r0
 80014ae:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(hadc);
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <get_joystick_position+0x68>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fbab 	bl	8002c10 <HAL_ADC_Stop>

	// Joystick neutral position
	if (data >= 1500 && data <= 3500) {
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	f240 52db 	movw	r2, #1499	; 0x5db
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d906      	bls.n	80014d2 <get_joystick_position+0x4e>
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d801      	bhi.n	80014d2 <get_joystick_position+0x4e>
		return 1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e007      	b.n	80014e2 <get_joystick_position+0x5e>
	}
	// Joystick left position
	else if (data > 3500) {
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <get_joystick_position+0x5c>
		return 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	e000      	b.n	80014e2 <get_joystick_position+0x5e>
	}
	// Joystick right position
	else {
		return 2;
 80014e0:	2302      	movs	r3, #2
	}
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200000c8 	.word	0x200000c8

080014f0 <lcd_init>:

#define LCD_I2C_ADDRESS 0x4E

static I2C_HandleTypeDef* hi2c;

void lcd_init(I2C_HandleTypeDef* i2c_handle) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handle;
 80014f8:	4a10      	ldr	r2, [pc, #64]	; (800153c <lcd_init+0x4c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]

	//Initialize LCD with nibble method
	lcd_transmit_byte(0x02);
 80014fe:	2002      	movs	r0, #2
 8001500:	f000 f81e 	bl	8001540 <lcd_transmit_byte>
	HAL_Delay(20);
 8001504:	2014      	movs	r0, #20
 8001506:	f001 fa67 	bl	80029d8 <HAL_Delay>

	//Function set
	//DL=0, 4 bit mode
	//N=1, 2 line display
	//F=0 5x8 dots
	lcd_transmit_byte(0x28);
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f000 f818 	bl	8001540 <lcd_transmit_byte>
	HAL_Delay(5);
 8001510:	2005      	movs	r0, #5
 8001512:	f001 fa61 	bl	80029d8 <HAL_Delay>

	//clear display
	lcd_transmit_byte(0x01);
 8001516:	2001      	movs	r0, #1
 8001518:	f000 f812 	bl	8001540 <lcd_transmit_byte>
	HAL_Delay(5);
 800151c:	2005      	movs	r0, #5
 800151e:	f001 fa5b 	bl	80029d8 <HAL_Delay>

	//Entry mode set
	//I/D=1, increment cursor
	//S=0, no shifting
	lcd_transmit_byte(0x06);
 8001522:	2006      	movs	r0, #6
 8001524:	f000 f80c 	bl	8001540 <lcd_transmit_byte>
	HAL_Delay(5);
 8001528:	2005      	movs	r0, #5
 800152a:	f001 fa55 	bl	80029d8 <HAL_Delay>

	//Display control
	//D=1, display on
	//C=0, cursor off
	//B=0, cursor blink off
	lcd_transmit_byte(0x0C);
 800152e:	200c      	movs	r0, #12
 8001530:	f000 f806 	bl	8001540 <lcd_transmit_byte>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000cc 	.word	0x200000cc

08001540 <lcd_transmit_byte>:

void lcd_transmit_byte(uint8_t data) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4];
	uint8_t data_upper = data & 0xF0;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f023 030f 	bic.w	r3, r3, #15
 8001550:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lower = (data << 4) & 0xF0;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	73bb      	strb	r3, [r7, #14]

	//upper bits - EN=1, RS=0 => 0x0C
	//lower bits - EN=0, RS=0 => 0x08

	buf[0] = data_upper | 0x0C;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	f043 030c 	orr.w	r3, r3, #12
 800155e:	b2db      	uxtb	r3, r3
 8001560:	723b      	strb	r3, [r7, #8]
	buf[1] = data_upper | 0x08;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	b2db      	uxtb	r3, r3
 800156a:	727b      	strb	r3, [r7, #9]
	buf[2] = data_lower | 0x0C;
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	f043 030c 	orr.w	r3, r3, #12
 8001572:	b2db      	uxtb	r3, r3
 8001574:	72bb      	strb	r3, [r7, #10]
	buf[3] = data_lower | 0x08;
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	b2db      	uxtb	r3, r3
 800157e:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, LCD_I2C_ADDRESS, (uint8_t *) buf, 4, 100);
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <lcd_transmit_byte+0x60>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f107 0208 	add.w	r2, r7, #8
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2304      	movs	r3, #4
 800158e:	214e      	movs	r1, #78	; 0x4e
 8001590:	f002 fade 	bl	8003b50 <HAL_I2C_Master_Transmit>
 8001594:	4603      	mov	r3, r0
 8001596:	737b      	strb	r3, [r7, #13]

}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000cc 	.word	0x200000cc

080015a4 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram_addr = 0x80;
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	73bb      	strb	r3, [r7, #14]

	//row 0 offset = 0
	//row 1 offset = 0x40
	uint8_t pos = col;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	73fb      	strb	r3, [r7, #15]
	if (row > 0) {
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <lcd_set_cursor+0x24>
		pos += 0x40;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3340      	adds	r3, #64	; 0x40
 80015c6:	73fb      	strb	r3, [r7, #15]
	}

	lcd_transmit_byte(ddram_addr | pos);
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffb5 	bl	8001540 <lcd_transmit_byte>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <lcd_clear>:

void lcd_clear() {
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
	lcd_transmit_byte(0x01);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff ffac 	bl	8001540 <lcd_transmit_byte>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <lcd_transmit_char>:

void lcd_transmit_char(char c) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4];
	uint8_t data_upper = c & 0xF0;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f023 030f 	bic.w	r3, r3, #15
 80015fc:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lower = (c << 4) & 0xF0;
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	73bb      	strb	r3, [r7, #14]

	//upper bits - EN=1, RS=1 => 0x0D
	//lower bits - EN=0, RS=1 => 0x09

	buf[0] = data_upper | 0x0D;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	f043 030d 	orr.w	r3, r3, #13
 800160a:	b2db      	uxtb	r3, r3
 800160c:	723b      	strb	r3, [r7, #8]
	buf[1] = data_upper | 0x09;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	f043 0309 	orr.w	r3, r3, #9
 8001614:	b2db      	uxtb	r3, r3
 8001616:	727b      	strb	r3, [r7, #9]
	buf[2] = data_lower | 0x0D;
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	f043 030d 	orr.w	r3, r3, #13
 800161e:	b2db      	uxtb	r3, r3
 8001620:	72bb      	strb	r3, [r7, #10]
	buf[3] = data_lower | 0x09;
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	f043 0309 	orr.w	r3, r3, #9
 8001628:	b2db      	uxtb	r3, r3
 800162a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(hi2c, LCD_I2C_ADDRESS, (uint8_t *) buf, 4, 100);
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <lcd_transmit_char+0x5c>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	f107 0208 	add.w	r2, r7, #8
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2304      	movs	r3, #4
 800163a:	214e      	movs	r1, #78	; 0x4e
 800163c:	f002 fa88 	bl	8003b50 <HAL_I2C_Master_Transmit>
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000cc 	.word	0x200000cc

0800164c <lcd_transmit_string>:

void lcd_transmit_string(char* str) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	while (*str) {
 8001654:	e006      	b.n	8001664 <lcd_transmit_string+0x18>
		lcd_transmit_char(*str++);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ffc4 	bl	80015ec <lcd_transmit_char>
	while (*str) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f4      	bne.n	8001656 <lcd_transmit_string+0xa>
	}
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <displayLives>:

int8_t button_val = 0;
uint8_t Rx_data[4];

// Displays current lives remaining on LCD
void displayLives() {
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
	lcd_clear();
 800167e:	f7ff ffae 	bl	80015de <lcd_clear>

	char lives[] = "...Lives";
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <displayLives+0x54>)
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	ca07      	ldmia	r2, {r0, r1, r2}
 800168a:	c303      	stmia	r3!, {r0, r1}
 800168c:	701a      	strb	r2, [r3, #0]
	lcd_transmit_string(lives);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ffda 	bl	800164c <lcd_transmit_string>

	lcd_set_cursor(0, 1);
 8001698:	2101      	movs	r1, #1
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff ff82 	bl	80015a4 <lcd_set_cursor>
	char remaining[] = "Remaining: ";
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <displayLives+0x58>)
 80016a2:	463b      	mov	r3, r7
 80016a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	lcd_transmit_string(remaining);
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ffcd 	bl	800164c <lcd_transmit_string>

	lcd_set_cursor(11, 1);
 80016b2:	2101      	movs	r1, #1
 80016b4:	200b      	movs	r0, #11
 80016b6:	f7ff ff75 	bl	80015a4 <lcd_set_cursor>
	lcd_transmit_char(livesRemaining);
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <displayLives+0x5c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff94 	bl	80015ec <lcd_transmit_char>
}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	08007fe0 	.word	0x08007fe0
 80016d0:	08007fec 	.word	0x08007fec
 80016d4:	20000008 	.word	0x20000008

080016d8 <displayHit>:

// Displays "HIT" on LCD
void displayHit() {
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
	lcd_clear();
 80016de:	f7ff ff7e 	bl	80015de <lcd_clear>

	char firstLine[] = "...  You've been";
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <displayHit+0x4c>)
 80016e4:	f107 040c 	add.w	r4, r7, #12
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	7023      	strb	r3, [r4, #0]
	lcd_transmit_string(firstLine);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ffa8 	bl	800164c <lcd_transmit_string>

	lcd_set_cursor(6, 1);
 80016fc:	2101      	movs	r1, #1
 80016fe:	2006      	movs	r0, #6
 8001700:	f7ff ff50 	bl	80015a4 <lcd_set_cursor>
	char remaining[] = "hit!";
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <displayHit+0x50>)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800170c:	6018      	str	r0, [r3, #0]
 800170e:	3304      	adds	r3, #4
 8001710:	7019      	strb	r1, [r3, #0]
	lcd_transmit_string(remaining);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff99 	bl	800164c <lcd_transmit_string>
}
 800171a:	bf00      	nop
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	08007ff8 	.word	0x08007ff8
 8001728:	0800800c 	.word	0x0800800c

0800172c <displayGameOver>:

// Displays "GAME OVER" on LCD
void displayGameOver() {
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
	lcd_clear();
 8001732:	f7ff ff54 	bl	80015de <lcd_clear>

	char firstLine[] = "...      GAME";
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <displayGameOver+0x48>)
 8001738:	f107 0408 	add.w	r4, r7, #8
 800173c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173e:	c407      	stmia	r4!, {r0, r1, r2}
 8001740:	8023      	strh	r3, [r4, #0]
	lcd_transmit_string(firstLine);
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff80 	bl	800164c <lcd_transmit_string>

	lcd_set_cursor(6, 1);
 800174c:	2101      	movs	r1, #1
 800174e:	2006      	movs	r0, #6
 8001750:	f7ff ff28 	bl	80015a4 <lcd_set_cursor>
	char remaining[] = "OVER!";
 8001754:	4a08      	ldr	r2, [pc, #32]	; (8001778 <displayGameOver+0x4c>)
 8001756:	463b      	mov	r3, r7
 8001758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800175c:	6018      	str	r0, [r3, #0]
 800175e:	3304      	adds	r3, #4
 8001760:	8019      	strh	r1, [r3, #0]
	lcd_transmit_string(remaining);
 8001762:	463b      	mov	r3, r7
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff71 	bl	800164c <lcd_transmit_string>
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	08008014 	.word	0x08008014
 8001778:	08008024 	.word	0x08008024

0800177c <HAL_GPIO_EXTI_Callback>:

// Joystick Button Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_6 && !cooldown && !gameOver) {
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2b40      	cmp	r3, #64	; 0x40
 800178a:	d10c      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0x2a>
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d108      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0x2a>
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_GPIO_EXTI_Callback+0x50>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d104      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0x2a>
		button_val = 1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x54>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
		playFireSound();
 80017a2:	f000 fe09 	bl	80023b8 <playFireSound>
	}
	// Blue Button For Testing
	if (pin == GPIO_PIN_13) {
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ac:	d107      	bne.n	80017be <HAL_GPIO_EXTI_Callback+0x42>
		//playVictors();
		gameOver = 0;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_GPIO_EXTI_Callback+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
		livesRemaining = '3';
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80017b6:	2233      	movs	r2, #51	; 0x33
 80017b8:	701a      	strb	r2, [r3, #0]
		displayLives();
 80017ba:	f7ff ff5d 	bl	8001678 <displayLives>
	}
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000d0 	.word	0x200000d0
 80017cc:	200000d1 	.word	0x200000d1
 80017d0:	200000d2 	.word	0x200000d2
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	// Send to terminal for debugging
	//char buf[2];
	//HAL_UART_Transmit(&huart2, (uint8_t*)buf, sprintf(buf, "%d\r\n", Rx_data[0]), HAL_MAX_DELAY);

	// HIT ON ROBOT
	if(Rx_data[0] && !gameOver){
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_UART_RxCpltCallback+0x5c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d021      	beq.n	800182c <HAL_UART_RxCpltCallback+0x54>
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_UART_RxCpltCallback+0x60>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d11d      	bne.n	800182c <HAL_UART_RxCpltCallback+0x54>
		// What happens when robot gets hit?

		// 0) Set cooldown bit (start TIMER)
		cooldown = 1;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_UART_RxCpltCallback+0x64>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 80017f6:	4812      	ldr	r0, [pc, #72]	; (8001840 <HAL_UART_RxCpltCallback+0x68>)
 80017f8:	f003 fcc0 	bl	800517c <HAL_TIM_Base_Start_IT>

		// 1) Change LCD screen to say "HIT"
		displayHit();
 80017fc:	f7ff ff6c 	bl	80016d8 <displayHit>
		--livesRemaining;
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_UART_RxCpltCallback+0x6c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_RxCpltCallback+0x6c>)
 800180a:	701a      	strb	r2, [r3, #0]

		// 2) Play hit sound
		playHitSound();
 800180c:	f000 fdaa 	bl	8002364 <playHitSound>

		// Check to see if game over
		if (livesRemaining == '0') {
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_UART_RxCpltCallback+0x6c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b30      	cmp	r3, #48	; 0x30
 8001816:	d107      	bne.n	8001828 <HAL_UART_RxCpltCallback+0x50>
			// Death sequence
			displayGameOver();
 8001818:	f7ff ff88 	bl	800172c <displayGameOver>
			playDeathSound();
 800181c:	f000 fd72 	bl	8002304 <playDeathSound>
			gameOver = 1;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_UART_RxCpltCallback+0x60>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
		else {
			// Display lives remaining
			displayLives();
		}
	}
}
 8001826:	e001      	b.n	800182c <HAL_UART_RxCpltCallback+0x54>
			displayLives();
 8001828:	f7ff ff26 	bl	8001678 <displayLives>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200001c8 	.word	0x200001c8
 8001838:	200000d1 	.word	0x200000d1
 800183c:	200000d0 	.word	0x200000d0
 8001840:	200001cc 	.word	0x200001cc
 8001844:	20000008 	.word	0x20000008

08001848 <HAL_TIM_PeriodElapsedCallback>:

// TIM11 CALLBACK -- for sending data
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	// What to do when we want to send a message
	if(htim == &htim11){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a44      	ldr	r2, [pc, #272]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d17a      	bne.n	800194e <HAL_TIM_PeriodElapsedCallback+0x106>
		imu_read_accel(&imu);
 8001858:	4843      	ldr	r0, [pc, #268]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800185a:	f7ff fd57 	bl	800130c <imu_read_accel>

		int16_t x = imu.ax_raw;
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	84fb      	strh	r3, [r7, #38]	; 0x26
		int16_t y = imu.ay_raw;
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001866:	885b      	ldrh	r3, [r3, #2]
 8001868:	84bb      	strh	r3, [r7, #36]	; 0x24
		int16_t z = imu.az_raw;
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	847b      	strh	r3, [r7, #34]	; 0x22

		uint8_t magnitude = getMagnitude(x, y, z);
 8001870:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001874:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8001878:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb0b 	bl	8000e98 <getMagnitude>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		float *direction = getDirection(x, y);
 8001888:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800188c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fb28 	bl	8000ee8 <getDirection>
 8001898:	61f8      	str	r0, [r7, #28]

		int8_t *motor_cmds = getMotorVels(magnitude, direction);
 800189a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800189e:	69f9      	ldr	r1, [r7, #28]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fbbb 	bl	800201c <getMotorVels>
 80018a6:	4603      	mov	r3, r0
 80018a8:	61bb      	str	r3, [r7, #24]

		int8_t buf[7];

		buf[0] = button_val;
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018ac:	f993 3000 	ldrsb.w	r3, [r3]
 80018b0:	733b      	strb	r3, [r7, #12]
		buf[1] = motor_cmds[0] + 10;
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f993 3000 	ldrsb.w	r3, [r3]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	330a      	adds	r3, #10
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	737b      	strb	r3, [r7, #13]
		buf[2] = motor_cmds[1] + 10;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	3301      	adds	r3, #1
 80018c6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	330a      	adds	r3, #10
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	73bb      	strb	r3, [r7, #14]
		buf[3] = motor_cmds[2] + 10;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	3302      	adds	r3, #2
 80018d8:	f993 3000 	ldrsb.w	r3, [r3]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	330a      	adds	r3, #10
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	73fb      	strb	r3, [r7, #15]
		buf[4] = motor_cmds[3] + 10;
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	3303      	adds	r3, #3
 80018ea:	f993 3000 	ldrsb.w	r3, [r3]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	330a      	adds	r3, #10
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	743b      	strb	r3, [r7, #16]
		buf[5] = cooldown;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	747b      	strb	r3, [r7, #17]
		buf[6] = get_joystick_position();
 8001900:	f7ff fdc0 	bl	8001484 <get_joystick_position>
 8001904:	4603      	mov	r3, r0
 8001906:	b25b      	sxtb	r3, r3
 8001908:	74bb      	strb	r3, [r7, #18]

		if (gameOver) {
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <HAL_TIM_PeriodElapsedCallback+0xe6>
			buf[0] = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	733b      	strb	r3, [r7, #12]
			buf[1] = 10;
 8001916:	230a      	movs	r3, #10
 8001918:	737b      	strb	r3, [r7, #13]
			buf[2] = 10;
 800191a:	230a      	movs	r3, #10
 800191c:	73bb      	strb	r3, [r7, #14]
			buf[3] = 10;
 800191e:	230a      	movs	r3, #10
 8001920:	73fb      	strb	r3, [r7, #15]
			buf[4] = 10;
 8001922:	230a      	movs	r3, #10
 8001924:	743b      	strb	r3, [r7, #16]
			buf[5] = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	747b      	strb	r3, [r7, #17]
			buf[6] = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	74bb      	strb	r3, [r7, #18]
		}

		button_val = 0;
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
		//HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart2, (uint8_t*)buf, 6, HAL_MAX_DELAY);
		HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart1, (uint8_t *)buf, 7, HAL_MAX_DELAY);
 8001934:	f107 010c 	add.w	r1, r7, #12
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193c:	2207      	movs	r2, #7
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001940:	f004 fb7f 	bl	8006042 <HAL_UART_Transmit>
 8001944:	4603      	mov	r3, r0
 8001946:	75fb      	strb	r3, [r7, #23]
		uint8_t x2 = 10;
 8001948:	230a      	movs	r3, #10
 800194a:	75bb      	strb	r3, [r7, #22]

	}
	else if (htim == &htim5) {
		cooldown = 0;
	}
}
 800194c:	e006      	b.n	800195c <HAL_TIM_PeriodElapsedCallback+0x114>
	else if (htim == &htim5) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d102      	bne.n	800195c <HAL_TIM_PeriodElapsedCallback+0x114>
		cooldown = 0;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200002a0 	.word	0x200002a0
 8001968:	20000160 	.word	0x20000160
 800196c:	200000d2 	.word	0x200000d2
 8001970:	200000d0 	.word	0x200000d0
 8001974:	200000d1 	.word	0x200000d1
 8001978:	2000025c 	.word	0x2000025c
 800197c:	200001cc 	.word	0x200001cc

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09a      	sub	sp, #104	; 0x68
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001986:	f000 ffb5 	bl	80028f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198a:	f000 f853 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198e:	f000 fa69 	bl	8001e64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001992:	f000 f90d 	bl	8001bb0 <MX_I2C1_Init>
  MX_TIM11_Init();
 8001996:	f000 fa17 	bl	8001dc8 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 800199a:	f000 fa39 	bl	8001e10 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800199e:	f000 f963 	bl	8001c68 <MX_TIM2_Init>
  MX_I2C3_Init();
 80019a2:	f000 f933 	bl	8001c0c <MX_I2C3_Init>
  MX_TIM5_Init();
 80019a6:	f000 f9b7 	bl	8001d18 <MX_TIM5_Init>
  MX_ADC1_Init();
 80019aa:	f000 f8af 	bl	8001b0c <MX_ADC1_Init>

  // Start UART Receiving interrupt
  //HAL_UART_Receive_IT(&huart1, Rx_data, 1);

  I2C_Module i2c_mod;
  i2c_mod.instance = hi2c1;
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <main+0x9c>)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4611      	mov	r1, r2
 80019b4:	2254      	movs	r2, #84	; 0x54
 80019b6:	4618      	mov	r0, r3
 80019b8:	f005 fa7e 	bl	8006eb8 <memcpy>
  i2c_mod.sdaPin = GPIO_PIN_9;
 80019bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  i2c_mod.sdaPort = GPIOB;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <main+0xa0>)
 80019c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  i2c_mod.sclPin = GPIO_PIN_8;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  i2c_mod.sclPort = GPIOB;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <main+0xa0>)
 80019d2:	667b      	str	r3, [r7, #100]	; 0x64
  while (imu_init(&hi2c1) == 1) {
 80019d4:	e003      	b.n	80019de <main+0x5e>
    I2C_ClearBusyFlagErratum(&i2c_mod);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff faeb 	bl	8000fb4 <I2C_ClearBusyFlagErratum>
  while (imu_init(&hi2c1) == 1) {
 80019de:	480f      	ldr	r0, [pc, #60]	; (8001a1c <main+0x9c>)
 80019e0:	f7ff fbdc 	bl	800119c <imu_init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d0f5      	beq.n	80019d6 <main+0x56>
  }
  //pass pre-calculated offsets to imu

  //imu_calibrate(503, 582, 2049); // TAPE IMU OFFSETS
  imu_calibrate(182, 2834, 851); // NON-TAPE OFFSETS
 80019ea:	f240 3253 	movw	r2, #851	; 0x353
 80019ee:	f640 3112 	movw	r1, #2834	; 0xb12
 80019f2:	20b6      	movs	r0, #182	; 0xb6
 80019f4:	f7ff fc50 	bl	8001298 <imu_calibrate>

  //initialize lcd
  lcd_init(&hi2c3);
 80019f8:	480a      	ldr	r0, [pc, #40]	; (8001a24 <main+0xa4>)
 80019fa:	f7ff fd79 	bl	80014f0 <lcd_init>
  displayLives();
 80019fe:	f7ff fe3b 	bl	8001678 <displayLives>

  // initialize piezo buzzer
  piezo_init(&htim2);
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <main+0xa8>)
 8001a04:	f000 fbea 	bl	80021dc <piezo_init>

  // initialize joystick
  joystick_init(&hadc1);
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <main+0xac>)
 8001a0a:	f7ff fd2b 	bl	8001464 <joystick_init>

  // Start xbee sending timer
  HAL_TIM_Base_Start_IT(&htim11);
 8001a0e:	4808      	ldr	r0, [pc, #32]	; (8001a30 <main+0xb0>)
 8001a10:	f003 fbb4 	bl	800517c <HAL_TIM_Base_Start_IT>
  omni_init();
 8001a14:	f000 fac8 	bl	8001fa8 <omni_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <main+0x98>
 8001a1a:	bf00      	nop
 8001a1c:	20000174 	.word	0x20000174
 8001a20:	40020400 	.word	0x40020400
 8001a24:	2000010c 	.word	0x2000010c
 8001a28:	200002e8 	.word	0x200002e8
 8001a2c:	20000214 	.word	0x20000214
 8001a30:	200002a0 	.word	0x200002a0

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b094      	sub	sp, #80	; 0x50
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0320 	add.w	r3, r7, #32
 8001a3e:	2230      	movs	r2, #48	; 0x30
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f005 fa46 	bl	8006ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <SystemClock_Config+0xd0>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <SystemClock_Config+0xd0>)
 8001a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a66:	6413      	str	r3, [r2, #64]	; 0x40
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <SystemClock_Config+0xd0>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <SystemClock_Config+0xd4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a80:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <SystemClock_Config+0xd4>)
 8001a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <SystemClock_Config+0xd4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a94:	2302      	movs	r3, #2
 8001a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001aac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fe98 	bl	80047f4 <HAL_RCC_OscConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001aca:	f000 fa67 	bl	8001f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ace:	230f      	movs	r3, #15
 8001ad0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 f8fa 	bl	8004ce4 <HAL_RCC_ClockConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001af6:	f000 fa51 	bl	8001f9c <Error_Handler>
  }
}
 8001afa:	bf00      	nop
 8001afc:	3750      	adds	r7, #80	; 0x50
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000

08001b0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	463b      	mov	r3, r7
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <MX_ADC1_Init+0x9c>)
 8001b22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <MX_ADC1_Init+0xa0>)
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b6e:	f000 ff57 	bl	8002a20 <HAL_ADC_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b78:	f000 fa10 	bl	8001f9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_ADC1_Init+0x98>)
 8001b8e:	f001 f90b 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b98:	f000 fa00 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000214 	.word	0x20000214
 8001ba8:	40012000 	.word	0x40012000
 8001bac:	0f000001 	.word	0x0f000001

08001bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <MX_I2C1_Init+0x54>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bbc:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <MX_I2C1_Init+0x58>)
 8001bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bee:	f001 fe6b 	bl	80038c8 <HAL_I2C_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bf8:	f000 f9d0 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000174 	.word	0x20000174
 8001c04:	40005400 	.word	0x40005400
 8001c08:	000186a0 	.word	0x000186a0

08001c0c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <MX_I2C3_Init+0x54>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_I2C3_Init+0x58>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_I2C3_Init+0x50>)
 8001c4a:	f001 fe3d 	bl	80038c8 <HAL_I2C_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 f9a2 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000010c 	.word	0x2000010c
 8001c60:	40005c00 	.word	0x40005c00
 8001c64:	000186a0 	.word	0x000186a0

08001c68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001c8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001c94:	2253      	movs	r2, #83	; 0x53
 8001c96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001ca0:	22f9      	movs	r2, #249	; 0xf9
 8001ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb0:	4818      	ldr	r0, [pc, #96]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001cb2:	f003 fb14 	bl	80052de <HAL_TIM_PWM_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001cbc:	f000 f96e 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001cd0:	f004 f8e8 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001cda:	f000 f95f 	bl	8001f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cde:	2360      	movs	r3, #96	; 0x60
 8001ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4807      	ldr	r0, [pc, #28]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001cf6:	f003 fdb9 	bl	800586c <HAL_TIM_PWM_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d00:	f000 f94c 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <MX_TIM2_Init+0xac>)
 8001d06:	f000 fce3 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002e8 	.word	0x200002e8

08001d18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d3c:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <MX_TIM5_Init+0xa8>)
 8001d3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d42:	2253      	movs	r2, #83	; 0x53
 8001d44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999999;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <MX_TIM5_Init+0xac>)
 8001d50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001d5e:	4817      	ldr	r0, [pc, #92]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d60:	f003 fa6e 	bl	8005240 <HAL_TIM_OC_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001d6a:	f000 f917 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480f      	ldr	r0, [pc, #60]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001d7e:	f004 f891 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001d88:	f000 f908 	bl	8001f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <MX_TIM5_Init+0xa4>)
 8001da4:	f003 fd06 	bl	80057b4 <HAL_TIM_OC_ConfigChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001dae:	f000 f8f5 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001cc 	.word	0x200001cc
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	001e847f 	.word	0x001e847f

08001dc8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_TIM11_Init+0x40>)
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <MX_TIM11_Init+0x44>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <MX_TIM11_Init+0x40>)
 8001dd4:	f240 3247 	movw	r2, #839	; 0x347
 8001dd8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_TIM11_Init+0x40>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_TIM11_Init+0x40>)
 8001de2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001de6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_TIM11_Init+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_TIM11_Init+0x40>)
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_TIM11_Init+0x40>)
 8001df6:	f003 f971 	bl	80050dc <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001e00:	f000 f8cc 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200002a0 	.word	0x200002a0
 8001e0c:	40014800 	.word	0x40014800

08001e10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <MX_USART1_UART_Init+0x50>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_USART1_UART_Init+0x4c>)
 8001e48:	f004 f8ae 	bl	8005fa8 <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e52:	f000 f8a3 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000025c 	.word	0x2000025c
 8001e60:	40011000 	.word	0x40011000

08001e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a43      	ldr	r2, [pc, #268]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a35      	ldr	r2, [pc, #212]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <MX_GPIO_Init+0x12c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2120      	movs	r1, #32
 8001eee:	4829      	ldr	r0, [pc, #164]	; (8001f94 <MX_GPIO_Init+0x130>)
 8001ef0:	f001 fcb8 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001efa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4823      	ldr	r0, [pc, #140]	; (8001f98 <MX_GPIO_Init+0x134>)
 8001f0c:	f001 fb0e 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f10:	230c      	movs	r3, #12
 8001f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f20:	2307      	movs	r3, #7
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481a      	ldr	r0, [pc, #104]	; (8001f94 <MX_GPIO_Init+0x130>)
 8001f2c:	f001 fafe 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f30:	2320      	movs	r3, #32
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4813      	ldr	r0, [pc, #76]	; (8001f94 <MX_GPIO_Init+0x130>)
 8001f48:	f001 faf0 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f4c:	2340      	movs	r3, #64	; 0x40
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <MX_GPIO_Init+0x130>)
 8001f62:	f001 fae3 	bl	800352c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2017      	movs	r0, #23
 8001f6c:	f001 fa15 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f70:	2017      	movs	r0, #23
 8001f72:	f001 fa2e 	bl	80033d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2028      	movs	r0, #40	; 0x28
 8001f7c:	f001 fa0d 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f80:	2028      	movs	r0, #40	; 0x28
 8001f82:	f001 fa26 	bl	80033d2 <HAL_NVIC_EnableIRQ>

}
 8001f86:	bf00      	nop
 8001f88:	3728      	adds	r7, #40	; 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020800 	.word	0x40020800

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <Error_Handler+0x8>
	...

08001fa8 <omni_init>:
#include "motor_control.h"
#include "math.h"

static float params[12];

uint8_t omni_init(){
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

	// Wheel 1 -- front left
	params[0] = 0;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <omni_init+0x6c>)
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
	params[1] = -1;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <omni_init+0x6c>)
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <omni_init+0x70>)
 8001fb8:	605a      	str	r2, [r3, #4]
	params[2] = 1;
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <omni_init+0x6c>)
 8001fbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fc0:	609a      	str	r2, [r3, #8]

	// Wheel 2 -- front right
	params[3] = 0;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <omni_init+0x6c>)
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
	params[4] = 1;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <omni_init+0x6c>)
 8001fcc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fd0:	611a      	str	r2, [r3, #16]
	params[5] = 1;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <omni_init+0x6c>)
 8001fd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fd8:	615a      	str	r2, [r3, #20]

	// Wheel 3 -- back right
	params[6] = 0;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <omni_init+0x6c>)
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
	params[7] = -1;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <omni_init+0x6c>)
 8001fe4:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <omni_init+0x70>)
 8001fe6:	61da      	str	r2, [r3, #28]
	params[8] = 1;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <omni_init+0x6c>)
 8001fea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fee:	621a      	str	r2, [r3, #32]

	// Wheel 4 -- back left
	params[9] = 0;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <omni_init+0x6c>)
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
	params[10] = 1;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <omni_init+0x6c>)
 8001ffa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
	params[11] = 1;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <omni_init+0x6c>)
 8002002:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c

	return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	200000d4 	.word	0x200000d4
 8002018:	bf800000 	.word	0xbf800000

0800201c <getMotorVels>:

int8_t * getMotorVels(uint8_t magnitude, float * direction){
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
	static int8_t motor_cmds[4];
	matrixMult(magnitude, direction, motor_cmds);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <getMotorVels+0x24>)
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f808 	bl	8002044 <matrixMult>
	return motor_cmds;
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <getMotorVels+0x24>)
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000104 	.word	0x20000104

08002044 <matrixMult>:

void matrixMult(uint8_t magnitude, float *direction, int8_t *motor_cmds){
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	73fb      	strb	r3, [r7, #15]
	float motor1;
	float motor2;
	float motor3;
	float motor4;

	float xv = direction[0] * magnitude;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
	int8_t x_vel = ceil(xv);
 800206a:	69f8      	ldr	r0, [r7, #28]
 800206c:	f7fe fa18 	bl	80004a0 <__aeabi_f2d>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	ec43 2b10 	vmov	d0, r2, r3
 8002078:	f004 ff36 	bl	8006ee8 <ceil>
 800207c:	ec53 2b10 	vmov	r2, r3, d0
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fd14 	bl	8000ab0 <__aeabi_d2iz>
 8002088:	4603      	mov	r3, r0
 800208a:	76fb      	strb	r3, [r7, #27]


	float yv = direction[1] * magnitude;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	3304      	adds	r3, #4
 8002090:	ed93 7a00 	vldr	s14, [r3]
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	edc7 7a05 	vstr	s15, [r7, #20]
	int8_t y_vel = ceil(yv);
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7fe f9fa 	bl	80004a0 <__aeabi_f2d>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	ec43 2b10 	vmov	d0, r2, r3
 80020b4:	f004 ff18 	bl	8006ee8 <ceil>
 80020b8:	ec53 2b10 	vmov	r2, r3, d0
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fcf6 	bl	8000ab0 <__aeabi_d2iz>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]


	motor_cmds[0] = params[1] * x_vel + params[2] * y_vel;
 80020c8:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <matrixMult+0x194>)
 80020ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80020ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <matrixMult+0x194>)
 80020e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80020e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	edc7 7a00 	vstr	s15, [r7]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b25a      	sxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	701a      	strb	r2, [r3, #0]
	motor_cmds[1] = params[4] * x_vel + params[5] * y_vel;
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <matrixMult+0x194>)
 800210a:	ed93 7a04 	vldr	s14, [r3, #16]
 800210e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <matrixMult+0x194>)
 8002120:	edd3 6a05 	vldr	s13, [r3, #20]
 8002124:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3301      	adds	r3, #1
 800213c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002140:	edc7 7a00 	vstr	s15, [r7]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b252      	sxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
	motor_cmds[2] = params[7] * x_vel + params[8] * y_vel;
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <matrixMult+0x194>)
 800214c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002150:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <matrixMult+0x194>)
 8002162:	edd3 6a08 	vldr	s13, [r3, #32]
 8002166:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3302      	adds	r3, #2
 800217e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002182:	edc7 7a00 	vstr	s15, [r7]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	b252      	sxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]
	motor_cmds[3] = params[10] * x_vel + params[11] * y_vel;
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <matrixMult+0x194>)
 800218e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <matrixMult+0x194>)
 80021a4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80021a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3303      	adds	r3, #3
 80021c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c4:	edc7 7a00 	vstr	s15, [r7]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	b252      	sxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]

}
 80021ce:	bf00      	nop
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200000d4 	.word	0x200000d4

080021dc <piezo_init>:

#include "piezo.h"

static TIM_HandleTypeDef* htim;

void piezo_init(TIM_HandleTypeDef* htim_in) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	htim = htim_in;
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <piezo_init+0x1c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000108 	.word	0x20000108

080021fc <changeFrequency>:

void changeFrequency(int note /* Hz */) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	int arr = 1000000/noteArray[note];
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <changeFrequency+0x80>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	ed93 7a00 	vldr	s14, [r3]
 8002210:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002280 <changeFrequency+0x84>
 8002214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <changeFrequency+0x88>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f003 f957 	bl	80054dc <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	htim->Init.Period = arr - 1;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	1e5a      	subs	r2, r3, #1
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <changeFrequency+0x88>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(htim);
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <changeFrequency+0x88>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f84e 	bl	80052de <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002242:	2360      	movs	r3, #96	; 0x60
 8002244:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = arr/2;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	0fda      	lsrs	r2, r3, #31
 800224a:	4413      	add	r3, r2
 800224c:	105b      	asrs	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
	HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <changeFrequency+0x88>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f107 0108 	add.w	r1, r7, #8
 8002260:	2200      	movs	r2, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f003 fb02 	bl	800586c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <changeFrequency+0x88>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f003 f884 	bl	800537c <HAL_TIM_PWM_Start>
}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000000c 	.word	0x2000000c
 8002280:	49742400 	.word	0x49742400
 8002284:	20000108 	.word	0x20000108

08002288 <delay>:

void delay(int len) {
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < len; ++i) {}
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e002      	b.n	800229c <delay+0x14>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf8      	blt.n	8002296 <delay+0xe>
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <rest>:

void rest(int len) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <rest+0x24>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f90a 	bl	80054dc <HAL_TIM_PWM_Stop>
	delay(len);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffdd 	bl	8002288 <delay>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000108 	.word	0x20000108

080022dc <playNote>:

void playNote(int len, int note, int restLen) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
	changeFrequency(note);
 80022e8:	68b8      	ldr	r0, [r7, #8]
 80022ea:	f7ff ff87 	bl	80021fc <changeFrequency>
	delay(len);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff ffca 	bl	8002288 <delay>
	rest(restLen);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ffdd 	bl	80022b4 <rest>
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <playDeathSound>:

void playDeathSound() {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	playNote(HALF, D, BURST);
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <playDeathSound+0x50>)
 800230a:	2101      	movs	r1, #1
 800230c:	4a12      	ldr	r2, [pc, #72]	; (8002358 <playDeathSound+0x54>)
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ffe4 	bl	80022dc <playNote>
	playNote(QUARTER, D, BURST);
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <playDeathSound+0x58>)
 8002316:	2101      	movs	r1, #1
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <playDeathSound+0x54>)
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ffde 	bl	80022dc <playNote>
	playNote(FULL, G, BURST);
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <playDeathSound+0x5c>)
 8002322:	2104      	movs	r1, #4
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <playDeathSound+0x54>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ffd8 	bl	80022dc <playNote>
	playNote(HALF, D, BURST);
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <playDeathSound+0x50>)
 800232e:	2101      	movs	r1, #1
 8002330:	4a09      	ldr	r2, [pc, #36]	; (8002358 <playDeathSound+0x54>)
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ffd2 	bl	80022dc <playNote>
	playNote(QUARTER, G, BURST);
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <playDeathSound+0x58>)
 800233a:	2104      	movs	r1, #4
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <playDeathSound+0x54>)
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ffcc 	bl	80022dc <playNote>
	playNote(FULL, B, BURST);
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <playDeathSound+0x5c>)
 8002346:	2106      	movs	r1, #6
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <playDeathSound+0x54>)
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ffc6 	bl	80022dc <playNote>
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	004c4b40 	.word	0x004c4b40
 8002358:	000493e0 	.word	0x000493e0
 800235c:	002dc6c0 	.word	0x002dc6c0
 8002360:	00989680 	.word	0x00989680

08002364 <playHitSound>:

void playHitSound() {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	playNote(QUARTER, C_HIGH, 1);
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <playHitSound+0x50>)
 800236a:	2107      	movs	r1, #7
 800236c:	2201      	movs	r2, #1
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffb4 	bl	80022dc <playNote>
	playNote(QUARTER, F, 1);
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <playHitSound+0x50>)
 8002376:	2103      	movs	r1, #3
 8002378:	2201      	movs	r2, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ffae 	bl	80022dc <playNote>
	playNote(QUARTER, C_HIGH, 1);
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <playHitSound+0x50>)
 8002382:	2107      	movs	r1, #7
 8002384:	2201      	movs	r2, #1
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ffa8 	bl	80022dc <playNote>
	playNote(QUARTER, F, 1);
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <playHitSound+0x50>)
 800238e:	2103      	movs	r1, #3
 8002390:	2201      	movs	r2, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ffa2 	bl	80022dc <playNote>
	playNote(QUARTER, C_HIGH, 1);
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <playHitSound+0x50>)
 800239a:	2107      	movs	r1, #7
 800239c:	2201      	movs	r2, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff9c 	bl	80022dc <playNote>
	playNote(QUARTER, F, 1);
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <playHitSound+0x50>)
 80023a6:	2103      	movs	r1, #3
 80023a8:	2201      	movs	r2, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff96 	bl	80022dc <playNote>
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	002dc6c0 	.word	0x002dc6c0

080023b8 <playFireSound>:

void playFireSound() {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	playNote(BURST, C_HIGH, 1);
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <playFireSound+0x2c>)
 80023be:	2107      	movs	r1, #7
 80023c0:	2201      	movs	r2, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff8a 	bl	80022dc <playNote>
	playNote(BURST, F, 1);
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <playFireSound+0x2c>)
 80023ca:	2103      	movs	r1, #3
 80023cc:	2201      	movs	r2, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff84 	bl	80022dc <playNote>
	playNote(BURST, C_LOW, 1);
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <playFireSound+0x2c>)
 80023d6:	2100      	movs	r1, #0
 80023d8:	2201      	movs	r2, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff7e 	bl	80022dc <playNote>
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	000493e0 	.word	0x000493e0

080023e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_MspInit+0x4c>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_MspInit+0x4c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002426:	2007      	movs	r0, #7
 8002428:	f000 ffac 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_ADC_MspInit+0x7c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d127      	bne.n	80024aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_ADC_MspInit+0x80>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <HAL_ADC_MspInit+0x80>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_ADC_MspInit+0x80>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_ADC_MspInit+0x80>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_ADC_MspInit+0x80>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_ADC_MspInit+0x80>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002492:	2302      	movs	r3, #2
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002496:	2303      	movs	r3, #3
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_ADC_MspInit+0x84>)
 80024a6:	f001 f841 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	; 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40012000 	.word	0x40012000
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000

080024c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <HAL_I2C_MspInit+0x128>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12d      	bne.n	800253e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a40      	ldr	r2, [pc, #256]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002510:	2304      	movs	r3, #4
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	4835      	ldr	r0, [pc, #212]	; (80025f0 <HAL_I2C_MspInit+0x130>)
 800251c:	f001 f806 	bl	800352c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4a30      	ldr	r2, [pc, #192]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 800252a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800252e:	6413      	str	r3, [r2, #64]	; 0x40
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800253c:	e04f      	b.n	80025de <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <HAL_I2C_MspInit+0x134>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d14a      	bne.n	80025de <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4a26      	ldr	r2, [pc, #152]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6313      	str	r3, [r2, #48]	; 0x30
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	6313      	str	r3, [r2, #48]	; 0x30
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002592:	2304      	movs	r3, #4
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	4816      	ldr	r0, [pc, #88]	; (80025f8 <HAL_I2C_MspInit+0x138>)
 800259e:	f000 ffc5 	bl	800352c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025a2:	2310      	movs	r3, #16
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a6:	2312      	movs	r3, #18
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80025b2:	2309      	movs	r3, #9
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <HAL_I2C_MspInit+0x130>)
 80025be:	f000 ffb5 	bl	800352c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a08      	ldr	r2, [pc, #32]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 80025cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_I2C_MspInit+0x12c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
}
 80025de:	bf00      	nop
 80025e0:	3730      	adds	r7, #48	; 0x30
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40005400 	.word	0x40005400
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40005c00 	.word	0x40005c00
 80025f8:	40020000 	.word	0x40020000

080025fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d10d      	bne.n	800262a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_TIM_PWM_MspInit+0x3c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_TIM_PWM_MspInit+0x3c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_TIM_PWM_MspInit+0x3c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800

0800263c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <HAL_TIM_OC_MspInit+0x3c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10d      	bne.n	800266a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_TIM_OC_MspInit+0x40>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_TIM_OC_MspInit+0x40>)
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_TIM_OC_MspInit+0x40>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <HAL_TIM_Base_MspInit+0x48>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d115      	bne.n	80026be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_TIM_Base_MspInit+0x4c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_TIM_Base_MspInit+0x4c>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_TIM_Base_MspInit+0x4c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	201a      	movs	r0, #26
 80026b4:	f000 fe71 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026b8:	201a      	movs	r0, #26
 80026ba:	f000 fe8a 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40014800 	.word	0x40014800
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d11d      	bne.n	800272e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_TIM_MspPostInit+0x68>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_TIM_MspPostInit+0x68>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_TIM_MspPostInit+0x68>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800270e:	2301      	movs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800271e:	2301      	movs	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4619      	mov	r1, r3
 8002728:	4804      	ldr	r0, [pc, #16]	; (800273c <HAL_TIM_MspPostInit+0x6c>)
 800272a:	f000 feff 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800272e:	bf00      	nop
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000

08002740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_UART_MspInit+0x94>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d134      	bne.n	80027cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_UART_MspInit+0x98>)
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800279a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ac:	2307      	movs	r3, #7
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4809      	ldr	r0, [pc, #36]	; (80027dc <HAL_UART_MspInit+0x9c>)
 80027b8:	f000 feb8 	bl	800352c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	2025      	movs	r0, #37	; 0x25
 80027c2:	f000 fdea 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027c6:	2025      	movs	r0, #37	; 0x25
 80027c8:	f000 fe03 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40011000 	.word	0x40011000
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020000 	.word	0x40020000

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <NMI_Handler+0x4>

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <MemManage_Handler+0x4>

080027f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <BusFault_Handler+0x4>

080027f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <UsageFault_Handler+0x4>

080027fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282c:	f000 f8b4 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002838:	2040      	movs	r0, #64	; 0x40
 800283a:	f001 f82d 	bl	8003898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800284a:	f002 feab 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200002a0 	.word	0x200002a0

08002858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <USART1_IRQHandler+0x10>)
 800285e:	f003 fc83 	bl	8006168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000025c 	.word	0x2000025c

0800286c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002870:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002874:	f001 f810 	bl	8003898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <SystemInit+0x20>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	4a05      	ldr	r2, [pc, #20]	; (800289c <SystemInit+0x20>)
 8002888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800288c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a4:	480d      	ldr	r0, [pc, #52]	; (80028dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028a6:	490e      	ldr	r1, [pc, #56]	; (80028e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028bc:	4c0b      	ldr	r4, [pc, #44]	; (80028ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028ca:	f7ff ffd7 	bl	800287c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ce:	f004 facf 	bl	8006e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d2:	f7ff f855 	bl	8001980 <main>
  bx  lr    
 80028d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80028e4:	08008098 	.word	0x08008098
  ldr r2, =_sbss
 80028e8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80028ec:	20000334 	.word	0x20000334

080028f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f0:	e7fe      	b.n	80028f0 <ADC_IRQHandler>
	...

080028f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_Init+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_Init+0x40>)
 80028fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_Init+0x40>)
 800290a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800290e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_Init+0x40>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_Init+0x40>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291c:	2003      	movs	r0, #3
 800291e:	f000 fd31 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002922:	2000      	movs	r0, #0
 8002924:	f000 f808 	bl	8002938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002928:	f7ff fd5e 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023c00 	.word	0x40023c00

08002938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_InitTick+0x54>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_InitTick+0x58>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fd49 	bl	80033ee <HAL_SYSTICK_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00e      	b.n	8002984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d80a      	bhi.n	8002982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002974:	f000 fd11 	bl	800339a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <HAL_InitTick+0x5c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000002c 	.word	0x2000002c
 8002990:	20000034 	.word	0x20000034
 8002994:	20000030 	.word	0x20000030

08002998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_IncTick+0x20>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_IncTick+0x24>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_IncTick+0x24>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000034 	.word	0x20000034
 80029bc:	20000330 	.word	0x20000330

080029c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return uwTick;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_GetTick+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000330 	.word	0x20000330

080029d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff ffee 	bl	80029c0 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f0:	d005      	beq.n	80029fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_Delay+0x44>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029fe:	bf00      	nop
 8002a00:	f7ff ffde 	bl	80029c0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d8f7      	bhi.n	8002a00 <HAL_Delay+0x28>
  {
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000034 	.word	0x20000034

08002a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e033      	b.n	8002a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff fcfa 	bl	8002438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a66:	f023 0302 	bic.w	r3, r3, #2
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 faba 	bl	8002fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8e:	e001      	b.n	8002a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Start+0x1a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e097      	b.n	8002bf2 <HAL_ADC_Start+0x14a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d018      	beq.n	8002b0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae8:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <HAL_ADC_Start+0x158>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a45      	ldr	r2, [pc, #276]	; (8002c04 <HAL_ADC_Start+0x15c>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9a      	lsrs	r2, r3, #18
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d15f      	bne.n	8002bd8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d106      	bne.n	8002b66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f023 0206 	bic.w	r2, r3, #6
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
 8002b64:	e002      	b.n	8002b6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_ADC_Start+0x160>)
 8002b76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d129      	bne.n	8002bf0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	e020      	b.n	8002bf0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <HAL_ADC_Start+0x164>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_ADC_Start+0x148>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d114      	bne.n	8002bf0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f043 0210 	orr.w	r2, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2000002c 	.word	0x2000002c
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	40012300 	.word	0x40012300
 8002c0c:	40012000 	.word	0x40012000

08002c10 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Stop+0x16>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e021      	b.n	8002c6a <HAL_ADC_Stop+0x5a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d113      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e063      	b.n	8002d84 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002cbc:	f7ff fe80 	bl	80029c0 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc2:	e021      	b.n	8002d08 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cca:	d01d      	beq.n	8002d08 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_ADC_PollForConversion+0x6c>
 8002cd2:	f7ff fe75 	bl	80029c0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d212      	bcs.n	8002d08 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d00b      	beq.n	8002d08 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e03d      	b.n	8002d84 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d1d6      	bne.n	8002cc4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0212 	mvn.w	r2, #18
 8002d1e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d123      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11f      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d111      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e105      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x228>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d925      	bls.n	8002e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4403      	add	r3, r0
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e022      	b.n	8002e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	2207      	movs	r2, #7
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4403      	add	r3, r0
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d824      	bhi.n	8002eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b05      	subs	r3, #5
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b05      	subs	r3, #5
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	e04c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d824      	bhi.n	8002f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b23      	subs	r3, #35	; 0x23
 8002ed2:	221f      	movs	r2, #31
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b23      	subs	r3, #35	; 0x23
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
 8002f08:	e023      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b41      	subs	r3, #65	; 0x41
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	; 0x41
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_ADC_ConfigChannel+0x234>)
 8002f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_ADC_ConfigChannel+0x238>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1cc>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d105      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_ADC_ConfigChannel+0x238>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d123      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x1e6>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b11      	cmp	r3, #17
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d111      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_ADC_ConfigChannel+0x23c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_ADC_ConfigChannel+0x240>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	0c9a      	lsrs	r2, r3, #18
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fb8:	e002      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f9      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	40012000 	.word	0x40012000
 8002fe4:	2000002c 	.word	0x2000002c
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <ADC_Init+0x1f0>)
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <ADC_Init+0x1f4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6899      	ldr	r1, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	e00f      	b.n	80030ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0202 	bic.w	r2, r2, #2
 80030f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7e1b      	ldrb	r3, [r3, #24]
 8003104:	005a      	lsls	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	3b01      	subs	r3, #1
 8003144:	035a      	lsls	r2, r3, #13
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e007      	b.n	8003160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	3b01      	subs	r3, #1
 800317c:	051a      	lsls	r2, r3, #20
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031a2:	025a      	lsls	r2, r3, #9
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	029a      	lsls	r2, r3, #10
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40012300 	.word	0x40012300
 80031e0:	0f000001 	.word	0x0f000001

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	; (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003350:	d301      	bcc.n	8003356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003352:	2301      	movs	r3, #1
 8003354:	e00f      	b.n	8003376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <SysTick_Config+0x40>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335e:	210f      	movs	r1, #15
 8003360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003364:	f7ff ff8e 	bl	8003284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <SysTick_Config+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <SysTick_Config+0x40>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010

08003384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff29 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ac:	f7ff ff3e 	bl	800322c <__NVIC_GetPriorityGrouping>
 80033b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff8e 	bl	80032d8 <NVIC_EncodePriority>
 80033bc:	4602      	mov	r2, r0
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff5d 	bl	8003284 <__NVIC_SetPriority>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff31 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffa2 	bl	8003340 <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff fad4 	bl	80029c0 <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d008      	beq.n	8003438 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e052      	b.n	80034de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0216 	bic.w	r2, r2, #22
 8003446:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003456:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <HAL_DMA_Abort+0x62>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0208 	bic.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003488:	e013      	b.n	80034b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348a:	f7ff fa99 	bl	80029c0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b05      	cmp	r3, #5
 8003496:	d90c      	bls.n	80034b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e015      	b.n	80034de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e4      	bne.n	800348a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d004      	beq.n	8003504 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e00c      	b.n	800351e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2205      	movs	r2, #5
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e159      	b.n	80037fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	f040 8148 	bne.w	80037f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d005      	beq.n	800357e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357a:	2b02      	cmp	r3, #2
 800357c:	d130      	bne.n	80035e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 0201 	and.w	r2, r3, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d017      	beq.n	800361c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d123      	bne.n	8003670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a2 	beq.w	80037f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b57      	ldr	r3, [pc, #348]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	4a56      	ldr	r2, [pc, #344]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 80036bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	4b54      	ldr	r3, [pc, #336]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a52      	ldr	r2, [pc, #328]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a49      	ldr	r2, [pc, #292]	; (800381c <HAL_GPIO_Init+0x2f0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x202>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a48      	ldr	r2, [pc, #288]	; (8003820 <HAL_GPIO_Init+0x2f4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x1fe>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a47      	ldr	r2, [pc, #284]	; (8003824 <HAL_GPIO_Init+0x2f8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x1fa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a46      	ldr	r2, [pc, #280]	; (8003828 <HAL_GPIO_Init+0x2fc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x1f6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_GPIO_Init+0x300>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x1f2>
 800371a:	2304      	movs	r3, #4
 800371c:	e008      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800371e:	2307      	movs	r3, #7
 8003720:	e006      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003722:	2303      	movs	r3, #3
 8003724:	e004      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372e:	2300      	movs	r3, #0
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	f002 0203 	and.w	r2, r2, #3
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	4093      	lsls	r3, r2
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003740:	4935      	ldr	r1, [pc, #212]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800374e:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_GPIO_Init+0x304>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003772:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <HAL_GPIO_Init+0x304>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_GPIO_Init+0x304>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379c:	4a24      	ldr	r2, [pc, #144]	; (8003830 <HAL_GPIO_Init+0x304>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f0:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	f67f aea2 	bls.w	8003548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3724      	adds	r7, #36	; 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	40013800 	.word	0x40013800
 800381c:	40020000 	.word	0x40020000
 8003820:	40020400 	.word	0x40020400
 8003824:	40020800 	.word	0x40020800
 8003828:	40020c00 	.word	0x40020c00
 800382c:	40021000 	.word	0x40021000
 8003830:	40013c00 	.word	0x40013c00

08003834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e001      	b.n	8003856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003880:	e003      	b.n	800388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd ff60 	bl	800177c <HAL_GPIO_EXTI_Callback>
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40013c00 	.word	0x40013c00

080038c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e12b      	b.n	8003b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe fde6 	bl	80024c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800392c:	f001 fbae 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8003930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a81      	ldr	r2, [pc, #516]	; (8003b3c <HAL_I2C_Init+0x274>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d807      	bhi.n	800394c <HAL_I2C_Init+0x84>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a80      	ldr	r2, [pc, #512]	; (8003b40 <HAL_I2C_Init+0x278>)
 8003940:	4293      	cmp	r3, r2
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e006      	b.n	800395a <HAL_I2C_Init+0x92>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_I2C_Init+0x27c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0e7      	b.n	8003b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a78      	ldr	r2, [pc, #480]	; (8003b48 <HAL_I2C_Init+0x280>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9b      	lsrs	r3, r3, #18
 800396c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <HAL_I2C_Init+0x274>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d802      	bhi.n	800399c <HAL_I2C_Init+0xd4>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3301      	adds	r3, #1
 800399a:	e009      	b.n	80039b0 <HAL_I2C_Init+0xe8>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	4a69      	ldr	r2, [pc, #420]	; (8003b4c <HAL_I2C_Init+0x284>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	099b      	lsrs	r3, r3, #6
 80039ae:	3301      	adds	r3, #1
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	495c      	ldr	r1, [pc, #368]	; (8003b3c <HAL_I2C_Init+0x274>)
 80039cc:	428b      	cmp	r3, r1
 80039ce:	d819      	bhi.n	8003a04 <HAL_I2C_Init+0x13c>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e59      	subs	r1, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fbb1 f3f3 	udiv	r3, r1, r3
 80039de:	1c59      	adds	r1, r3, #1
 80039e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e4:	400b      	ands	r3, r1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_I2C_Init+0x138>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e59      	subs	r1, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fe:	e051      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a00:	2304      	movs	r3, #4
 8003a02:	e04f      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d111      	bne.n	8003a30 <HAL_I2C_Init+0x168>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e012      	b.n	8003a56 <HAL_I2C_Init+0x18e>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e58      	subs	r0, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	0099      	lsls	r1, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Init+0x196>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e022      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <HAL_I2C_Init+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e58      	subs	r0, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	440b      	add	r3, r1
 8003a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	e00f      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e58      	subs	r0, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6809      	ldr	r1, [r1, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6911      	ldr	r1, [r2, #16]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	000186a0 	.word	0x000186a0
 8003b40:	001e847f 	.word	0x001e847f
 8003b44:	003d08ff 	.word	0x003d08ff
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	10624dd3 	.word	0x10624dd3

08003b50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	817b      	strh	r3, [r7, #10]
 8003b60:	4613      	mov	r3, r2
 8003b62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7fe ff2c 	bl	80029c0 <HAL_GetTick>
 8003b68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	f040 80e0 	bne.w	8003d38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2319      	movs	r3, #25
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4970      	ldr	r1, [pc, #448]	; (8003d44 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fc58 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0d3      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2C_Master_Transmit+0x50>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e0cc      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d007      	beq.n	8003bc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2221      	movs	r2, #33	; 0x21
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2210      	movs	r2, #16
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	893a      	ldrh	r2, [r7, #8]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a50      	ldr	r2, [pc, #320]	; (8003d48 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fac2 	bl	8004198 <I2C_MasterRequestWrite>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e08d      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c34:	e066      	b.n	8003d04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	6a39      	ldr	r1, [r7, #32]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fcd2 	bl	80045e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d107      	bne.n	8003c5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06b      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_I2C_Master_Transmit+0x188>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	6a39      	ldr	r1, [r7, #32]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fcc2 	bl	8004666 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e01a      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d194      	bne.n	8003c36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	00100002 	.word	0x00100002
 8003d48:	ffff0000 	.word	0xffff0000

08003d4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08c      	sub	sp, #48	; 0x30
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	461a      	mov	r2, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	817b      	strh	r3, [r7, #10]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7fe fe2e 	bl	80029c0 <HAL_GetTick>
 8003d64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 820b 	bne.w	800418a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	497c      	ldr	r1, [pc, #496]	; (8003f70 <HAL_I2C_Master_Receive+0x224>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fb5a 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e1fe      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_I2C_Master_Receive+0x50>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e1f7      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d007      	beq.n	8003dc2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2222      	movs	r2, #34	; 0x22
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2210      	movs	r2, #16
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	893a      	ldrh	r2, [r7, #8]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a5c      	ldr	r2, [pc, #368]	; (8003f74 <HAL_I2C_Master_Receive+0x228>)
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e04:	8979      	ldrh	r1, [r7, #10]
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fa46 	bl	800429c <I2C_MasterRequestRead>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e1b8      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d113      	bne.n	8003e4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e18c      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d11b      	bne.n	8003e8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e16c      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d11b      	bne.n	8003eca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	e14c      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ef0:	e138      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	f200 80f1 	bhi.w	80040de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d123      	bne.n	8003f4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fbed 	bl	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e139      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4a:	e10b      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d14e      	bne.n	8003ff2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4906      	ldr	r1, [pc, #24]	; (8003f78 <HAL_I2C_Master_Receive+0x22c>)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fa6a 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e10e      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
 8003f6e:	bf00      	nop
 8003f70:	00100002 	.word	0x00100002
 8003f74:	ffff0000 	.word	0xffff0000
 8003f78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff0:	e0b8      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4966      	ldr	r1, [pc, #408]	; (8004194 <HAL_I2C_Master_Receive+0x448>)
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa1b 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0bf      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2200      	movs	r2, #0
 8004056:	494f      	ldr	r1, [pc, #316]	; (8004194 <HAL_I2C_Master_Receive+0x448>)
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f9ed 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e091      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040dc:	e042      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fb00 	bl	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e04c      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d118      	bne.n	8004164 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	f47f aec2 	bne.w	8003ef2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	00010004 	.word	0x00010004

08004198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	460b      	mov	r3, r1
 80041a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d006      	beq.n	80041c2 <I2C_MasterRequestWrite+0x2a>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d003      	beq.n	80041c2 <I2C_MasterRequestWrite+0x2a>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c0:	d108      	bne.n	80041d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e00b      	b.n	80041ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	2b12      	cmp	r3, #18
 80041da:	d107      	bne.n	80041ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f91d 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00d      	beq.n	8004220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004212:	d103      	bne.n	800421c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e035      	b.n	800428c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004228:	d108      	bne.n	800423c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	e01b      	b.n	8004274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800423c:	897b      	ldrh	r3, [r7, #10]
 800423e:	11db      	asrs	r3, r3, #7
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0306 	and.w	r3, r3, #6
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f063 030f 	orn	r3, r3, #15
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	490e      	ldr	r1, [pc, #56]	; (8004294 <I2C_MasterRequestWrite+0xfc>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f943 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e010      	b.n	800428c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4907      	ldr	r1, [pc, #28]	; (8004298 <I2C_MasterRequestWrite+0x100>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f933 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	00010008 	.word	0x00010008
 8004298:	00010002 	.word	0x00010002

0800429c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	460b      	mov	r3, r1
 80042aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d006      	beq.n	80042d6 <I2C_MasterRequestRead+0x3a>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d003      	beq.n	80042d6 <I2C_MasterRequestRead+0x3a>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d4:	d108      	bne.n	80042e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e00b      	b.n	8004300 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	2b11      	cmp	r3, #17
 80042ee:	d107      	bne.n	8004300 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f893 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004326:	d103      	bne.n	8004330 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e079      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800433c:	d108      	bne.n	8004350 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800433e:	897b      	ldrh	r3, [r7, #10]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	611a      	str	r2, [r3, #16]
 800434e:	e05f      	b.n	8004410 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004350:	897b      	ldrh	r3, [r7, #10]
 8004352:	11db      	asrs	r3, r3, #7
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0306 	and.w	r3, r3, #6
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f063 030f 	orn	r3, r3, #15
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4930      	ldr	r1, [pc, #192]	; (8004430 <I2C_MasterRequestRead+0x194>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8b9 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e054      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800437e:	897b      	ldrh	r3, [r7, #10]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4929      	ldr	r1, [pc, #164]	; (8004434 <I2C_MasterRequestRead+0x198>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8a9 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e044      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f831 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	d103      	bne.n	80043f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e017      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	11db      	asrs	r3, r3, #7
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 0306 	and.w	r3, r3, #6
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f063 030e 	orn	r3, r3, #14
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4907      	ldr	r1, [pc, #28]	; (8004434 <I2C_MasterRequestRead+0x198>)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f865 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00010008 	.word	0x00010008
 8004434:	00010002 	.word	0x00010002

08004438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004448:	e025      	b.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004450:	d021      	beq.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004452:	f7fe fab5 	bl	80029c0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d302      	bcc.n	8004468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d116      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e023      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10d      	bne.n	80044bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	e00c      	b.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	43da      	mvns	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4013      	ands	r3, r2
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d0b6      	beq.n	800444a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f4:	e051      	b.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004504:	d123      	bne.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800451e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e046      	b.n	80045dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004554:	d021      	beq.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe fa33 	bl	80029c0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d116      	bne.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e020      	b.n	80045dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10c      	bne.n	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	43da      	mvns	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e00b      	b.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	43da      	mvns	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4013      	ands	r3, r2
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d18d      	bne.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f0:	e02d      	b.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f8ce 	bl	8004794 <I2C_IsAcknowledgeFailed>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e02d      	b.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004608:	d021      	beq.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fe f9d9 	bl	80029c0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d116      	bne.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e007      	b.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d1ca      	bne.n	80045f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004672:	e02d      	b.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f88d 	bl	8004794 <I2C_IsAcknowledgeFailed>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e02d      	b.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800468a:	d021      	beq.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468c:	f7fe f998 	bl	80029c0 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d116      	bne.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e007      	b.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d1ca      	bne.n	8004674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f4:	e042      	b.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b10      	cmp	r3, #16
 8004702:	d119      	bne.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0210 	mvn.w	r2, #16
 800470c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e029      	b.n	800478c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004738:	f7fe f942 	bl	80029c0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e007      	b.n	800478c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d1b5      	bne.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047aa:	d11b      	bne.n	80047e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f043 0204 	orr.w	r2, r3, #4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e264      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d075      	beq.n	80048fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004812:	4ba3      	ldr	r3, [pc, #652]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b04      	cmp	r3, #4
 800481c:	d00c      	beq.n	8004838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481e:	4ba0      	ldr	r3, [pc, #640]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	2b08      	cmp	r3, #8
 8004828:	d112      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482a:	4b9d      	ldr	r3, [pc, #628]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004836:	d10b      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004838:	4b99      	ldr	r3, [pc, #612]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05b      	beq.n	80048fc <HAL_RCC_OscConfig+0x108>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d157      	bne.n	80048fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e23f      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d106      	bne.n	8004868 <HAL_RCC_OscConfig+0x74>
 800485a:	4b91      	ldr	r3, [pc, #580]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a90      	ldr	r2, [pc, #576]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e01d      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x98>
 8004872:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a8a      	ldr	r2, [pc, #552]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a87      	ldr	r2, [pc, #540]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 800488c:	4b84      	ldr	r3, [pc, #528]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a83      	ldr	r2, [pc, #524]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a80      	ldr	r2, [pc, #512]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fe f888 	bl	80029c0 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b4:	f7fe f884 	bl	80029c0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b64      	cmp	r3, #100	; 0x64
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e204      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0xc0>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe f874 	bl	80029c0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fe f870 	bl	80029c0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1f0      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	4b6c      	ldr	r3, [pc, #432]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0xe8>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d063      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004916:	4b62      	ldr	r3, [pc, #392]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	2b08      	cmp	r3, #8
 8004920:	d11c      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004922:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	4b5c      	ldr	r3, [pc, #368]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e1c4      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4b56      	ldr	r3, [pc, #344]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4952      	ldr	r1, [pc, #328]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	e03a      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <HAL_RCC_OscConfig+0x2b0>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fe f829 	bl	80029c0 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004972:	f7fe f825 	bl	80029c0 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e1a5      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4940      	ldr	r1, [pc, #256]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e015      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a6:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_OscConfig+0x2b0>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fe f808 	bl	80029c0 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fe f804 	bl	80029c0 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e184      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d030      	beq.n	8004a40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e6:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <HAL_RCC_OscConfig+0x2b4>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd ffe8 	bl	80029c0 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fd ffe4 	bl	80029c0 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e164      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x200>
 8004a12:	e015      	b.n	8004a40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x2b4>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1a:	f7fd ffd1 	bl	80029c0 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a22:	f7fd ffcd 	bl	80029c0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e14d      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a0 	beq.w	8004b8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d121      	bne.n	8004ace <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a07      	ldr	r2, [pc, #28]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7fd ff93 	bl	80029c0 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	e011      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2ce>
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	42470000 	.word	0x42470000
 8004aa8:	42470e80 	.word	0x42470e80
 8004aac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fd ff86 	bl	80029c0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e106      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b85      	ldr	r3, [pc, #532]	; (8004cd8 <HAL_RCC_OscConfig+0x4e4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
 8004ad6:	4b81      	ldr	r3, [pc, #516]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a80      	ldr	r2, [pc, #512]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCC_OscConfig+0x32a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x312>
 8004aec:	4b7b      	ldr	r3, [pc, #492]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a7a      	ldr	r2, [pc, #488]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	4b78      	ldr	r3, [pc, #480]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a77      	ldr	r2, [pc, #476]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x32a>
 8004b06:	4b75      	ldr	r3, [pc, #468]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a74      	ldr	r2, [pc, #464]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	4b72      	ldr	r3, [pc, #456]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a71      	ldr	r2, [pc, #452]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fd ff4b 	bl	80029c0 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fd ff47 	bl	80029c0 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0c5      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b65      	ldr	r3, [pc, #404]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCC_OscConfig+0x33a>
 8004b50:	e014      	b.n	8004b7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fd ff35 	bl	80029c0 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fd ff31 	bl	80029c0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0af      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	4b5a      	ldr	r3, [pc, #360]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a55      	ldr	r2, [pc, #340]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 809b 	beq.w	8004cce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b98:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d05c      	beq.n	8004c5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d141      	bne.n	8004c30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b4c      	ldr	r3, [pc, #304]	; (8004ce0 <HAL_RCC_OscConfig+0x4ec>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fd ff05 	bl	80029c0 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bba:	f7fd ff01 	bl	80029c0 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e081      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bcc:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	4937      	ldr	r1, [pc, #220]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <HAL_RCC_OscConfig+0x4ec>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fd feda 	bl	80029c0 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fd fed6 	bl	80029c0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e056      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x41c>
 8004c2e:	e04e      	b.n	8004cce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c30:	4b2b      	ldr	r3, [pc, #172]	; (8004ce0 <HAL_RCC_OscConfig+0x4ec>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fd fec3 	bl	80029c0 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd febf 	bl	80029c0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e03f      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c50:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x44a>
 8004c5c:	e037      	b.n	8004cce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e032      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <HAL_RCC_OscConfig+0x4e8>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d028      	beq.n	8004cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d121      	bne.n	8004cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d11a      	bne.n	8004cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ca0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d111      	bne.n	8004cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d001      	beq.n	8004cce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470060 	.word	0x42470060

08004ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0cc      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90c      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0b8      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b50      	ldr	r3, [pc, #320]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	494d      	ldr	r1, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d044      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d119      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db2:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e067      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4934      	ldr	r1, [pc, #208]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fd fdf4 	bl	80029c0 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fd fdf0 	bl	80029c0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e04f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 020c 	and.w	r2, r3, #12
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1eb      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d20c      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e032      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4916      	ldr	r1, [pc, #88]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e6a:	f000 f821 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	490a      	ldr	r1, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	5ccb      	ldrb	r3, [r1, r3]
 8004e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fd54 	bl	8002938 <HAL_InitTick>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	0800802c 	.word	0x0800802c
 8004ea8:	2000002c 	.word	0x2000002c
 8004eac:	20000030 	.word	0x20000030

08004eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec8:	4b67      	ldr	r3, [pc, #412]	; (8005068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	f200 80bd 	bhi.w	8005054 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ee2:	e0b7      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ee6:	60bb      	str	r3, [r7, #8]
       break;
 8004ee8:	e0b7      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eea:	4b61      	ldr	r3, [pc, #388]	; (8005070 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004eec:	60bb      	str	r3, [r7, #8]
      break;
 8004eee:	e0b4      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ef0:	4b5d      	ldr	r3, [pc, #372]	; (8005068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004efa:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d04d      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f06:	4b58      	ldr	r3, [pc, #352]	; (8005068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	099b      	lsrs	r3, r3, #6
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f16:	f04f 0100 	mov.w	r1, #0
 8004f1a:	ea02 0800 	and.w	r8, r2, r0
 8004f1e:	ea03 0901 	and.w	r9, r3, r1
 8004f22:	4640      	mov	r0, r8
 8004f24:	4649      	mov	r1, r9
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	014b      	lsls	r3, r1, #5
 8004f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f34:	0142      	lsls	r2, r0, #5
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	ebb0 0008 	subs.w	r0, r0, r8
 8004f3e:	eb61 0109 	sbc.w	r1, r1, r9
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	018b      	lsls	r3, r1, #6
 8004f4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f50:	0182      	lsls	r2, r0, #6
 8004f52:	1a12      	subs	r2, r2, r0
 8004f54:	eb63 0301 	sbc.w	r3, r3, r1
 8004f58:	f04f 0000 	mov.w	r0, #0
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	00d9      	lsls	r1, r3, #3
 8004f62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f66:	00d0      	lsls	r0, r2, #3
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	eb12 0208 	adds.w	r2, r2, r8
 8004f70:	eb43 0309 	adc.w	r3, r3, r9
 8004f74:	f04f 0000 	mov.w	r0, #0
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	0259      	lsls	r1, r3, #9
 8004f7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f82:	0250      	lsls	r0, r2, #9
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	f7fb fe04 	bl	8000ba0 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e04a      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa2:	4b31      	ldr	r3, [pc, #196]	; (8005068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	ea02 0400 	and.w	r4, r2, r0
 8004fba:	ea03 0501 	and.w	r5, r3, r1
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	014b      	lsls	r3, r1, #5
 8004fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fd0:	0142      	lsls	r2, r0, #5
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	1b00      	subs	r0, r0, r4
 8004fd8:	eb61 0105 	sbc.w	r1, r1, r5
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	018b      	lsls	r3, r1, #6
 8004fe6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fea:	0182      	lsls	r2, r0, #6
 8004fec:	1a12      	subs	r2, r2, r0
 8004fee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f04f 0100 	mov.w	r1, #0
 8004ffa:	00d9      	lsls	r1, r3, #3
 8004ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005000:	00d0      	lsls	r0, r2, #3
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	1912      	adds	r2, r2, r4
 8005008:	eb45 0303 	adc.w	r3, r5, r3
 800500c:	f04f 0000 	mov.w	r0, #0
 8005010:	f04f 0100 	mov.w	r1, #0
 8005014:	0299      	lsls	r1, r3, #10
 8005016:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800501a:	0290      	lsls	r0, r2, #10
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	461a      	mov	r2, r3
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	f7fb fdb8 	bl	8000ba0 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4613      	mov	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	3301      	adds	r3, #1
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	60bb      	str	r3, [r7, #8]
      break;
 8005052:	e002      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005056:	60bb      	str	r3, [r7, #8]
      break;
 8005058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800505a:	68bb      	ldr	r3, [r7, #8]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	00f42400 	.word	0x00f42400
 8005070:	007a1200 	.word	0x007a1200

08005074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005078:	4b03      	ldr	r3, [pc, #12]	; (8005088 <HAL_RCC_GetHCLKFreq+0x14>)
 800507a:	681b      	ldr	r3, [r3, #0]
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	2000002c 	.word	0x2000002c

0800508c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005090:	f7ff fff0 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800803c 	.word	0x0800803c

080050b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050b8:	f7ff ffdc 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0b5b      	lsrs	r3, r3, #13
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	0800803c 	.word	0x0800803c

080050dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e041      	b.n	8005172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd fabc 	bl	8002680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 fc90 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d001      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e044      	b.n	800521e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1e      	ldr	r2, [pc, #120]	; (800522c <HAL_TIM_Base_Start_IT+0xb0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x6c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d013      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x6c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1a      	ldr	r2, [pc, #104]	; (8005230 <HAL_TIM_Base_Start_IT+0xb4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x6c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_TIM_Base_Start_IT+0xb8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x6c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_TIM_Base_Start_IT+0xbc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x6c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a16      	ldr	r2, [pc, #88]	; (800523c <HAL_TIM_Base_Start_IT+0xc0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d111      	bne.n	800520c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d010      	beq.n	800521c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	e007      	b.n	800521c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40014000 	.word	0x40014000

08005240 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e041      	b.n	80052d6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fd f9e8 	bl	800263c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f000 fbde 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e041      	b.n	8005374 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fd f979 	bl	80025fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f000 fb8f 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_TIM_PWM_Start+0x24>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e022      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d109      	bne.n	80053ba <HAL_TIM_PWM_Start+0x3e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	bf14      	ite	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	2300      	moveq	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	e015      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d109      	bne.n	80053d4 <HAL_TIM_PWM_Start+0x58>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e008      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e068      	b.n	80054c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0x82>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053fc:	e013      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b04      	cmp	r3, #4
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0x92>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800540c:	e00b      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0xa2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541c:	e003      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2201      	movs	r2, #1
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd12 	bl	8005e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <HAL_TIM_PWM_Start+0x14c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d107      	bne.n	800544e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <HAL_TIM_PWM_Start+0x14c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <HAL_TIM_PWM_Start+0x10e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d013      	beq.n	800548a <HAL_TIM_PWM_Start+0x10e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a19      	ldr	r2, [pc, #100]	; (80054cc <HAL_TIM_PWM_Start+0x150>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_TIM_PWM_Start+0x10e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <HAL_TIM_PWM_Start+0x154>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_TIM_PWM_Start+0x10e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <HAL_TIM_PWM_Start+0x158>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIM_PWM_Start+0x10e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_TIM_PWM_Start+0x15c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d010      	beq.n	80054be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ac:	e007      	b.n	80054be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40014000 	.word	0x40014000

080054dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fcb2 	bl	8005e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <HAL_TIM_PWM_Stop+0xc4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d117      	bne.n	800552e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	f241 1311 	movw	r3, #4369	; 0x1111
 8005508:	4013      	ands	r3, r2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_TIM_PWM_Stop+0x52>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1a      	ldr	r2, [r3, #32]
 8005514:	f240 4344 	movw	r3, #1092	; 0x444
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_TIM_PWM_Stop+0x52>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800552c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6a1a      	ldr	r2, [r3, #32]
 8005534:	f241 1311 	movw	r3, #4369	; 0x1111
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <HAL_TIM_PWM_Stop+0x82>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	f240 4344 	movw	r3, #1092	; 0x444
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d107      	bne.n	800555e <HAL_TIM_PWM_Stop+0x82>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <HAL_TIM_PWM_Stop+0x92>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800556c:	e013      	b.n	8005596 <HAL_TIM_PWM_Stop+0xba>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b04      	cmp	r3, #4
 8005572:	d104      	bne.n	800557e <HAL_TIM_PWM_Stop+0xa2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800557c:	e00b      	b.n	8005596 <HAL_TIM_PWM_Stop+0xba>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d104      	bne.n	800558e <HAL_TIM_PWM_Stop+0xb2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800558c:	e003      	b.n	8005596 <HAL_TIM_PWM_Stop+0xba>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40010000 	.word	0x40010000

080055a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0202 	mvn.w	r2, #2
 80055d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa0c 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9fe 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa0f 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b04      	cmp	r3, #4
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0204 	mvn.w	r2, #4
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9e2 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9d4 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9e5 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b08      	cmp	r3, #8
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b08      	cmp	r3, #8
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0208 	mvn.w	r2, #8
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2204      	movs	r2, #4
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9b8 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9aa 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9bb 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0210 	mvn.w	r2, #16
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2208      	movs	r2, #8
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f98e 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f980 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f991 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0201 	mvn.w	r2, #1
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc f890 	bl	8001848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b80      	cmp	r3, #128	; 0x80
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fc20 	bl	8005f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d10e      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d107      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f956 	bl	8005a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b20      	cmp	r3, #32
 800579a:	d107      	bne.n	80057ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0220 	mvn.w	r2, #32
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fbea 	bl	8005f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e048      	b.n	8005864 <HAL_TIM_OC_ConfigChannel+0xb0>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d839      	bhi.n	8005854 <HAL_TIM_OC_ConfigChannel+0xa0>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	08005855 	.word	0x08005855
 80057f0:	08005855 	.word	0x08005855
 80057f4:	08005855 	.word	0x08005855
 80057f8:	0800582b 	.word	0x0800582b
 80057fc:	08005855 	.word	0x08005855
 8005800:	08005855 	.word	0x08005855
 8005804:	08005855 	.word	0x08005855
 8005808:	08005839 	.word	0x08005839
 800580c:	08005855 	.word	0x08005855
 8005810:	08005855 	.word	0x08005855
 8005814:	08005855 	.word	0x08005855
 8005818:	08005847 	.word	0x08005847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f98c 	bl	8005b40 <TIM_OC1_SetConfig>
      break;
 8005828:	e017      	b.n	800585a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f9eb 	bl	8005c0c <TIM_OC2_SetConfig>
      break;
 8005836:	e010      	b.n	800585a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fa50 	bl	8005ce4 <TIM_OC3_SetConfig>
      break;
 8005844:	e009      	b.n	800585a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fab3 	bl	8005db8 <TIM_OC4_SetConfig>
      break;
 8005852:	e002      	b.n	800585a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
      break;
 8005858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005886:	2302      	movs	r3, #2
 8005888:	e0ae      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	f200 809f 	bhi.w	80059d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080059d9 	.word	0x080059d9
 80058a8:	080059d9 	.word	0x080059d9
 80058ac:	080059d9 	.word	0x080059d9
 80058b0:	08005915 	.word	0x08005915
 80058b4:	080059d9 	.word	0x080059d9
 80058b8:	080059d9 	.word	0x080059d9
 80058bc:	080059d9 	.word	0x080059d9
 80058c0:	08005957 	.word	0x08005957
 80058c4:	080059d9 	.word	0x080059d9
 80058c8:	080059d9 	.word	0x080059d9
 80058cc:	080059d9 	.word	0x080059d9
 80058d0:	08005997 	.word	0x08005997
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f930 	bl	8005b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0208 	orr.w	r2, r2, #8
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	619a      	str	r2, [r3, #24]
      break;
 8005912:	e064      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f976 	bl	8005c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	021a      	lsls	r2, r3, #8
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	619a      	str	r2, [r3, #24]
      break;
 8005954:	e043      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f9c1 	bl	8005ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0204 	bic.w	r2, r2, #4
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	61da      	str	r2, [r3, #28]
      break;
 8005994:	e023      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fa0b 	bl	8005db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	021a      	lsls	r2, r3, #8
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	61da      	str	r2, [r3, #28]
      break;
 80059d6:	e002      	b.n	80059de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	75fb      	strb	r3, [r7, #23]
      break;
 80059dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a34      	ldr	r2, [pc, #208]	; (8005b24 <TIM_Base_SetConfig+0xe4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5e:	d00b      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <TIM_Base_SetConfig+0xe8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a30      	ldr	r2, [pc, #192]	; (8005b2c <TIM_Base_SetConfig+0xec>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_Base_SetConfig+0x38>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a2f      	ldr	r2, [pc, #188]	; (8005b30 <TIM_Base_SetConfig+0xf0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0xe4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01b      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a98:	d017      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <TIM_Base_SetConfig+0xe8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <TIM_Base_SetConfig+0xec>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00f      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <TIM_Base_SetConfig+0xf0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00b      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <TIM_Base_SetConfig+0xf4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <TIM_Base_SetConfig+0xf8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_Base_SetConfig+0x8a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <TIM_Base_SetConfig+0xfc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d108      	bne.n	8005adc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <TIM_Base_SetConfig+0xe4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d103      	bne.n	8005b10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	615a      	str	r2, [r3, #20]
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800

08005b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 0302 	bic.w	r3, r3, #2
 8005b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <TIM_OC1_SetConfig+0xc8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10c      	bne.n	8005bb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0308 	bic.w	r3, r3, #8
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 0304 	bic.w	r3, r3, #4
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <TIM_OC1_SetConfig+0xc8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000

08005c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f023 0210 	bic.w	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0320 	bic.w	r3, r3, #32
 8005c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <TIM_OC2_SetConfig+0xd4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10d      	bne.n	8005c88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <TIM_OC2_SetConfig+0xd4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d113      	bne.n	8005cb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40010000 	.word	0x40010000

08005ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <TIM_OC3_SetConfig+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10d      	bne.n	8005d5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <TIM_OC3_SetConfig+0xd0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d113      	bne.n	8005d8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40010000 	.word	0x40010000

08005db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	031b      	lsls	r3, r3, #12
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <TIM_OC4_SetConfig+0x9c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d109      	bne.n	8005e2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	019b      	lsls	r3, r3, #6
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000

08005e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e050      	b.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f08:	d013      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10c      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40014000 	.word	0x40014000

08005f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e03f      	b.n	800603a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc fbb6 	bl	8002740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	; 0x24
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fd71 	bl	8006ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b08a      	sub	sp, #40	; 0x28
 8006046:	af02      	add	r7, sp, #8
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b20      	cmp	r3, #32
 8006060:	d17c      	bne.n	800615c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_Transmit+0x2c>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e075      	b.n	800615e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_UART_Transmit+0x3e>
 800607c:	2302      	movs	r3, #2
 800607e:	e06e      	b.n	800615e <HAL_UART_Transmit+0x11c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2221      	movs	r2, #33	; 0x21
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006096:	f7fc fc93 	bl	80029c0 <HAL_GetTick>
 800609a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d108      	bne.n	80060c4 <HAL_UART_Transmit+0x82>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e003      	b.n	80060cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060d4:	e02a      	b.n	800612c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 faef 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e036      	b.n	800615e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	3302      	adds	r3, #2
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e007      	b.n	800611e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	3301      	adds	r3, #1
 800611c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1cf      	bne.n	80060d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2200      	movs	r2, #0
 800613e:	2140      	movs	r1, #64	; 0x40
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fabf 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e006      	b.n	800615e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b0ba      	sub	sp, #232	; 0xe8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800618e:	2300      	movs	r3, #0
 8006190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006194:	2300      	movs	r3, #0
 8006196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_UART_IRQHandler+0x66>
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fbc9 	bl	800695e <UART_Receive_IT>
      return;
 80061cc:	e256      	b.n	800667c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80de 	beq.w	8006394 <HAL_UART_IRQHandler+0x22c>
 80061d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80d1 	beq.w	8006394 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <HAL_UART_IRQHandler+0xae>
 80061fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	f043 0201 	orr.w	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <HAL_UART_IRQHandler+0xd2>
 8006222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f043 0202 	orr.w	r2, r3, #2
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <HAL_UART_IRQHandler+0xf6>
 8006246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0204 	orr.w	r2, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d011      	beq.n	800628e <HAL_UART_IRQHandler+0x126>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d105      	bne.n	8006282 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0208 	orr.w	r2, r3, #8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 81ed 	beq.w	8006672 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <HAL_UART_IRQHandler+0x14e>
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fb54 	bl	800695e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <HAL_UART_IRQHandler+0x17a>
 80062da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d04f      	beq.n	8006382 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa5c 	bl	80067a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d141      	bne.n	800637a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3314      	adds	r3, #20
 80062fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800630c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3314      	adds	r3, #20
 800631e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006322:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800632e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800633a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1d9      	bne.n	80062f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	2b00      	cmp	r3, #0
 8006348:	d013      	beq.n	8006372 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	4a7d      	ldr	r2, [pc, #500]	; (8006544 <HAL_UART_IRQHandler+0x3dc>)
 8006350:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd f8c5 	bl	80034e6 <HAL_DMA_Abort_IT>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d016      	beq.n	8006390 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	e00e      	b.n	8006390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f990 	bl	8006698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	e00a      	b.n	8006390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f98c 	bl	8006698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e006      	b.n	8006390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f988 	bl	8006698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800638e:	e170      	b.n	8006672 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	bf00      	nop
    return;
 8006392:	e16e      	b.n	8006672 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	2b01      	cmp	r3, #1
 800639a:	f040 814a 	bne.w	8006632 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8143 	beq.w	8006632 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 813c 	beq.w	8006632 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	f040 80b4 	bne.w	8006548 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8140 	beq.w	8006676 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063fe:	429a      	cmp	r2, r3
 8006400:	f080 8139 	bcs.w	8006676 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800640a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	f000 8088 	beq.w	800652a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	330c      	adds	r3, #12
 8006420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	330c      	adds	r3, #12
 8006442:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800644a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006452:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800645e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1d9      	bne.n	800641a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800648a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800648e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006492:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800649c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e1      	bne.n	8006466 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e3      	bne.n	80064a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fa:	f023 0310 	bic.w	r3, r3, #16
 80064fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800650c:	65ba      	str	r2, [r7, #88]	; 0x58
 800650e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800651a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e3      	bne.n	80064e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	4618      	mov	r0, r3
 8006526:	f7fc ff6e 	bl	8003406 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006532:	b29b      	uxth	r3, r3
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8b6 	bl	80066ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006540:	e099      	b.n	8006676 <HAL_UART_IRQHandler+0x50e>
 8006542:	bf00      	nop
 8006544:	08006867 	.word	0x08006867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006550:	b29b      	uxth	r3, r3
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 808b 	beq.w	800667a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8086 	beq.w	800667a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	330c      	adds	r3, #12
 800658e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006592:	647a      	str	r2, [r7, #68]	; 0x44
 8006594:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e3      	bne.n	800656e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	623b      	str	r3, [r7, #32]
   return(result);
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3314      	adds	r3, #20
 80065c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065ca:	633a      	str	r2, [r7, #48]	; 0x30
 80065cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e3      	bne.n	80065a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0310 	bic.w	r3, r3, #16
 8006602:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006610:	61fa      	str	r2, [r7, #28]
 8006612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	69b9      	ldr	r1, [r7, #24]
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	617b      	str	r3, [r7, #20]
   return(result);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e3      	bne.n	80065ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f83e 	bl	80066ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006630:	e023      	b.n	800667a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_UART_IRQHandler+0x4ea>
 800663e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f91f 	bl	800688e <UART_Transmit_IT>
    return;
 8006650:	e014      	b.n	800667c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00e      	beq.n	800667c <HAL_UART_IRQHandler+0x514>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f95f 	bl	800692e <UART_EndTransmit_IT>
    return;
 8006670:	e004      	b.n	800667c <HAL_UART_IRQHandler+0x514>
    return;
 8006672:	bf00      	nop
 8006674:	e002      	b.n	800667c <HAL_UART_IRQHandler+0x514>
      return;
 8006676:	bf00      	nop
 8006678:	e000      	b.n	800667c <HAL_UART_IRQHandler+0x514>
      return;
 800667a:	bf00      	nop
  }
}
 800667c:	37e8      	adds	r7, #232	; 0xe8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop

08006684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b090      	sub	sp, #64	; 0x40
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	e050      	b.n	8006778 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066dc:	d04c      	beq.n	8006778 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80066e4:	f7fc f96c 	bl	80029c0 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d241      	bcs.n	8006778 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006714:	637a      	str	r2, [r7, #52]	; 0x34
 8006716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800671a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e5      	bne.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	613b      	str	r3, [r7, #16]
   return(result);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 0301 	bic.w	r3, r3, #1
 800673e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006748:	623a      	str	r2, [r7, #32]
 800674a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	69f9      	ldr	r1, [r7, #28]
 800674e:	6a3a      	ldr	r2, [r7, #32]
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	61bb      	str	r3, [r7, #24]
   return(result);
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e5      	bne.n	8006728 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e00f      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	429a      	cmp	r2, r3
 8006794:	d09f      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3740      	adds	r7, #64	; 0x40
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b095      	sub	sp, #84	; 0x54
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	330c      	adds	r3, #12
 80067c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067c8:	643a      	str	r2, [r7, #64]	; 0x40
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e5      	bne.n	80067a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3314      	adds	r3, #20
 80067fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e5      	bne.n	80067dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	2b01      	cmp	r3, #1
 8006816:	d119      	bne.n	800684c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60bb      	str	r3, [r7, #8]
   return(result);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006838:	61ba      	str	r2, [r7, #24]
 800683a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	613b      	str	r3, [r7, #16]
   return(result);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e5      	bne.n	8006818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
}
 800685a:	bf00      	nop
 800685c:	3754      	adds	r7, #84	; 0x54
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff ff09 	bl	8006698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b21      	cmp	r3, #33	; 0x21
 80068a0:	d13e      	bne.n	8006920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d114      	bne.n	80068d6 <UART_Transmit_IT+0x48>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d110      	bne.n	80068d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	621a      	str	r2, [r3, #32]
 80068d4:	e008      	b.n	80068e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6211      	str	r1, [r2, #32]
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4619      	mov	r1, r3
 80068f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10f      	bne.n	800691c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800690a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
  }
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff fe98 	bl	8006684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08c      	sub	sp, #48	; 0x30
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b22      	cmp	r3, #34	; 0x22
 8006970:	f040 80ab 	bne.w	8006aca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d117      	bne.n	80069ae <UART_Receive_IT+0x50>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d113      	bne.n	80069ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699c:	b29a      	uxth	r2, r3
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
 80069ac:	e026      	b.n	80069fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d007      	beq.n	80069d2 <UART_Receive_IT+0x74>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <UART_Receive_IT+0x82>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	e008      	b.n	80069f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d15a      	bne.n	8006ac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0220 	bic.w	r2, r2, #32
 8006a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d135      	bne.n	8006abc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	613b      	str	r3, [r7, #16]
   return(result);
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f023 0310 	bic.w	r3, r3, #16
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	623a      	str	r2, [r7, #32]
 8006a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	69f9      	ldr	r1, [r7, #28]
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d10a      	bne.n	8006aae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff fdf9 	bl	80066ac <HAL_UARTEx_RxEventCallback>
 8006aba:	e002      	b.n	8006ac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7fa fe8b 	bl	80017d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e002      	b.n	8006acc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e000      	b.n	8006acc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
  }
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3730      	adds	r7, #48	; 0x30
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	b09f      	sub	sp, #124	; 0x7c
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	68d9      	ldr	r1, [r3, #12]
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	ea40 0301 	orr.w	r3, r0, r1
 8006af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b18:	f021 010c 	bic.w	r1, r1, #12
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b22:	430b      	orrs	r3, r1
 8006b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	6999      	ldr	r1, [r3, #24]
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	ea40 0301 	orr.w	r3, r0, r1
 8006b3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4bc5      	ldr	r3, [pc, #788]	; (8006e58 <UART_SetConfig+0x384>)
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d004      	beq.n	8006b52 <UART_SetConfig+0x7e>
 8006b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	4bc3      	ldr	r3, [pc, #780]	; (8006e5c <UART_SetConfig+0x388>)
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d103      	bne.n	8006b5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b52:	f7fe faaf 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8006b56:	6778      	str	r0, [r7, #116]	; 0x74
 8006b58:	e002      	b.n	8006b60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b5a:	f7fe fa97 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8006b5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	f040 80b6 	bne.w	8006cd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6e:	461c      	mov	r4, r3
 8006b70:	f04f 0500 	mov.w	r5, #0
 8006b74:	4622      	mov	r2, r4
 8006b76:	462b      	mov	r3, r5
 8006b78:	1891      	adds	r1, r2, r2
 8006b7a:	6439      	str	r1, [r7, #64]	; 0x40
 8006b7c:	415b      	adcs	r3, r3
 8006b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b84:	1912      	adds	r2, r2, r4
 8006b86:	eb45 0303 	adc.w	r3, r5, r3
 8006b8a:	f04f 0000 	mov.w	r0, #0
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	00d9      	lsls	r1, r3, #3
 8006b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b98:	00d0      	lsls	r0, r2, #3
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	1911      	adds	r1, r2, r4
 8006ba0:	6639      	str	r1, [r7, #96]	; 0x60
 8006ba2:	416b      	adcs	r3, r5
 8006ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	1891      	adds	r1, r2, r2
 8006bb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bb4:	415b      	adcs	r3, r3
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006bc0:	f7f9 ffee 	bl	8000ba0 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4ba5      	ldr	r3, [pc, #660]	; (8006e60 <UART_SetConfig+0x38c>)
 8006bca:	fba3 2302 	umull	r2, r3, r3, r2
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	011e      	lsls	r6, r3, #4
 8006bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd4:	461c      	mov	r4, r3
 8006bd6:	f04f 0500 	mov.w	r5, #0
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	6339      	str	r1, [r7, #48]	; 0x30
 8006be2:	415b      	adcs	r3, r3
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
 8006be6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bea:	1912      	adds	r2, r2, r4
 8006bec:	eb45 0303 	adc.w	r3, r5, r3
 8006bf0:	f04f 0000 	mov.w	r0, #0
 8006bf4:	f04f 0100 	mov.w	r1, #0
 8006bf8:	00d9      	lsls	r1, r3, #3
 8006bfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bfe:	00d0      	lsls	r0, r2, #3
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	1911      	adds	r1, r2, r4
 8006c06:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c08:	416b      	adcs	r3, r5
 8006c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	461a      	mov	r2, r3
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	1891      	adds	r1, r2, r2
 8006c18:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c1a:	415b      	adcs	r3, r3
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c26:	f7f9 ffbb 	bl	8000ba0 <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4b8c      	ldr	r3, [pc, #560]	; (8006e60 <UART_SetConfig+0x38c>)
 8006c30:	fba3 1302 	umull	r1, r3, r3, r2
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	2164      	movs	r1, #100	; 0x64
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	3332      	adds	r3, #50	; 0x32
 8006c42:	4a87      	ldr	r2, [pc, #540]	; (8006e60 <UART_SetConfig+0x38c>)
 8006c44:	fba2 2303 	umull	r2, r3, r2, r3
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c50:	441e      	add	r6, r3
 8006c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c54:	4618      	mov	r0, r3
 8006c56:	f04f 0100 	mov.w	r1, #0
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	1894      	adds	r4, r2, r2
 8006c60:	623c      	str	r4, [r7, #32]
 8006c62:	415b      	adcs	r3, r3
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
 8006c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c6a:	1812      	adds	r2, r2, r0
 8006c6c:	eb41 0303 	adc.w	r3, r1, r3
 8006c70:	f04f 0400 	mov.w	r4, #0
 8006c74:	f04f 0500 	mov.w	r5, #0
 8006c78:	00dd      	lsls	r5, r3, #3
 8006c7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c7e:	00d4      	lsls	r4, r2, #3
 8006c80:	4622      	mov	r2, r4
 8006c82:	462b      	mov	r3, r5
 8006c84:	1814      	adds	r4, r2, r0
 8006c86:	653c      	str	r4, [r7, #80]	; 0x50
 8006c88:	414b      	adcs	r3, r1
 8006c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	1891      	adds	r1, r2, r2
 8006c98:	61b9      	str	r1, [r7, #24]
 8006c9a:	415b      	adcs	r3, r3
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ca2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ca6:	f7f9 ff7b 	bl	8000ba0 <__aeabi_uldivmod>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4b6c      	ldr	r3, [pc, #432]	; (8006e60 <UART_SetConfig+0x38c>)
 8006cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	2164      	movs	r1, #100	; 0x64
 8006cb8:	fb01 f303 	mul.w	r3, r1, r3
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	3332      	adds	r3, #50	; 0x32
 8006cc2:	4a67      	ldr	r2, [pc, #412]	; (8006e60 <UART_SetConfig+0x38c>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	f003 0207 	and.w	r2, r3, #7
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4432      	add	r2, r6
 8006cd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cd6:	e0b9      	b.n	8006e4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cda:	461c      	mov	r4, r3
 8006cdc:	f04f 0500 	mov.w	r5, #0
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	1891      	adds	r1, r2, r2
 8006ce6:	6139      	str	r1, [r7, #16]
 8006ce8:	415b      	adcs	r3, r3
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cf0:	1912      	adds	r2, r2, r4
 8006cf2:	eb45 0303 	adc.w	r3, r5, r3
 8006cf6:	f04f 0000 	mov.w	r0, #0
 8006cfa:	f04f 0100 	mov.w	r1, #0
 8006cfe:	00d9      	lsls	r1, r3, #3
 8006d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d04:	00d0      	lsls	r0, r2, #3
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	eb12 0804 	adds.w	r8, r2, r4
 8006d0e:	eb43 0905 	adc.w	r9, r3, r5
 8006d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f04f 0100 	mov.w	r1, #0
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	008b      	lsls	r3, r1, #2
 8006d26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d2a:	0082      	lsls	r2, r0, #2
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	4649      	mov	r1, r9
 8006d30:	f7f9 ff36 	bl	8000ba0 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4b49      	ldr	r3, [pc, #292]	; (8006e60 <UART_SetConfig+0x38c>)
 8006d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	011e      	lsls	r6, r3, #4
 8006d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d44:	4618      	mov	r0, r3
 8006d46:	f04f 0100 	mov.w	r1, #0
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	1894      	adds	r4, r2, r2
 8006d50:	60bc      	str	r4, [r7, #8]
 8006d52:	415b      	adcs	r3, r3
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d5a:	1812      	adds	r2, r2, r0
 8006d5c:	eb41 0303 	adc.w	r3, r1, r3
 8006d60:	f04f 0400 	mov.w	r4, #0
 8006d64:	f04f 0500 	mov.w	r5, #0
 8006d68:	00dd      	lsls	r5, r3, #3
 8006d6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d6e:	00d4      	lsls	r4, r2, #3
 8006d70:	4622      	mov	r2, r4
 8006d72:	462b      	mov	r3, r5
 8006d74:	1814      	adds	r4, r2, r0
 8006d76:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d78:	414b      	adcs	r3, r1
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f04f 0100 	mov.w	r1, #0
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	008b      	lsls	r3, r1, #2
 8006d90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d94:	0082      	lsls	r2, r0, #2
 8006d96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d9a:	f7f9 ff01 	bl	8000ba0 <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b2f      	ldr	r3, [pc, #188]	; (8006e60 <UART_SetConfig+0x38c>)
 8006da4:	fba3 1302 	umull	r1, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2164      	movs	r1, #100	; 0x64
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	3332      	adds	r3, #50	; 0x32
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <UART_SetConfig+0x38c>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc2:	441e      	add	r6, r3
 8006dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f04f 0100 	mov.w	r1, #0
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	1894      	adds	r4, r2, r2
 8006dd2:	603c      	str	r4, [r7, #0]
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ddc:	1812      	adds	r2, r2, r0
 8006dde:	eb41 0303 	adc.w	r3, r1, r3
 8006de2:	f04f 0400 	mov.w	r4, #0
 8006de6:	f04f 0500 	mov.w	r5, #0
 8006dea:	00dd      	lsls	r5, r3, #3
 8006dec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006df0:	00d4      	lsls	r4, r2, #3
 8006df2:	4622      	mov	r2, r4
 8006df4:	462b      	mov	r3, r5
 8006df6:	eb12 0a00 	adds.w	sl, r2, r0
 8006dfa:	eb43 0b01 	adc.w	fp, r3, r1
 8006dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f04f 0100 	mov.w	r1, #0
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	008b      	lsls	r3, r1, #2
 8006e12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e16:	0082      	lsls	r2, r0, #2
 8006e18:	4650      	mov	r0, sl
 8006e1a:	4659      	mov	r1, fp
 8006e1c:	f7f9 fec0 	bl	8000ba0 <__aeabi_uldivmod>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <UART_SetConfig+0x38c>)
 8006e26:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	2164      	movs	r1, #100	; 0x64
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	3332      	adds	r3, #50	; 0x32
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <UART_SetConfig+0x38c>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4432      	add	r2, r6
 8006e4a:	609a      	str	r2, [r3, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	377c      	adds	r7, #124	; 0x7c
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40011400 	.word	0x40011400
 8006e60:	51eb851f 	.word	0x51eb851f

08006e64 <__errno>:
 8006e64:	4b01      	ldr	r3, [pc, #4]	; (8006e6c <__errno+0x8>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000038 	.word	0x20000038

08006e70 <__libc_init_array>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	4d0d      	ldr	r5, [pc, #52]	; (8006ea8 <__libc_init_array+0x38>)
 8006e74:	4c0d      	ldr	r4, [pc, #52]	; (8006eac <__libc_init_array+0x3c>)
 8006e76:	1b64      	subs	r4, r4, r5
 8006e78:	10a4      	asrs	r4, r4, #2
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	42a6      	cmp	r6, r4
 8006e7e:	d109      	bne.n	8006e94 <__libc_init_array+0x24>
 8006e80:	4d0b      	ldr	r5, [pc, #44]	; (8006eb0 <__libc_init_array+0x40>)
 8006e82:	4c0c      	ldr	r4, [pc, #48]	; (8006eb4 <__libc_init_array+0x44>)
 8006e84:	f001 f89e 	bl	8007fc4 <_init>
 8006e88:	1b64      	subs	r4, r4, r5
 8006e8a:	10a4      	asrs	r4, r4, #2
 8006e8c:	2600      	movs	r6, #0
 8006e8e:	42a6      	cmp	r6, r4
 8006e90:	d105      	bne.n	8006e9e <__libc_init_array+0x2e>
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e98:	4798      	blx	r3
 8006e9a:	3601      	adds	r6, #1
 8006e9c:	e7ee      	b.n	8006e7c <__libc_init_array+0xc>
 8006e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea2:	4798      	blx	r3
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	e7f2      	b.n	8006e8e <__libc_init_array+0x1e>
 8006ea8:	08008090 	.word	0x08008090
 8006eac:	08008090 	.word	0x08008090
 8006eb0:	08008090 	.word	0x08008090
 8006eb4:	08008094 	.word	0x08008094

08006eb8 <memcpy>:
 8006eb8:	440a      	add	r2, r1
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ec0:	d100      	bne.n	8006ec4 <memcpy+0xc>
 8006ec2:	4770      	bx	lr
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	d1f9      	bne.n	8006ec6 <memcpy+0xe>
 8006ed2:	bd10      	pop	{r4, pc}

08006ed4 <memset>:
 8006ed4:	4402      	add	r2, r0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>
 8006ee4:	0000      	movs	r0, r0
	...

08006ee8 <ceil>:
 8006ee8:	ec51 0b10 	vmov	r0, r1, d0
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006ef4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006ef8:	2e13      	cmp	r6, #19
 8006efa:	ee10 5a10 	vmov	r5, s0
 8006efe:	ee10 8a10 	vmov	r8, s0
 8006f02:	460c      	mov	r4, r1
 8006f04:	dc30      	bgt.n	8006f68 <ceil+0x80>
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	da12      	bge.n	8006f30 <ceil+0x48>
 8006f0a:	a335      	add	r3, pc, #212	; (adr r3, 8006fe0 <ceil+0xf8>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 f968 	bl	80001e4 <__adddf3>
 8006f14:	2200      	movs	r2, #0
 8006f16:	2300      	movs	r3, #0
 8006f18:	f7f9 fdaa 	bl	8000a70 <__aeabi_dcmpgt>
 8006f1c:	b128      	cbz	r0, 8006f2a <ceil+0x42>
 8006f1e:	2c00      	cmp	r4, #0
 8006f20:	db55      	blt.n	8006fce <ceil+0xe6>
 8006f22:	432c      	orrs	r4, r5
 8006f24:	d057      	beq.n	8006fd6 <ceil+0xee>
 8006f26:	4c30      	ldr	r4, [pc, #192]	; (8006fe8 <ceil+0x100>)
 8006f28:	2500      	movs	r5, #0
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e025      	b.n	8006f7c <ceil+0x94>
 8006f30:	4f2e      	ldr	r7, [pc, #184]	; (8006fec <ceil+0x104>)
 8006f32:	4137      	asrs	r7, r6
 8006f34:	ea01 0307 	and.w	r3, r1, r7
 8006f38:	4303      	orrs	r3, r0
 8006f3a:	d01f      	beq.n	8006f7c <ceil+0x94>
 8006f3c:	a328      	add	r3, pc, #160	; (adr r3, 8006fe0 <ceil+0xf8>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f94f 	bl	80001e4 <__adddf3>
 8006f46:	2200      	movs	r2, #0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f7f9 fd91 	bl	8000a70 <__aeabi_dcmpgt>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0eb      	beq.n	8006f2a <ceil+0x42>
 8006f52:	2c00      	cmp	r4, #0
 8006f54:	bfc2      	ittt	gt
 8006f56:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006f5a:	fa43 f606 	asrgt.w	r6, r3, r6
 8006f5e:	19a4      	addgt	r4, r4, r6
 8006f60:	ea24 0407 	bic.w	r4, r4, r7
 8006f64:	2500      	movs	r5, #0
 8006f66:	e7e0      	b.n	8006f2a <ceil+0x42>
 8006f68:	2e33      	cmp	r6, #51	; 0x33
 8006f6a:	dd0b      	ble.n	8006f84 <ceil+0x9c>
 8006f6c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f70:	d104      	bne.n	8006f7c <ceil+0x94>
 8006f72:	ee10 2a10 	vmov	r2, s0
 8006f76:	460b      	mov	r3, r1
 8006f78:	f7f9 f934 	bl	80001e4 <__adddf3>
 8006f7c:	ec41 0b10 	vmov	d0, r0, r1
 8006f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f8c:	fa23 f707 	lsr.w	r7, r3, r7
 8006f90:	4207      	tst	r7, r0
 8006f92:	d0f3      	beq.n	8006f7c <ceil+0x94>
 8006f94:	a312      	add	r3, pc, #72	; (adr r3, 8006fe0 <ceil+0xf8>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 f923 	bl	80001e4 <__adddf3>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f7f9 fd65 	bl	8000a70 <__aeabi_dcmpgt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d0bf      	beq.n	8006f2a <ceil+0x42>
 8006faa:	2c00      	cmp	r4, #0
 8006fac:	dd02      	ble.n	8006fb4 <ceil+0xcc>
 8006fae:	2e14      	cmp	r6, #20
 8006fb0:	d103      	bne.n	8006fba <ceil+0xd2>
 8006fb2:	3401      	adds	r4, #1
 8006fb4:	ea25 0507 	bic.w	r5, r5, r7
 8006fb8:	e7b7      	b.n	8006f2a <ceil+0x42>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006fc0:	fa03 f606 	lsl.w	r6, r3, r6
 8006fc4:	4435      	add	r5, r6
 8006fc6:	4545      	cmp	r5, r8
 8006fc8:	bf38      	it	cc
 8006fca:	18e4      	addcc	r4, r4, r3
 8006fcc:	e7f2      	b.n	8006fb4 <ceil+0xcc>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006fd4:	e7a9      	b.n	8006f2a <ceil+0x42>
 8006fd6:	4625      	mov	r5, r4
 8006fd8:	e7a7      	b.n	8006f2a <ceil+0x42>
 8006fda:	bf00      	nop
 8006fdc:	f3af 8000 	nop.w
 8006fe0:	8800759c 	.word	0x8800759c
 8006fe4:	7e37e43c 	.word	0x7e37e43c
 8006fe8:	3ff00000 	.word	0x3ff00000
 8006fec:	000fffff 	.word	0x000fffff

08006ff0 <pow>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	ec59 8b10 	vmov	r8, r9, d0
 8006ff8:	ec57 6b11 	vmov	r6, r7, d1
 8006ffc:	f000 f8dc 	bl	80071b8 <__ieee754_pow>
 8007000:	4b4e      	ldr	r3, [pc, #312]	; (800713c <pow+0x14c>)
 8007002:	f993 3000 	ldrsb.w	r3, [r3]
 8007006:	3301      	adds	r3, #1
 8007008:	ec55 4b10 	vmov	r4, r5, d0
 800700c:	d015      	beq.n	800703a <pow+0x4a>
 800700e:	4632      	mov	r2, r6
 8007010:	463b      	mov	r3, r7
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7f9 fd35 	bl	8000a84 <__aeabi_dcmpun>
 800701a:	b970      	cbnz	r0, 800703a <pow+0x4a>
 800701c:	4642      	mov	r2, r8
 800701e:	464b      	mov	r3, r9
 8007020:	4640      	mov	r0, r8
 8007022:	4649      	mov	r1, r9
 8007024:	f7f9 fd2e 	bl	8000a84 <__aeabi_dcmpun>
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	b148      	cbz	r0, 8007042 <pow+0x52>
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 fcf5 	bl	8000a20 <__aeabi_dcmpeq>
 8007036:	2800      	cmp	r0, #0
 8007038:	d17d      	bne.n	8007136 <pow+0x146>
 800703a:	ec45 4b10 	vmov	d0, r4, r5
 800703e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007042:	4640      	mov	r0, r8
 8007044:	4649      	mov	r1, r9
 8007046:	f7f9 fceb 	bl	8000a20 <__aeabi_dcmpeq>
 800704a:	b1e0      	cbz	r0, 8007086 <pow+0x96>
 800704c:	2200      	movs	r2, #0
 800704e:	2300      	movs	r3, #0
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 fce4 	bl	8000a20 <__aeabi_dcmpeq>
 8007058:	2800      	cmp	r0, #0
 800705a:	d16c      	bne.n	8007136 <pow+0x146>
 800705c:	ec47 6b10 	vmov	d0, r6, r7
 8007060:	f000 fe89 	bl	8007d76 <finite>
 8007064:	2800      	cmp	r0, #0
 8007066:	d0e8      	beq.n	800703a <pow+0x4a>
 8007068:	2200      	movs	r2, #0
 800706a:	2300      	movs	r3, #0
 800706c:	4630      	mov	r0, r6
 800706e:	4639      	mov	r1, r7
 8007070:	f7f9 fce0 	bl	8000a34 <__aeabi_dcmplt>
 8007074:	2800      	cmp	r0, #0
 8007076:	d0e0      	beq.n	800703a <pow+0x4a>
 8007078:	f7ff fef4 	bl	8006e64 <__errno>
 800707c:	2321      	movs	r3, #33	; 0x21
 800707e:	6003      	str	r3, [r0, #0]
 8007080:	2400      	movs	r4, #0
 8007082:	4d2f      	ldr	r5, [pc, #188]	; (8007140 <pow+0x150>)
 8007084:	e7d9      	b.n	800703a <pow+0x4a>
 8007086:	ec45 4b10 	vmov	d0, r4, r5
 800708a:	f000 fe74 	bl	8007d76 <finite>
 800708e:	bbb8      	cbnz	r0, 8007100 <pow+0x110>
 8007090:	ec49 8b10 	vmov	d0, r8, r9
 8007094:	f000 fe6f 	bl	8007d76 <finite>
 8007098:	b390      	cbz	r0, 8007100 <pow+0x110>
 800709a:	ec47 6b10 	vmov	d0, r6, r7
 800709e:	f000 fe6a 	bl	8007d76 <finite>
 80070a2:	b368      	cbz	r0, 8007100 <pow+0x110>
 80070a4:	4622      	mov	r2, r4
 80070a6:	462b      	mov	r3, r5
 80070a8:	4620      	mov	r0, r4
 80070aa:	4629      	mov	r1, r5
 80070ac:	f7f9 fcea 	bl	8000a84 <__aeabi_dcmpun>
 80070b0:	b160      	cbz	r0, 80070cc <pow+0xdc>
 80070b2:	f7ff fed7 	bl	8006e64 <__errno>
 80070b6:	2321      	movs	r3, #33	; 0x21
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	f7f9 fb6f 	bl	80007a4 <__aeabi_ddiv>
 80070c6:	4604      	mov	r4, r0
 80070c8:	460d      	mov	r5, r1
 80070ca:	e7b6      	b.n	800703a <pow+0x4a>
 80070cc:	f7ff feca 	bl	8006e64 <__errno>
 80070d0:	2322      	movs	r3, #34	; 0x22
 80070d2:	6003      	str	r3, [r0, #0]
 80070d4:	2200      	movs	r2, #0
 80070d6:	2300      	movs	r3, #0
 80070d8:	4640      	mov	r0, r8
 80070da:	4649      	mov	r1, r9
 80070dc:	f7f9 fcaa 	bl	8000a34 <__aeabi_dcmplt>
 80070e0:	2400      	movs	r4, #0
 80070e2:	b158      	cbz	r0, 80070fc <pow+0x10c>
 80070e4:	ec47 6b10 	vmov	d0, r6, r7
 80070e8:	f000 fe5a 	bl	8007da0 <rint>
 80070ec:	4632      	mov	r2, r6
 80070ee:	ec51 0b10 	vmov	r0, r1, d0
 80070f2:	463b      	mov	r3, r7
 80070f4:	f7f9 fc94 	bl	8000a20 <__aeabi_dcmpeq>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d0c2      	beq.n	8007082 <pow+0x92>
 80070fc:	4d11      	ldr	r5, [pc, #68]	; (8007144 <pow+0x154>)
 80070fe:	e79c      	b.n	800703a <pow+0x4a>
 8007100:	2200      	movs	r2, #0
 8007102:	2300      	movs	r3, #0
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	f7f9 fc8a 	bl	8000a20 <__aeabi_dcmpeq>
 800710c:	2800      	cmp	r0, #0
 800710e:	d094      	beq.n	800703a <pow+0x4a>
 8007110:	ec49 8b10 	vmov	d0, r8, r9
 8007114:	f000 fe2f 	bl	8007d76 <finite>
 8007118:	2800      	cmp	r0, #0
 800711a:	d08e      	beq.n	800703a <pow+0x4a>
 800711c:	ec47 6b10 	vmov	d0, r6, r7
 8007120:	f000 fe29 	bl	8007d76 <finite>
 8007124:	2800      	cmp	r0, #0
 8007126:	d088      	beq.n	800703a <pow+0x4a>
 8007128:	f7ff fe9c 	bl	8006e64 <__errno>
 800712c:	2322      	movs	r3, #34	; 0x22
 800712e:	6003      	str	r3, [r0, #0]
 8007130:	2400      	movs	r4, #0
 8007132:	2500      	movs	r5, #0
 8007134:	e781      	b.n	800703a <pow+0x4a>
 8007136:	4d04      	ldr	r5, [pc, #16]	; (8007148 <pow+0x158>)
 8007138:	2400      	movs	r4, #0
 800713a:	e77e      	b.n	800703a <pow+0x4a>
 800713c:	2000009c 	.word	0x2000009c
 8007140:	fff00000 	.word	0xfff00000
 8007144:	7ff00000 	.word	0x7ff00000
 8007148:	3ff00000 	.word	0x3ff00000

0800714c <sqrt>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	ed2d 8b02 	vpush	{d8}
 8007152:	ec55 4b10 	vmov	r4, r5, d0
 8007156:	f000 fd51 	bl	8007bfc <__ieee754_sqrt>
 800715a:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <sqrt+0x64>)
 800715c:	eeb0 8a40 	vmov.f32	s16, s0
 8007160:	eef0 8a60 	vmov.f32	s17, s1
 8007164:	f993 3000 	ldrsb.w	r3, [r3]
 8007168:	3301      	adds	r3, #1
 800716a:	d019      	beq.n	80071a0 <sqrt+0x54>
 800716c:	4622      	mov	r2, r4
 800716e:	462b      	mov	r3, r5
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 fc86 	bl	8000a84 <__aeabi_dcmpun>
 8007178:	b990      	cbnz	r0, 80071a0 <sqrt+0x54>
 800717a:	2200      	movs	r2, #0
 800717c:	2300      	movs	r3, #0
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 fc57 	bl	8000a34 <__aeabi_dcmplt>
 8007186:	b158      	cbz	r0, 80071a0 <sqrt+0x54>
 8007188:	f7ff fe6c 	bl	8006e64 <__errno>
 800718c:	2321      	movs	r3, #33	; 0x21
 800718e:	6003      	str	r3, [r0, #0]
 8007190:	2200      	movs	r2, #0
 8007192:	2300      	movs	r3, #0
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	f7f9 fb04 	bl	80007a4 <__aeabi_ddiv>
 800719c:	ec41 0b18 	vmov	d8, r0, r1
 80071a0:	eeb0 0a48 	vmov.f32	s0, s16
 80071a4:	eef0 0a68 	vmov.f32	s1, s17
 80071a8:	ecbd 8b02 	vpop	{d8}
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
 80071ae:	bf00      	nop
 80071b0:	2000009c 	.word	0x2000009c
 80071b4:	00000000 	.word	0x00000000

080071b8 <__ieee754_pow>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	ed2d 8b06 	vpush	{d8-d10}
 80071c0:	b08d      	sub	sp, #52	; 0x34
 80071c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80071c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80071ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80071ce:	ea56 0100 	orrs.w	r1, r6, r0
 80071d2:	ec53 2b10 	vmov	r2, r3, d0
 80071d6:	f000 84d1 	beq.w	8007b7c <__ieee754_pow+0x9c4>
 80071da:	497f      	ldr	r1, [pc, #508]	; (80073d8 <__ieee754_pow+0x220>)
 80071dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80071e0:	428c      	cmp	r4, r1
 80071e2:	ee10 8a10 	vmov	r8, s0
 80071e6:	4699      	mov	r9, r3
 80071e8:	dc09      	bgt.n	80071fe <__ieee754_pow+0x46>
 80071ea:	d103      	bne.n	80071f4 <__ieee754_pow+0x3c>
 80071ec:	b97a      	cbnz	r2, 800720e <__ieee754_pow+0x56>
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	dd02      	ble.n	80071f8 <__ieee754_pow+0x40>
 80071f2:	e00c      	b.n	800720e <__ieee754_pow+0x56>
 80071f4:	428e      	cmp	r6, r1
 80071f6:	dc02      	bgt.n	80071fe <__ieee754_pow+0x46>
 80071f8:	428e      	cmp	r6, r1
 80071fa:	d110      	bne.n	800721e <__ieee754_pow+0x66>
 80071fc:	b178      	cbz	r0, 800721e <__ieee754_pow+0x66>
 80071fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007202:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007206:	ea54 0308 	orrs.w	r3, r4, r8
 800720a:	f000 84b7 	beq.w	8007b7c <__ieee754_pow+0x9c4>
 800720e:	4873      	ldr	r0, [pc, #460]	; (80073dc <__ieee754_pow+0x224>)
 8007210:	b00d      	add	sp, #52	; 0x34
 8007212:	ecbd 8b06 	vpop	{d8-d10}
 8007216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f000 bdb9 	b.w	8007d90 <nan>
 800721e:	f1b9 0f00 	cmp.w	r9, #0
 8007222:	da36      	bge.n	8007292 <__ieee754_pow+0xda>
 8007224:	496e      	ldr	r1, [pc, #440]	; (80073e0 <__ieee754_pow+0x228>)
 8007226:	428e      	cmp	r6, r1
 8007228:	dc51      	bgt.n	80072ce <__ieee754_pow+0x116>
 800722a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800722e:	428e      	cmp	r6, r1
 8007230:	f340 84af 	ble.w	8007b92 <__ieee754_pow+0x9da>
 8007234:	1531      	asrs	r1, r6, #20
 8007236:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800723a:	2914      	cmp	r1, #20
 800723c:	dd0f      	ble.n	800725e <__ieee754_pow+0xa6>
 800723e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007242:	fa20 fc01 	lsr.w	ip, r0, r1
 8007246:	fa0c f101 	lsl.w	r1, ip, r1
 800724a:	4281      	cmp	r1, r0
 800724c:	f040 84a1 	bne.w	8007b92 <__ieee754_pow+0x9da>
 8007250:	f00c 0c01 	and.w	ip, ip, #1
 8007254:	f1cc 0102 	rsb	r1, ip, #2
 8007258:	9100      	str	r1, [sp, #0]
 800725a:	b180      	cbz	r0, 800727e <__ieee754_pow+0xc6>
 800725c:	e059      	b.n	8007312 <__ieee754_pow+0x15a>
 800725e:	2800      	cmp	r0, #0
 8007260:	d155      	bne.n	800730e <__ieee754_pow+0x156>
 8007262:	f1c1 0114 	rsb	r1, r1, #20
 8007266:	fa46 fc01 	asr.w	ip, r6, r1
 800726a:	fa0c f101 	lsl.w	r1, ip, r1
 800726e:	42b1      	cmp	r1, r6
 8007270:	f040 848c 	bne.w	8007b8c <__ieee754_pow+0x9d4>
 8007274:	f00c 0c01 	and.w	ip, ip, #1
 8007278:	f1cc 0102 	rsb	r1, ip, #2
 800727c:	9100      	str	r1, [sp, #0]
 800727e:	4959      	ldr	r1, [pc, #356]	; (80073e4 <__ieee754_pow+0x22c>)
 8007280:	428e      	cmp	r6, r1
 8007282:	d12d      	bne.n	80072e0 <__ieee754_pow+0x128>
 8007284:	2f00      	cmp	r7, #0
 8007286:	da79      	bge.n	800737c <__ieee754_pow+0x1c4>
 8007288:	4956      	ldr	r1, [pc, #344]	; (80073e4 <__ieee754_pow+0x22c>)
 800728a:	2000      	movs	r0, #0
 800728c:	f7f9 fa8a 	bl	80007a4 <__aeabi_ddiv>
 8007290:	e016      	b.n	80072c0 <__ieee754_pow+0x108>
 8007292:	2100      	movs	r1, #0
 8007294:	9100      	str	r1, [sp, #0]
 8007296:	2800      	cmp	r0, #0
 8007298:	d13b      	bne.n	8007312 <__ieee754_pow+0x15a>
 800729a:	494f      	ldr	r1, [pc, #316]	; (80073d8 <__ieee754_pow+0x220>)
 800729c:	428e      	cmp	r6, r1
 800729e:	d1ee      	bne.n	800727e <__ieee754_pow+0xc6>
 80072a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80072a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80072a8:	ea53 0308 	orrs.w	r3, r3, r8
 80072ac:	f000 8466 	beq.w	8007b7c <__ieee754_pow+0x9c4>
 80072b0:	4b4d      	ldr	r3, [pc, #308]	; (80073e8 <__ieee754_pow+0x230>)
 80072b2:	429c      	cmp	r4, r3
 80072b4:	dd0d      	ble.n	80072d2 <__ieee754_pow+0x11a>
 80072b6:	2f00      	cmp	r7, #0
 80072b8:	f280 8464 	bge.w	8007b84 <__ieee754_pow+0x9cc>
 80072bc:	2000      	movs	r0, #0
 80072be:	2100      	movs	r1, #0
 80072c0:	ec41 0b10 	vmov	d0, r0, r1
 80072c4:	b00d      	add	sp, #52	; 0x34
 80072c6:	ecbd 8b06 	vpop	{d8-d10}
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	2102      	movs	r1, #2
 80072d0:	e7e0      	b.n	8007294 <__ieee754_pow+0xdc>
 80072d2:	2f00      	cmp	r7, #0
 80072d4:	daf2      	bge.n	80072bc <__ieee754_pow+0x104>
 80072d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80072da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80072de:	e7ef      	b.n	80072c0 <__ieee754_pow+0x108>
 80072e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80072e4:	d104      	bne.n	80072f0 <__ieee754_pow+0x138>
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f7f9 f931 	bl	8000550 <__aeabi_dmul>
 80072ee:	e7e7      	b.n	80072c0 <__ieee754_pow+0x108>
 80072f0:	493e      	ldr	r1, [pc, #248]	; (80073ec <__ieee754_pow+0x234>)
 80072f2:	428f      	cmp	r7, r1
 80072f4:	d10d      	bne.n	8007312 <__ieee754_pow+0x15a>
 80072f6:	f1b9 0f00 	cmp.w	r9, #0
 80072fa:	db0a      	blt.n	8007312 <__ieee754_pow+0x15a>
 80072fc:	ec43 2b10 	vmov	d0, r2, r3
 8007300:	b00d      	add	sp, #52	; 0x34
 8007302:	ecbd 8b06 	vpop	{d8-d10}
 8007306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	f000 bc77 	b.w	8007bfc <__ieee754_sqrt>
 800730e:	2100      	movs	r1, #0
 8007310:	9100      	str	r1, [sp, #0]
 8007312:	ec43 2b10 	vmov	d0, r2, r3
 8007316:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800731a:	f000 fd23 	bl	8007d64 <fabs>
 800731e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007322:	ec51 0b10 	vmov	r0, r1, d0
 8007326:	f1b8 0f00 	cmp.w	r8, #0
 800732a:	d12a      	bne.n	8007382 <__ieee754_pow+0x1ca>
 800732c:	b12c      	cbz	r4, 800733a <__ieee754_pow+0x182>
 800732e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80073e4 <__ieee754_pow+0x22c>
 8007332:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007336:	45e6      	cmp	lr, ip
 8007338:	d123      	bne.n	8007382 <__ieee754_pow+0x1ca>
 800733a:	2f00      	cmp	r7, #0
 800733c:	da05      	bge.n	800734a <__ieee754_pow+0x192>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	2000      	movs	r0, #0
 8007344:	4927      	ldr	r1, [pc, #156]	; (80073e4 <__ieee754_pow+0x22c>)
 8007346:	f7f9 fa2d 	bl	80007a4 <__aeabi_ddiv>
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	dab7      	bge.n	80072c0 <__ieee754_pow+0x108>
 8007350:	9b00      	ldr	r3, [sp, #0]
 8007352:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007356:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800735a:	4323      	orrs	r3, r4
 800735c:	d108      	bne.n	8007370 <__ieee754_pow+0x1b8>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4610      	mov	r0, r2
 8007364:	4619      	mov	r1, r3
 8007366:	f7f8 ff3b 	bl	80001e0 <__aeabi_dsub>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	e78d      	b.n	800728c <__ieee754_pow+0xd4>
 8007370:	9b00      	ldr	r3, [sp, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d1a4      	bne.n	80072c0 <__ieee754_pow+0x108>
 8007376:	4602      	mov	r2, r0
 8007378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800737c:	4610      	mov	r0, r2
 800737e:	4619      	mov	r1, r3
 8007380:	e79e      	b.n	80072c0 <__ieee754_pow+0x108>
 8007382:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007386:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800738a:	950a      	str	r5, [sp, #40]	; 0x28
 800738c:	9d00      	ldr	r5, [sp, #0]
 800738e:	46ac      	mov	ip, r5
 8007390:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007392:	ea5c 0505 	orrs.w	r5, ip, r5
 8007396:	d0e4      	beq.n	8007362 <__ieee754_pow+0x1aa>
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <__ieee754_pow+0x238>)
 800739a:	429e      	cmp	r6, r3
 800739c:	f340 80fc 	ble.w	8007598 <__ieee754_pow+0x3e0>
 80073a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80073a4:	429e      	cmp	r6, r3
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <__ieee754_pow+0x230>)
 80073a8:	dd07      	ble.n	80073ba <__ieee754_pow+0x202>
 80073aa:	429c      	cmp	r4, r3
 80073ac:	dc0a      	bgt.n	80073c4 <__ieee754_pow+0x20c>
 80073ae:	2f00      	cmp	r7, #0
 80073b0:	da84      	bge.n	80072bc <__ieee754_pow+0x104>
 80073b2:	a307      	add	r3, pc, #28	; (adr r3, 80073d0 <__ieee754_pow+0x218>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	e795      	b.n	80072e6 <__ieee754_pow+0x12e>
 80073ba:	429c      	cmp	r4, r3
 80073bc:	dbf7      	blt.n	80073ae <__ieee754_pow+0x1f6>
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <__ieee754_pow+0x22c>)
 80073c0:	429c      	cmp	r4, r3
 80073c2:	dd17      	ble.n	80073f4 <__ieee754_pow+0x23c>
 80073c4:	2f00      	cmp	r7, #0
 80073c6:	dcf4      	bgt.n	80073b2 <__ieee754_pow+0x1fa>
 80073c8:	e778      	b.n	80072bc <__ieee754_pow+0x104>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	8800759c 	.word	0x8800759c
 80073d4:	7e37e43c 	.word	0x7e37e43c
 80073d8:	7ff00000 	.word	0x7ff00000
 80073dc:	08008044 	.word	0x08008044
 80073e0:	433fffff 	.word	0x433fffff
 80073e4:	3ff00000 	.word	0x3ff00000
 80073e8:	3fefffff 	.word	0x3fefffff
 80073ec:	3fe00000 	.word	0x3fe00000
 80073f0:	41e00000 	.word	0x41e00000
 80073f4:	4b64      	ldr	r3, [pc, #400]	; (8007588 <__ieee754_pow+0x3d0>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	f7f8 fef2 	bl	80001e0 <__aeabi_dsub>
 80073fc:	a356      	add	r3, pc, #344	; (adr r3, 8007558 <__ieee754_pow+0x3a0>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	f7f9 f8a3 	bl	8000550 <__aeabi_dmul>
 800740a:	a355      	add	r3, pc, #340	; (adr r3, 8007560 <__ieee754_pow+0x3a8>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	4606      	mov	r6, r0
 8007412:	460f      	mov	r7, r1
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f9 f89a 	bl	8000550 <__aeabi_dmul>
 800741c:	4b5b      	ldr	r3, [pc, #364]	; (800758c <__ieee754_pow+0x3d4>)
 800741e:	4682      	mov	sl, r0
 8007420:	468b      	mov	fp, r1
 8007422:	2200      	movs	r2, #0
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f7f9 f892 	bl	8000550 <__aeabi_dmul>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	a14d      	add	r1, pc, #308	; (adr r1, 8007568 <__ieee754_pow+0x3b0>)
 8007432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007436:	f7f8 fed3 	bl	80001e0 <__aeabi_dsub>
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	f7f9 f887 	bl	8000550 <__aeabi_dmul>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	2000      	movs	r0, #0
 8007448:	4951      	ldr	r1, [pc, #324]	; (8007590 <__ieee754_pow+0x3d8>)
 800744a:	f7f8 fec9 	bl	80001e0 <__aeabi_dsub>
 800744e:	4622      	mov	r2, r4
 8007450:	4680      	mov	r8, r0
 8007452:	4689      	mov	r9, r1
 8007454:	462b      	mov	r3, r5
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 f879 	bl	8000550 <__aeabi_dmul>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f9 f873 	bl	8000550 <__aeabi_dmul>
 800746a:	a341      	add	r3, pc, #260	; (adr r3, 8007570 <__ieee754_pow+0x3b8>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f9 f86e 	bl	8000550 <__aeabi_dmul>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4650      	mov	r0, sl
 800747a:	4659      	mov	r1, fp
 800747c:	f7f8 feb0 	bl	80001e0 <__aeabi_dsub>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4680      	mov	r8, r0
 8007486:	4689      	mov	r9, r1
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f8 feaa 	bl	80001e4 <__adddf3>
 8007490:	2400      	movs	r4, #0
 8007492:	4632      	mov	r2, r6
 8007494:	463b      	mov	r3, r7
 8007496:	4620      	mov	r0, r4
 8007498:	460d      	mov	r5, r1
 800749a:	f7f8 fea1 	bl	80001e0 <__aeabi_dsub>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f8 fe9b 	bl	80001e0 <__aeabi_dsub>
 80074aa:	9b00      	ldr	r3, [sp, #0]
 80074ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ae:	3b01      	subs	r3, #1
 80074b0:	4313      	orrs	r3, r2
 80074b2:	4682      	mov	sl, r0
 80074b4:	468b      	mov	fp, r1
 80074b6:	f040 81f1 	bne.w	800789c <__ieee754_pow+0x6e4>
 80074ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007578 <__ieee754_pow+0x3c0>
 80074be:	eeb0 8a47 	vmov.f32	s16, s14
 80074c2:	eef0 8a67 	vmov.f32	s17, s15
 80074c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074ca:	2600      	movs	r6, #0
 80074cc:	4632      	mov	r2, r6
 80074ce:	463b      	mov	r3, r7
 80074d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d4:	f7f8 fe84 	bl	80001e0 <__aeabi_dsub>
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	f7f9 f838 	bl	8000550 <__aeabi_dmul>
 80074e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074e4:	4680      	mov	r8, r0
 80074e6:	4689      	mov	r9, r1
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	f7f9 f830 	bl	8000550 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4640      	mov	r0, r8
 80074f6:	4649      	mov	r1, r9
 80074f8:	f7f8 fe74 	bl	80001e4 <__adddf3>
 80074fc:	4632      	mov	r2, r6
 80074fe:	463b      	mov	r3, r7
 8007500:	4680      	mov	r8, r0
 8007502:	4689      	mov	r9, r1
 8007504:	4620      	mov	r0, r4
 8007506:	4629      	mov	r1, r5
 8007508:	f7f9 f822 	bl	8000550 <__aeabi_dmul>
 800750c:	460b      	mov	r3, r1
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	4602      	mov	r2, r0
 8007514:	4649      	mov	r1, r9
 8007516:	4640      	mov	r0, r8
 8007518:	f7f8 fe64 	bl	80001e4 <__adddf3>
 800751c:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <__ieee754_pow+0x3dc>)
 800751e:	4299      	cmp	r1, r3
 8007520:	ec45 4b19 	vmov	d9, r4, r5
 8007524:	4606      	mov	r6, r0
 8007526:	460f      	mov	r7, r1
 8007528:	468b      	mov	fp, r1
 800752a:	f340 82fe 	ble.w	8007b2a <__ieee754_pow+0x972>
 800752e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007532:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007536:	4303      	orrs	r3, r0
 8007538:	f000 81f0 	beq.w	800791c <__ieee754_pow+0x764>
 800753c:	a310      	add	r3, pc, #64	; (adr r3, 8007580 <__ieee754_pow+0x3c8>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	ec51 0b18 	vmov	r0, r1, d8
 8007546:	f7f9 f803 	bl	8000550 <__aeabi_dmul>
 800754a:	a30d      	add	r3, pc, #52	; (adr r3, 8007580 <__ieee754_pow+0x3c8>)
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	e6cb      	b.n	80072ea <__ieee754_pow+0x132>
 8007552:	bf00      	nop
 8007554:	f3af 8000 	nop.w
 8007558:	60000000 	.word	0x60000000
 800755c:	3ff71547 	.word	0x3ff71547
 8007560:	f85ddf44 	.word	0xf85ddf44
 8007564:	3e54ae0b 	.word	0x3e54ae0b
 8007568:	55555555 	.word	0x55555555
 800756c:	3fd55555 	.word	0x3fd55555
 8007570:	652b82fe 	.word	0x652b82fe
 8007574:	3ff71547 	.word	0x3ff71547
 8007578:	00000000 	.word	0x00000000
 800757c:	bff00000 	.word	0xbff00000
 8007580:	8800759c 	.word	0x8800759c
 8007584:	7e37e43c 	.word	0x7e37e43c
 8007588:	3ff00000 	.word	0x3ff00000
 800758c:	3fd00000 	.word	0x3fd00000
 8007590:	3fe00000 	.word	0x3fe00000
 8007594:	408fffff 	.word	0x408fffff
 8007598:	4bd7      	ldr	r3, [pc, #860]	; (80078f8 <__ieee754_pow+0x740>)
 800759a:	ea03 0309 	and.w	r3, r3, r9
 800759e:	2200      	movs	r2, #0
 80075a0:	b92b      	cbnz	r3, 80075ae <__ieee754_pow+0x3f6>
 80075a2:	4bd6      	ldr	r3, [pc, #856]	; (80078fc <__ieee754_pow+0x744>)
 80075a4:	f7f8 ffd4 	bl	8000550 <__aeabi_dmul>
 80075a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80075ac:	460c      	mov	r4, r1
 80075ae:	1523      	asrs	r3, r4, #20
 80075b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80075b4:	4413      	add	r3, r2
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	4bd1      	ldr	r3, [pc, #836]	; (8007900 <__ieee754_pow+0x748>)
 80075ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80075c2:	429c      	cmp	r4, r3
 80075c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80075c8:	dd08      	ble.n	80075dc <__ieee754_pow+0x424>
 80075ca:	4bce      	ldr	r3, [pc, #824]	; (8007904 <__ieee754_pow+0x74c>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	f340 8163 	ble.w	8007898 <__ieee754_pow+0x6e0>
 80075d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d4:	3301      	adds	r3, #1
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80075dc:	2400      	movs	r4, #0
 80075de:	00e3      	lsls	r3, r4, #3
 80075e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e2:	4bc9      	ldr	r3, [pc, #804]	; (8007908 <__ieee754_pow+0x750>)
 80075e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075e8:	ed93 7b00 	vldr	d7, [r3]
 80075ec:	4629      	mov	r1, r5
 80075ee:	ec53 2b17 	vmov	r2, r3, d7
 80075f2:	eeb0 8a47 	vmov.f32	s16, s14
 80075f6:	eef0 8a67 	vmov.f32	s17, s15
 80075fa:	4682      	mov	sl, r0
 80075fc:	f7f8 fdf0 	bl	80001e0 <__aeabi_dsub>
 8007600:	4652      	mov	r2, sl
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	462b      	mov	r3, r5
 8007608:	ec51 0b18 	vmov	r0, r1, d8
 800760c:	f7f8 fdea 	bl	80001e4 <__adddf3>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	2000      	movs	r0, #0
 8007616:	49bd      	ldr	r1, [pc, #756]	; (800790c <__ieee754_pow+0x754>)
 8007618:	f7f9 f8c4 	bl	80007a4 <__aeabi_ddiv>
 800761c:	ec41 0b19 	vmov	d9, r0, r1
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4630      	mov	r0, r6
 8007626:	4639      	mov	r1, r7
 8007628:	f7f8 ff92 	bl	8000550 <__aeabi_dmul>
 800762c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007634:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007638:	2300      	movs	r3, #0
 800763a:	9304      	str	r3, [sp, #16]
 800763c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007640:	46ab      	mov	fp, r5
 8007642:	106d      	asrs	r5, r5, #1
 8007644:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007648:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800764c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007650:	2200      	movs	r2, #0
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	4614      	mov	r4, r2
 8007658:	461d      	mov	r5, r3
 800765a:	f7f8 ff79 	bl	8000550 <__aeabi_dmul>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f8 fdbb 	bl	80001e0 <__aeabi_dsub>
 800766a:	ec53 2b18 	vmov	r2, r3, d8
 800766e:	4606      	mov	r6, r0
 8007670:	460f      	mov	r7, r1
 8007672:	4620      	mov	r0, r4
 8007674:	4629      	mov	r1, r5
 8007676:	f7f8 fdb3 	bl	80001e0 <__aeabi_dsub>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4650      	mov	r0, sl
 8007680:	4659      	mov	r1, fp
 8007682:	f7f8 fdad 	bl	80001e0 <__aeabi_dsub>
 8007686:	4642      	mov	r2, r8
 8007688:	464b      	mov	r3, r9
 800768a:	f7f8 ff61 	bl	8000550 <__aeabi_dmul>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4630      	mov	r0, r6
 8007694:	4639      	mov	r1, r7
 8007696:	f7f8 fda3 	bl	80001e0 <__aeabi_dsub>
 800769a:	ec53 2b19 	vmov	r2, r3, d9
 800769e:	f7f8 ff57 	bl	8000550 <__aeabi_dmul>
 80076a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076a6:	ec41 0b18 	vmov	d8, r0, r1
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7f8 ff4f 	bl	8000550 <__aeabi_dmul>
 80076b2:	a37d      	add	r3, pc, #500	; (adr r3, 80078a8 <__ieee754_pow+0x6f0>)
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	4604      	mov	r4, r0
 80076ba:	460d      	mov	r5, r1
 80076bc:	f7f8 ff48 	bl	8000550 <__aeabi_dmul>
 80076c0:	a37b      	add	r3, pc, #492	; (adr r3, 80078b0 <__ieee754_pow+0x6f8>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 fd8d 	bl	80001e4 <__adddf3>
 80076ca:	4622      	mov	r2, r4
 80076cc:	462b      	mov	r3, r5
 80076ce:	f7f8 ff3f 	bl	8000550 <__aeabi_dmul>
 80076d2:	a379      	add	r3, pc, #484	; (adr r3, 80078b8 <__ieee754_pow+0x700>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f8 fd84 	bl	80001e4 <__adddf3>
 80076dc:	4622      	mov	r2, r4
 80076de:	462b      	mov	r3, r5
 80076e0:	f7f8 ff36 	bl	8000550 <__aeabi_dmul>
 80076e4:	a376      	add	r3, pc, #472	; (adr r3, 80078c0 <__ieee754_pow+0x708>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fd7b 	bl	80001e4 <__adddf3>
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	f7f8 ff2d 	bl	8000550 <__aeabi_dmul>
 80076f6:	a374      	add	r3, pc, #464	; (adr r3, 80078c8 <__ieee754_pow+0x710>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fd72 	bl	80001e4 <__adddf3>
 8007700:	4622      	mov	r2, r4
 8007702:	462b      	mov	r3, r5
 8007704:	f7f8 ff24 	bl	8000550 <__aeabi_dmul>
 8007708:	a371      	add	r3, pc, #452	; (adr r3, 80078d0 <__ieee754_pow+0x718>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd69 	bl	80001e4 <__adddf3>
 8007712:	4622      	mov	r2, r4
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	462b      	mov	r3, r5
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f8 ff17 	bl	8000550 <__aeabi_dmul>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4630      	mov	r0, r6
 8007728:	4639      	mov	r1, r7
 800772a:	f7f8 ff11 	bl	8000550 <__aeabi_dmul>
 800772e:	4642      	mov	r2, r8
 8007730:	4604      	mov	r4, r0
 8007732:	460d      	mov	r5, r1
 8007734:	464b      	mov	r3, r9
 8007736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800773a:	f7f8 fd53 	bl	80001e4 <__adddf3>
 800773e:	ec53 2b18 	vmov	r2, r3, d8
 8007742:	f7f8 ff05 	bl	8000550 <__aeabi_dmul>
 8007746:	4622      	mov	r2, r4
 8007748:	462b      	mov	r3, r5
 800774a:	f7f8 fd4b 	bl	80001e4 <__adddf3>
 800774e:	4642      	mov	r2, r8
 8007750:	4682      	mov	sl, r0
 8007752:	468b      	mov	fp, r1
 8007754:	464b      	mov	r3, r9
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 fef9 	bl	8000550 <__aeabi_dmul>
 800775e:	4b6c      	ldr	r3, [pc, #432]	; (8007910 <__ieee754_pow+0x758>)
 8007760:	2200      	movs	r2, #0
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	f7f8 fd3d 	bl	80001e4 <__adddf3>
 800776a:	4652      	mov	r2, sl
 800776c:	465b      	mov	r3, fp
 800776e:	f7f8 fd39 	bl	80001e4 <__adddf3>
 8007772:	9c04      	ldr	r4, [sp, #16]
 8007774:	460d      	mov	r5, r1
 8007776:	4622      	mov	r2, r4
 8007778:	460b      	mov	r3, r1
 800777a:	4640      	mov	r0, r8
 800777c:	4649      	mov	r1, r9
 800777e:	f7f8 fee7 	bl	8000550 <__aeabi_dmul>
 8007782:	4b63      	ldr	r3, [pc, #396]	; (8007910 <__ieee754_pow+0x758>)
 8007784:	4680      	mov	r8, r0
 8007786:	4689      	mov	r9, r1
 8007788:	2200      	movs	r2, #0
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	f7f8 fd27 	bl	80001e0 <__aeabi_dsub>
 8007792:	4632      	mov	r2, r6
 8007794:	463b      	mov	r3, r7
 8007796:	f7f8 fd23 	bl	80001e0 <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4650      	mov	r0, sl
 80077a0:	4659      	mov	r1, fp
 80077a2:	f7f8 fd1d 	bl	80001e0 <__aeabi_dsub>
 80077a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077aa:	f7f8 fed1 	bl	8000550 <__aeabi_dmul>
 80077ae:	4622      	mov	r2, r4
 80077b0:	4606      	mov	r6, r0
 80077b2:	460f      	mov	r7, r1
 80077b4:	462b      	mov	r3, r5
 80077b6:	ec51 0b18 	vmov	r0, r1, d8
 80077ba:	f7f8 fec9 	bl	8000550 <__aeabi_dmul>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 fd0d 	bl	80001e4 <__adddf3>
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4640      	mov	r0, r8
 80077d4:	4649      	mov	r1, r9
 80077d6:	f7f8 fd05 	bl	80001e4 <__adddf3>
 80077da:	9c04      	ldr	r4, [sp, #16]
 80077dc:	a33e      	add	r3, pc, #248	; (adr r3, 80078d8 <__ieee754_pow+0x720>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	4620      	mov	r0, r4
 80077e4:	460d      	mov	r5, r1
 80077e6:	f7f8 feb3 	bl	8000550 <__aeabi_dmul>
 80077ea:	4642      	mov	r2, r8
 80077ec:	ec41 0b18 	vmov	d8, r0, r1
 80077f0:	464b      	mov	r3, r9
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f8 fcf3 	bl	80001e0 <__aeabi_dsub>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4630      	mov	r0, r6
 8007800:	4639      	mov	r1, r7
 8007802:	f7f8 fced 	bl	80001e0 <__aeabi_dsub>
 8007806:	a336      	add	r3, pc, #216	; (adr r3, 80078e0 <__ieee754_pow+0x728>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 fea0 	bl	8000550 <__aeabi_dmul>
 8007810:	a335      	add	r3, pc, #212	; (adr r3, 80078e8 <__ieee754_pow+0x730>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	4606      	mov	r6, r0
 8007818:	460f      	mov	r7, r1
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fe97 	bl	8000550 <__aeabi_dmul>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	f7f8 fcdb 	bl	80001e4 <__adddf3>
 800782e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007830:	4b38      	ldr	r3, [pc, #224]	; (8007914 <__ieee754_pow+0x75c>)
 8007832:	4413      	add	r3, r2
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fcd4 	bl	80001e4 <__adddf3>
 800783c:	4682      	mov	sl, r0
 800783e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007840:	468b      	mov	fp, r1
 8007842:	f7f8 fe1b 	bl	800047c <__aeabi_i2d>
 8007846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007848:	4b33      	ldr	r3, [pc, #204]	; (8007918 <__ieee754_pow+0x760>)
 800784a:	4413      	add	r3, r2
 800784c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	4652      	mov	r2, sl
 8007856:	465b      	mov	r3, fp
 8007858:	ec51 0b18 	vmov	r0, r1, d8
 800785c:	f7f8 fcc2 	bl	80001e4 <__adddf3>
 8007860:	4642      	mov	r2, r8
 8007862:	464b      	mov	r3, r9
 8007864:	f7f8 fcbe 	bl	80001e4 <__adddf3>
 8007868:	4632      	mov	r2, r6
 800786a:	463b      	mov	r3, r7
 800786c:	f7f8 fcba 	bl	80001e4 <__adddf3>
 8007870:	9c04      	ldr	r4, [sp, #16]
 8007872:	4632      	mov	r2, r6
 8007874:	463b      	mov	r3, r7
 8007876:	4620      	mov	r0, r4
 8007878:	460d      	mov	r5, r1
 800787a:	f7f8 fcb1 	bl	80001e0 <__aeabi_dsub>
 800787e:	4642      	mov	r2, r8
 8007880:	464b      	mov	r3, r9
 8007882:	f7f8 fcad 	bl	80001e0 <__aeabi_dsub>
 8007886:	ec53 2b18 	vmov	r2, r3, d8
 800788a:	f7f8 fca9 	bl	80001e0 <__aeabi_dsub>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4650      	mov	r0, sl
 8007894:	4659      	mov	r1, fp
 8007896:	e606      	b.n	80074a6 <__ieee754_pow+0x2ee>
 8007898:	2401      	movs	r4, #1
 800789a:	e6a0      	b.n	80075de <__ieee754_pow+0x426>
 800789c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80078f0 <__ieee754_pow+0x738>
 80078a0:	e60d      	b.n	80074be <__ieee754_pow+0x306>
 80078a2:	bf00      	nop
 80078a4:	f3af 8000 	nop.w
 80078a8:	4a454eef 	.word	0x4a454eef
 80078ac:	3fca7e28 	.word	0x3fca7e28
 80078b0:	93c9db65 	.word	0x93c9db65
 80078b4:	3fcd864a 	.word	0x3fcd864a
 80078b8:	a91d4101 	.word	0xa91d4101
 80078bc:	3fd17460 	.word	0x3fd17460
 80078c0:	518f264d 	.word	0x518f264d
 80078c4:	3fd55555 	.word	0x3fd55555
 80078c8:	db6fabff 	.word	0xdb6fabff
 80078cc:	3fdb6db6 	.word	0x3fdb6db6
 80078d0:	33333303 	.word	0x33333303
 80078d4:	3fe33333 	.word	0x3fe33333
 80078d8:	e0000000 	.word	0xe0000000
 80078dc:	3feec709 	.word	0x3feec709
 80078e0:	dc3a03fd 	.word	0xdc3a03fd
 80078e4:	3feec709 	.word	0x3feec709
 80078e8:	145b01f5 	.word	0x145b01f5
 80078ec:	be3e2fe0 	.word	0xbe3e2fe0
 80078f0:	00000000 	.word	0x00000000
 80078f4:	3ff00000 	.word	0x3ff00000
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	43400000 	.word	0x43400000
 8007900:	0003988e 	.word	0x0003988e
 8007904:	000bb679 	.word	0x000bb679
 8007908:	08008048 	.word	0x08008048
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	40080000 	.word	0x40080000
 8007914:	08008068 	.word	0x08008068
 8007918:	08008058 	.word	0x08008058
 800791c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007bf4 <__ieee754_pow+0xa3c>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f7f8 fc5d 	bl	80001e4 <__adddf3>
 800792a:	4622      	mov	r2, r4
 800792c:	ec41 0b1a 	vmov	d10, r0, r1
 8007930:	462b      	mov	r3, r5
 8007932:	4630      	mov	r0, r6
 8007934:	4639      	mov	r1, r7
 8007936:	f7f8 fc53 	bl	80001e0 <__aeabi_dsub>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	ec51 0b1a 	vmov	r0, r1, d10
 8007942:	f7f9 f895 	bl	8000a70 <__aeabi_dcmpgt>
 8007946:	2800      	cmp	r0, #0
 8007948:	f47f adf8 	bne.w	800753c <__ieee754_pow+0x384>
 800794c:	4aa4      	ldr	r2, [pc, #656]	; (8007be0 <__ieee754_pow+0xa28>)
 800794e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007952:	4293      	cmp	r3, r2
 8007954:	f340 810b 	ble.w	8007b6e <__ieee754_pow+0x9b6>
 8007958:	151b      	asrs	r3, r3, #20
 800795a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800795e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007962:	fa4a f303 	asr.w	r3, sl, r3
 8007966:	445b      	add	r3, fp
 8007968:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800796c:	4e9d      	ldr	r6, [pc, #628]	; (8007be4 <__ieee754_pow+0xa2c>)
 800796e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007972:	4116      	asrs	r6, r2
 8007974:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007978:	2000      	movs	r0, #0
 800797a:	ea23 0106 	bic.w	r1, r3, r6
 800797e:	f1c2 0214 	rsb	r2, r2, #20
 8007982:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007986:	fa4a fa02 	asr.w	sl, sl, r2
 800798a:	f1bb 0f00 	cmp.w	fp, #0
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4620      	mov	r0, r4
 8007994:	4629      	mov	r1, r5
 8007996:	bfb8      	it	lt
 8007998:	f1ca 0a00 	rsblt	sl, sl, #0
 800799c:	f7f8 fc20 	bl	80001e0 <__aeabi_dsub>
 80079a0:	ec41 0b19 	vmov	d9, r0, r1
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	ec51 0b19 	vmov	r0, r1, d9
 80079ac:	f7f8 fc1a 	bl	80001e4 <__adddf3>
 80079b0:	2400      	movs	r4, #0
 80079b2:	a379      	add	r3, pc, #484	; (adr r3, 8007b98 <__ieee754_pow+0x9e0>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	4620      	mov	r0, r4
 80079ba:	460d      	mov	r5, r1
 80079bc:	f7f8 fdc8 	bl	8000550 <__aeabi_dmul>
 80079c0:	ec53 2b19 	vmov	r2, r3, d9
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f8 fc08 	bl	80001e0 <__aeabi_dsub>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4640      	mov	r0, r8
 80079d6:	4649      	mov	r1, r9
 80079d8:	f7f8 fc02 	bl	80001e0 <__aeabi_dsub>
 80079dc:	a370      	add	r3, pc, #448	; (adr r3, 8007ba0 <__ieee754_pow+0x9e8>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fdb5 	bl	8000550 <__aeabi_dmul>
 80079e6:	a370      	add	r3, pc, #448	; (adr r3, 8007ba8 <__ieee754_pow+0x9f0>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	4680      	mov	r8, r0
 80079ee:	4689      	mov	r9, r1
 80079f0:	4620      	mov	r0, r4
 80079f2:	4629      	mov	r1, r5
 80079f4:	f7f8 fdac 	bl	8000550 <__aeabi_dmul>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4640      	mov	r0, r8
 80079fe:	4649      	mov	r1, r9
 8007a00:	f7f8 fbf0 	bl	80001e4 <__adddf3>
 8007a04:	4604      	mov	r4, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fbe8 	bl	80001e4 <__adddf3>
 8007a14:	4632      	mov	r2, r6
 8007a16:	463b      	mov	r3, r7
 8007a18:	4680      	mov	r8, r0
 8007a1a:	4689      	mov	r9, r1
 8007a1c:	f7f8 fbe0 	bl	80001e0 <__aeabi_dsub>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fbda 	bl	80001e0 <__aeabi_dsub>
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460f      	mov	r7, r1
 8007a32:	464b      	mov	r3, r9
 8007a34:	4640      	mov	r0, r8
 8007a36:	4649      	mov	r1, r9
 8007a38:	f7f8 fd8a 	bl	8000550 <__aeabi_dmul>
 8007a3c:	a35c      	add	r3, pc, #368	; (adr r3, 8007bb0 <__ieee754_pow+0x9f8>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	4604      	mov	r4, r0
 8007a44:	460d      	mov	r5, r1
 8007a46:	f7f8 fd83 	bl	8000550 <__aeabi_dmul>
 8007a4a:	a35b      	add	r3, pc, #364	; (adr r3, 8007bb8 <__ieee754_pow+0xa00>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f7f8 fbc6 	bl	80001e0 <__aeabi_dsub>
 8007a54:	4622      	mov	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	f7f8 fd7a 	bl	8000550 <__aeabi_dmul>
 8007a5c:	a358      	add	r3, pc, #352	; (adr r3, 8007bc0 <__ieee754_pow+0xa08>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fbbf 	bl	80001e4 <__adddf3>
 8007a66:	4622      	mov	r2, r4
 8007a68:	462b      	mov	r3, r5
 8007a6a:	f7f8 fd71 	bl	8000550 <__aeabi_dmul>
 8007a6e:	a356      	add	r3, pc, #344	; (adr r3, 8007bc8 <__ieee754_pow+0xa10>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f7f8 fbb4 	bl	80001e0 <__aeabi_dsub>
 8007a78:	4622      	mov	r2, r4
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	f7f8 fd68 	bl	8000550 <__aeabi_dmul>
 8007a80:	a353      	add	r3, pc, #332	; (adr r3, 8007bd0 <__ieee754_pow+0xa18>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 fbad 	bl	80001e4 <__adddf3>
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	f7f8 fd5f 	bl	8000550 <__aeabi_dmul>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4640      	mov	r0, r8
 8007a98:	4649      	mov	r1, r9
 8007a9a:	f7f8 fba1 	bl	80001e0 <__aeabi_dsub>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	f7f8 fd51 	bl	8000550 <__aeabi_dmul>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	ec41 0b19 	vmov	d9, r0, r1
 8007ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ab8:	4620      	mov	r0, r4
 8007aba:	4629      	mov	r1, r5
 8007abc:	f7f8 fb90 	bl	80001e0 <__aeabi_dsub>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	ec51 0b19 	vmov	r0, r1, d9
 8007ac8:	f7f8 fe6c 	bl	80007a4 <__aeabi_ddiv>
 8007acc:	4632      	mov	r2, r6
 8007ace:	4604      	mov	r4, r0
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	f7f8 fd3a 	bl	8000550 <__aeabi_dmul>
 8007adc:	4632      	mov	r2, r6
 8007ade:	463b      	mov	r3, r7
 8007ae0:	f7f8 fb80 	bl	80001e4 <__adddf3>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7f8 fb78 	bl	80001e0 <__aeabi_dsub>
 8007af0:	4642      	mov	r2, r8
 8007af2:	464b      	mov	r3, r9
 8007af4:	f7f8 fb74 	bl	80001e0 <__aeabi_dsub>
 8007af8:	460b      	mov	r3, r1
 8007afa:	4602      	mov	r2, r0
 8007afc:	493a      	ldr	r1, [pc, #232]	; (8007be8 <__ieee754_pow+0xa30>)
 8007afe:	2000      	movs	r0, #0
 8007b00:	f7f8 fb6e 	bl	80001e0 <__aeabi_dsub>
 8007b04:	e9cd 0100 	strd	r0, r1, [sp]
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b12:	da2f      	bge.n	8007b74 <__ieee754_pow+0x9bc>
 8007b14:	4650      	mov	r0, sl
 8007b16:	ed9d 0b00 	vldr	d0, [sp]
 8007b1a:	f000 f9cd 	bl	8007eb8 <scalbn>
 8007b1e:	ec51 0b10 	vmov	r0, r1, d0
 8007b22:	ec53 2b18 	vmov	r2, r3, d8
 8007b26:	f7ff bbe0 	b.w	80072ea <__ieee754_pow+0x132>
 8007b2a:	4b30      	ldr	r3, [pc, #192]	; (8007bec <__ieee754_pow+0xa34>)
 8007b2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007b30:	429e      	cmp	r6, r3
 8007b32:	f77f af0b 	ble.w	800794c <__ieee754_pow+0x794>
 8007b36:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <__ieee754_pow+0xa38>)
 8007b38:	440b      	add	r3, r1
 8007b3a:	4303      	orrs	r3, r0
 8007b3c:	d00b      	beq.n	8007b56 <__ieee754_pow+0x99e>
 8007b3e:	a326      	add	r3, pc, #152	; (adr r3, 8007bd8 <__ieee754_pow+0xa20>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	ec51 0b18 	vmov	r0, r1, d8
 8007b48:	f7f8 fd02 	bl	8000550 <__aeabi_dmul>
 8007b4c:	a322      	add	r3, pc, #136	; (adr r3, 8007bd8 <__ieee754_pow+0xa20>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7ff bbca 	b.w	80072ea <__ieee754_pow+0x132>
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	f7f8 fb41 	bl	80001e0 <__aeabi_dsub>
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	f7f8 ff7b 	bl	8000a5c <__aeabi_dcmpge>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f43f aef0 	beq.w	800794c <__ieee754_pow+0x794>
 8007b6c:	e7e7      	b.n	8007b3e <__ieee754_pow+0x986>
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	e717      	b.n	80079a4 <__ieee754_pow+0x7ec>
 8007b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	e7d2      	b.n	8007b22 <__ieee754_pow+0x96a>
 8007b7c:	491a      	ldr	r1, [pc, #104]	; (8007be8 <__ieee754_pow+0xa30>)
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7ff bb9e 	b.w	80072c0 <__ieee754_pow+0x108>
 8007b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b88:	f7ff bb9a 	b.w	80072c0 <__ieee754_pow+0x108>
 8007b8c:	9000      	str	r0, [sp, #0]
 8007b8e:	f7ff bb76 	b.w	800727e <__ieee754_pow+0xc6>
 8007b92:	2100      	movs	r1, #0
 8007b94:	f7ff bb60 	b.w	8007258 <__ieee754_pow+0xa0>
 8007b98:	00000000 	.word	0x00000000
 8007b9c:	3fe62e43 	.word	0x3fe62e43
 8007ba0:	fefa39ef 	.word	0xfefa39ef
 8007ba4:	3fe62e42 	.word	0x3fe62e42
 8007ba8:	0ca86c39 	.word	0x0ca86c39
 8007bac:	be205c61 	.word	0xbe205c61
 8007bb0:	72bea4d0 	.word	0x72bea4d0
 8007bb4:	3e663769 	.word	0x3e663769
 8007bb8:	c5d26bf1 	.word	0xc5d26bf1
 8007bbc:	3ebbbd41 	.word	0x3ebbbd41
 8007bc0:	af25de2c 	.word	0xaf25de2c
 8007bc4:	3f11566a 	.word	0x3f11566a
 8007bc8:	16bebd93 	.word	0x16bebd93
 8007bcc:	3f66c16c 	.word	0x3f66c16c
 8007bd0:	5555553e 	.word	0x5555553e
 8007bd4:	3fc55555 	.word	0x3fc55555
 8007bd8:	c2f8f359 	.word	0xc2f8f359
 8007bdc:	01a56e1f 	.word	0x01a56e1f
 8007be0:	3fe00000 	.word	0x3fe00000
 8007be4:	000fffff 	.word	0x000fffff
 8007be8:	3ff00000 	.word	0x3ff00000
 8007bec:	4090cbff 	.word	0x4090cbff
 8007bf0:	3f6f3400 	.word	0x3f6f3400
 8007bf4:	652b82fe 	.word	0x652b82fe
 8007bf8:	3c971547 	.word	0x3c971547

08007bfc <__ieee754_sqrt>:
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	ec55 4b10 	vmov	r4, r5, d0
 8007c04:	4e56      	ldr	r6, [pc, #344]	; (8007d60 <__ieee754_sqrt+0x164>)
 8007c06:	43ae      	bics	r6, r5
 8007c08:	ee10 0a10 	vmov	r0, s0
 8007c0c:	ee10 3a10 	vmov	r3, s0
 8007c10:	4629      	mov	r1, r5
 8007c12:	462a      	mov	r2, r5
 8007c14:	d110      	bne.n	8007c38 <__ieee754_sqrt+0x3c>
 8007c16:	ee10 2a10 	vmov	r2, s0
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	f7f8 fc98 	bl	8000550 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fadc 	bl	80001e4 <__adddf3>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	ec45 4b10 	vmov	d0, r4, r5
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	dc10      	bgt.n	8007c5e <__ieee754_sqrt+0x62>
 8007c3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007c40:	4330      	orrs	r0, r6
 8007c42:	d0f5      	beq.n	8007c30 <__ieee754_sqrt+0x34>
 8007c44:	b15d      	cbz	r5, 8007c5e <__ieee754_sqrt+0x62>
 8007c46:	ee10 2a10 	vmov	r2, s0
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	ee10 0a10 	vmov	r0, s0
 8007c50:	f7f8 fac6 	bl	80001e0 <__aeabi_dsub>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	f7f8 fda4 	bl	80007a4 <__aeabi_ddiv>
 8007c5c:	e7e6      	b.n	8007c2c <__ieee754_sqrt+0x30>
 8007c5e:	1509      	asrs	r1, r1, #20
 8007c60:	d076      	beq.n	8007d50 <__ieee754_sqrt+0x154>
 8007c62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007c66:	07ce      	lsls	r6, r1, #31
 8007c68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007c6c:	bf5e      	ittt	pl
 8007c6e:	0fda      	lsrpl	r2, r3, #31
 8007c70:	005b      	lslpl	r3, r3, #1
 8007c72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007c76:	0fda      	lsrs	r2, r3, #31
 8007c78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007c7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007c80:	2000      	movs	r0, #0
 8007c82:	106d      	asrs	r5, r5, #1
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	f04f 0e16 	mov.w	lr, #22
 8007c8a:	4684      	mov	ip, r0
 8007c8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c90:	eb0c 0401 	add.w	r4, ip, r1
 8007c94:	4294      	cmp	r4, r2
 8007c96:	bfde      	ittt	le
 8007c98:	1b12      	suble	r2, r2, r4
 8007c9a:	eb04 0c01 	addle.w	ip, r4, r1
 8007c9e:	1840      	addle	r0, r0, r1
 8007ca0:	0052      	lsls	r2, r2, #1
 8007ca2:	f1be 0e01 	subs.w	lr, lr, #1
 8007ca6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007caa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007cae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cb2:	d1ed      	bne.n	8007c90 <__ieee754_sqrt+0x94>
 8007cb4:	4671      	mov	r1, lr
 8007cb6:	2720      	movs	r7, #32
 8007cb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007cbc:	4562      	cmp	r2, ip
 8007cbe:	eb04 060e 	add.w	r6, r4, lr
 8007cc2:	dc02      	bgt.n	8007cca <__ieee754_sqrt+0xce>
 8007cc4:	d113      	bne.n	8007cee <__ieee754_sqrt+0xf2>
 8007cc6:	429e      	cmp	r6, r3
 8007cc8:	d811      	bhi.n	8007cee <__ieee754_sqrt+0xf2>
 8007cca:	2e00      	cmp	r6, #0
 8007ccc:	eb06 0e04 	add.w	lr, r6, r4
 8007cd0:	da43      	bge.n	8007d5a <__ieee754_sqrt+0x15e>
 8007cd2:	f1be 0f00 	cmp.w	lr, #0
 8007cd6:	db40      	blt.n	8007d5a <__ieee754_sqrt+0x15e>
 8007cd8:	f10c 0801 	add.w	r8, ip, #1
 8007cdc:	eba2 020c 	sub.w	r2, r2, ip
 8007ce0:	429e      	cmp	r6, r3
 8007ce2:	bf88      	it	hi
 8007ce4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007ce8:	1b9b      	subs	r3, r3, r6
 8007cea:	4421      	add	r1, r4
 8007cec:	46c4      	mov	ip, r8
 8007cee:	0052      	lsls	r2, r2, #1
 8007cf0:	3f01      	subs	r7, #1
 8007cf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007cf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007cfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cfe:	d1dd      	bne.n	8007cbc <__ieee754_sqrt+0xc0>
 8007d00:	4313      	orrs	r3, r2
 8007d02:	d006      	beq.n	8007d12 <__ieee754_sqrt+0x116>
 8007d04:	1c4c      	adds	r4, r1, #1
 8007d06:	bf13      	iteet	ne
 8007d08:	3101      	addne	r1, #1
 8007d0a:	3001      	addeq	r0, #1
 8007d0c:	4639      	moveq	r1, r7
 8007d0e:	f021 0101 	bicne.w	r1, r1, #1
 8007d12:	1043      	asrs	r3, r0, #1
 8007d14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007d18:	0849      	lsrs	r1, r1, #1
 8007d1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007d1e:	07c2      	lsls	r2, r0, #31
 8007d20:	bf48      	it	mi
 8007d22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007d26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	463d      	mov	r5, r7
 8007d2e:	e77f      	b.n	8007c30 <__ieee754_sqrt+0x34>
 8007d30:	0ada      	lsrs	r2, r3, #11
 8007d32:	3815      	subs	r0, #21
 8007d34:	055b      	lsls	r3, r3, #21
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	d0fa      	beq.n	8007d30 <__ieee754_sqrt+0x134>
 8007d3a:	02d7      	lsls	r7, r2, #11
 8007d3c:	d50a      	bpl.n	8007d54 <__ieee754_sqrt+0x158>
 8007d3e:	f1c1 0420 	rsb	r4, r1, #32
 8007d42:	fa23 f404 	lsr.w	r4, r3, r4
 8007d46:	1e4d      	subs	r5, r1, #1
 8007d48:	408b      	lsls	r3, r1
 8007d4a:	4322      	orrs	r2, r4
 8007d4c:	1b41      	subs	r1, r0, r5
 8007d4e:	e788      	b.n	8007c62 <__ieee754_sqrt+0x66>
 8007d50:	4608      	mov	r0, r1
 8007d52:	e7f0      	b.n	8007d36 <__ieee754_sqrt+0x13a>
 8007d54:	0052      	lsls	r2, r2, #1
 8007d56:	3101      	adds	r1, #1
 8007d58:	e7ef      	b.n	8007d3a <__ieee754_sqrt+0x13e>
 8007d5a:	46e0      	mov	r8, ip
 8007d5c:	e7be      	b.n	8007cdc <__ieee754_sqrt+0xe0>
 8007d5e:	bf00      	nop
 8007d60:	7ff00000 	.word	0x7ff00000

08007d64 <fabs>:
 8007d64:	ec51 0b10 	vmov	r0, r1, d0
 8007d68:	ee10 2a10 	vmov	r2, s0
 8007d6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d70:	ec43 2b10 	vmov	d0, r2, r3
 8007d74:	4770      	bx	lr

08007d76 <finite>:
 8007d76:	b082      	sub	sp, #8
 8007d78:	ed8d 0b00 	vstr	d0, [sp]
 8007d7c:	9801      	ldr	r0, [sp, #4]
 8007d7e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007d82:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007d86:	0fc0      	lsrs	r0, r0, #31
 8007d88:	b002      	add	sp, #8
 8007d8a:	4770      	bx	lr
 8007d8c:	0000      	movs	r0, r0
	...

08007d90 <nan>:
 8007d90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007d98 <nan+0x8>
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	00000000 	.word	0x00000000
 8007d9c:	7ff80000 	.word	0x7ff80000

08007da0 <rint>:
 8007da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007da2:	ec51 0b10 	vmov	r0, r1, d0
 8007da6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007daa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007dae:	2e13      	cmp	r6, #19
 8007db0:	ee10 4a10 	vmov	r4, s0
 8007db4:	460b      	mov	r3, r1
 8007db6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007dba:	dc58      	bgt.n	8007e6e <rint+0xce>
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	da2b      	bge.n	8007e18 <rint+0x78>
 8007dc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007dc4:	4302      	orrs	r2, r0
 8007dc6:	d023      	beq.n	8007e10 <rint+0x70>
 8007dc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007dcc:	4302      	orrs	r2, r0
 8007dce:	4254      	negs	r4, r2
 8007dd0:	4314      	orrs	r4, r2
 8007dd2:	0c4b      	lsrs	r3, r1, #17
 8007dd4:	0b24      	lsrs	r4, r4, #12
 8007dd6:	045b      	lsls	r3, r3, #17
 8007dd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007ddc:	ea44 0103 	orr.w	r1, r4, r3
 8007de0:	4b32      	ldr	r3, [pc, #200]	; (8007eac <rint+0x10c>)
 8007de2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007de6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 f9f7 	bl	80001e4 <__adddf3>
 8007df6:	e9cd 0100 	strd	r0, r1, [sp]
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e00:	4632      	mov	r2, r6
 8007e02:	f7f8 f9ed 	bl	80001e0 <__aeabi_dsub>
 8007e06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007e0e:	4639      	mov	r1, r7
 8007e10:	ec41 0b10 	vmov	d0, r0, r1
 8007e14:	b003      	add	sp, #12
 8007e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e18:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <rint+0x110>)
 8007e1a:	4132      	asrs	r2, r6
 8007e1c:	ea01 0702 	and.w	r7, r1, r2
 8007e20:	4307      	orrs	r7, r0
 8007e22:	d0f5      	beq.n	8007e10 <rint+0x70>
 8007e24:	0851      	lsrs	r1, r2, #1
 8007e26:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007e2a:	4314      	orrs	r4, r2
 8007e2c:	d00c      	beq.n	8007e48 <rint+0xa8>
 8007e2e:	ea23 0201 	bic.w	r2, r3, r1
 8007e32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e36:	2e13      	cmp	r6, #19
 8007e38:	fa43 f606 	asr.w	r6, r3, r6
 8007e3c:	bf0c      	ite	eq
 8007e3e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007e42:	2400      	movne	r4, #0
 8007e44:	ea42 0306 	orr.w	r3, r2, r6
 8007e48:	4918      	ldr	r1, [pc, #96]	; (8007eac <rint+0x10c>)
 8007e4a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007e4e:	4622      	mov	r2, r4
 8007e50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 f9c4 	bl	80001e4 <__adddf3>
 8007e5c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e64:	4622      	mov	r2, r4
 8007e66:	462b      	mov	r3, r5
 8007e68:	f7f8 f9ba 	bl	80001e0 <__aeabi_dsub>
 8007e6c:	e7d0      	b.n	8007e10 <rint+0x70>
 8007e6e:	2e33      	cmp	r6, #51	; 0x33
 8007e70:	dd07      	ble.n	8007e82 <rint+0xe2>
 8007e72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e76:	d1cb      	bne.n	8007e10 <rint+0x70>
 8007e78:	ee10 2a10 	vmov	r2, s0
 8007e7c:	f7f8 f9b2 	bl	80001e4 <__adddf3>
 8007e80:	e7c6      	b.n	8007e10 <rint+0x70>
 8007e82:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007e86:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007e8a:	40d6      	lsrs	r6, r2
 8007e8c:	4230      	tst	r0, r6
 8007e8e:	d0bf      	beq.n	8007e10 <rint+0x70>
 8007e90:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007e94:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007e98:	bf1f      	itttt	ne
 8007e9a:	ea24 0101 	bicne.w	r1, r4, r1
 8007e9e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007ea2:	fa44 f202 	asrne.w	r2, r4, r2
 8007ea6:	ea41 0402 	orrne.w	r4, r1, r2
 8007eaa:	e7cd      	b.n	8007e48 <rint+0xa8>
 8007eac:	08008078 	.word	0x08008078
 8007eb0:	000fffff 	.word	0x000fffff
 8007eb4:	00000000 	.word	0x00000000

08007eb8 <scalbn>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	ec55 4b10 	vmov	r4, r5, d0
 8007ebe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	b99a      	cbnz	r2, 8007ef0 <scalbn+0x38>
 8007ec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ecc:	4323      	orrs	r3, r4
 8007ece:	d036      	beq.n	8007f3e <scalbn+0x86>
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <scalbn+0x100>)
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	ee10 0a10 	vmov	r0, s0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 fb39 	bl	8000550 <__aeabi_dmul>
 8007ede:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <scalbn+0x104>)
 8007ee0:	429e      	cmp	r6, r3
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	460d      	mov	r5, r1
 8007ee6:	da10      	bge.n	8007f0a <scalbn+0x52>
 8007ee8:	a32b      	add	r3, pc, #172	; (adr r3, 8007f98 <scalbn+0xe0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	e03a      	b.n	8007f66 <scalbn+0xae>
 8007ef0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ef4:	428a      	cmp	r2, r1
 8007ef6:	d10c      	bne.n	8007f12 <scalbn+0x5a>
 8007ef8:	ee10 2a10 	vmov	r2, s0
 8007efc:	4620      	mov	r0, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f8 f970 	bl	80001e4 <__adddf3>
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	e019      	b.n	8007f3e <scalbn+0x86>
 8007f0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f0e:	460b      	mov	r3, r1
 8007f10:	3a36      	subs	r2, #54	; 0x36
 8007f12:	4432      	add	r2, r6
 8007f14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007f18:	428a      	cmp	r2, r1
 8007f1a:	dd08      	ble.n	8007f2e <scalbn+0x76>
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	a120      	add	r1, pc, #128	; (adr r1, 8007fa0 <scalbn+0xe8>)
 8007f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f24:	da1c      	bge.n	8007f60 <scalbn+0xa8>
 8007f26:	a120      	add	r1, pc, #128	; (adr r1, 8007fa8 <scalbn+0xf0>)
 8007f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f2c:	e018      	b.n	8007f60 <scalbn+0xa8>
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	dd08      	ble.n	8007f44 <scalbn+0x8c>
 8007f32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f3e:	ec45 4b10 	vmov	d0, r4, r5
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007f48:	da19      	bge.n	8007f7e <scalbn+0xc6>
 8007f4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007f54:	dd0a      	ble.n	8007f6c <scalbn+0xb4>
 8007f56:	a112      	add	r1, pc, #72	; (adr r1, 8007fa0 <scalbn+0xe8>)
 8007f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e2      	bne.n	8007f26 <scalbn+0x6e>
 8007f60:	a30f      	add	r3, pc, #60	; (adr r3, 8007fa0 <scalbn+0xe8>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 faf3 	bl	8000550 <__aeabi_dmul>
 8007f6a:	e7cb      	b.n	8007f04 <scalbn+0x4c>
 8007f6c:	a10a      	add	r1, pc, #40	; (adr r1, 8007f98 <scalbn+0xe0>)
 8007f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0b8      	beq.n	8007ee8 <scalbn+0x30>
 8007f76:	a10e      	add	r1, pc, #56	; (adr r1, 8007fb0 <scalbn+0xf8>)
 8007f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7c:	e7b4      	b.n	8007ee8 <scalbn+0x30>
 8007f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f82:	3236      	adds	r2, #54	; 0x36
 8007f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <scalbn+0x108>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	e7e8      	b.n	8007f66 <scalbn+0xae>
 8007f94:	f3af 8000 	nop.w
 8007f98:	c2f8f359 	.word	0xc2f8f359
 8007f9c:	01a56e1f 	.word	0x01a56e1f
 8007fa0:	8800759c 	.word	0x8800759c
 8007fa4:	7e37e43c 	.word	0x7e37e43c
 8007fa8:	8800759c 	.word	0x8800759c
 8007fac:	fe37e43c 	.word	0xfe37e43c
 8007fb0:	c2f8f359 	.word	0xc2f8f359
 8007fb4:	81a56e1f 	.word	0x81a56e1f
 8007fb8:	43500000 	.word	0x43500000
 8007fbc:	ffff3cb0 	.word	0xffff3cb0
 8007fc0:	3c900000 	.word	0x3c900000

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr
